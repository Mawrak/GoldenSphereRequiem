--[[------------------------------------------------------------------------------------------------
База данных живых онлайновых объектов, зон и рестрикторов, актёра
Чугай Александр
--------------------------------------------------------------------------------------------------]]

zone_by_name        = {}
sl_by_name          = {}
storage             = {}
sound               = {}
actor               = nil
actor_proxy         = actor_proxy.actor_proxy()
heli                = {}
turret              = {}
camp_storage        = {}
story_by_id	        = {}
smart_terrain_by_id = {}
trader				= nil
info_restr          = {}
delayed				= {}
strn_by_respawn     = {}
dead_bodies		    = {}
creature			= {}	-- true - человек, false - животное (исключая торговца)
last_deadman		= nil

FlagEsc = 0
Flag2 = 0
Dead2 = 0
use_rk = 0
cond_rk = 0
cond_rk_dif = 0
repaired_slot = 0
check_lc_flag = 0

function add_obj( obj )
	if IsStalker(obj) then
		creature[obj:id()] = true
	elseif IsMonster(obj) then
		creature[obj:id()] = false
	end
end

function del_obj( obj )
	storage   [obj:id()] = nil
	if IsStalker(obj) or IsMonster(obj) then
		creature[obj:id()] = nil
	end
end


function remove_delayed()
		for k,v in pairs(delayed) do
			if v ~= 0 then
				local obj = level.object_by_id(v)
				if obj then
					local storage_npc = storage[obj:id()]
					if storage_npc then
						if storage_npc.death then
							xr_logic.issue_event(obj, storage_npc.death, "death_callback", obj, obj)
						end		
						if storage_npc.active_section then
							xr_logic.issue_event(obj, storage_npc[storage_npc.active_scheme], "death_callback", obj, obj)
						end
						sr_territory.issue_event(obj, "death_callback", obj, obj)
						smart_terrain.on_death(obj:id())
						local drop, err_msg = pcall(protected_loot,obj,obj)
						if rx_ai then rx_ai.npc_death(obj,obj) end
						obj:set_patrol_extrapolate_callback(nil)
						obj:set_callback(callback.hit, nil)
						obj:set_callback(callback.death, nil)
						db.add_deadman(obj, obj)
						delayed[k] = 0
						break						
					else
						if not amk.is_quest_npc(obj) then
							s_obj = alife():object(v)
							if s_obj then
								alife():release(s_obj, true)
							end
							delayed[k] = 0
							break
						end
						delayed[k] = 0
					end
				end
			else
				delayed[k] = nil
			end
		end
end

function add_zone( zone )
	zone_by_name[zone:name()] = zone
	add_obj( zone )
end

function del_zone( zone )
	zone_by_name[zone:name()] = nil
	del_obj( zone )
end


function add_sl( sl )
	sl_by_name[sl:name()] = sl
	add_obj( sl )
end

function del_sl( sl )
	sl_by_name[sl:name()] = nil
	del_obj( sl )
end


function add_actor( obj )
	actor = obj
	actor_proxy:net_spawn( obj )
	add_obj( obj )

	--' Разбудим Кочергу. Дурацкое место для это кода, конечно. Куда бы его переместить?
	if has_alife_info("val_actor_has_borov_key") and not has_alife_info("val_borov_dead") then
		actor:give_info_portion("val_borov_dead")
	end
	--' Включим гулаг кабанов на Свалке. По-хорошему надо исправлять
	--' условия активации в логике рестриктора gar_boars_territory2.
	if has_alife_info("agroprom_military_case_done") and not has_alife_info("gar_kill_boars_done") then
		actor:give_info_portion("gar_kill_boars_done")
	end
end

function del_actor()
	del_obj( actor )
	actor_proxy:net_destroy()
	actor = nil
end


function add_heli(obj)	
	heli[obj:id()] = obj
end	
function del_heli(obj)
	heli[obj:id()] = nil
end	

--Туррели

function add_turret(obj)
	turret[obj:id()] = obj
	-- нах не надо, но пусть будет.
	add_obj(obj)
end

function del_turret(obj)
	turret[obj:id()] = nil
	del_obj(obj)
end


function add_smart_terrain( obj )
	smart_terrain_by_id[obj.id] = obj
end

function del_smart_terrain( obj )
	smart_terrain_by_id[obj.id] = nil
end
