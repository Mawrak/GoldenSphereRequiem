--/ Тестирование правильности подключения модулей Artos'а
--/ добавить можно, например, на первый апдейт актора или кнопку
--/ Пример вызова (при подключении всех модулей):
--/ test_modules.execute("lua_helper", "m_netpk", "se_stor", "m_timers")
--/ Результат в логе:
--/ test_modules::>[lua_helper]_success!
--/ test_modules::>[lua_extension]_success!
--/ test_modules::>[m_netpk]_success!
--/ test_modules::>[se_stor]_success!
--/ test_modules::>[m_timers]_success!

local log_prefix = "TEST_MODULES::>"
local log = function(fmt,...)
	_G.log(log_prefix..tostring(fmt),...)
end
if to_log and type(string.exformat) == 'function' then
	log = function(fmt,...) to_log(log_prefix..string.exformat(fmt,...)) end
end

local test = function(func, module_name)
	if func and type(func) == 'function' then
		local status, result = pcall(func)
		if status ~= false and result == nil then
			log("["..module_name.."]_SUCCESS!")
		else
			log("["..module_name.."]_FAILURE!_Result=[%s]"..result)
		end
		return status, result
	end
	log("["..module_name.."]_NO_TEST_FUNC!")
	return false, nil
end

function test_luaextension()
	if not (lua_extension and type(string.exformat) == 'function' and string.exformat("==%s==", 456) == "==456==") then
		return "no lua_extension module found or string format function error. Please check for lua_extension integration in _g.script module."
	end
end

function test_luahelper()
	if not (lua_helper and type(lua_helper.init_maps) == 'function') then
		return "no lua_helper.init_maps found. Please check for lua_helper integration in _g.script module."
	end
	if not (db.idMapNow and db.sMapNow and db.idMapNow == alife():level_id()) then
		return "lua_helper module was not initialized. Please check 'actor_binder:__reinit' function in bind_stalker.script module."
	end
end

function test_mnetpk()
	if not (m_netpk and type(m_netpk.get) == 'function') then
		return "no m_netpk.get found. Please check for m_netpk integration in _g.script module."
	end
end

function test_sestor()
	if not (se_stor and type(se_stor.set) == 'function' and type(_G["GetVar"]) == 'function') then
		return "no se_stor or global GetVar found. Please check for se_stor integration in _g.script module."
	end
	if not (_G.g_bind_actor and type(bind_stalker.save) == 'function' and type(bind_stalker.load) == 'function') then
		return "se_stor was not attached to actor binder. Please check for se_stor integration in bind_stalker.script module."
	end
end

function test_mtimers()
	if not (m_timers and type(m_timers.start) == 'function') then
		return "no m_timers module found. Please check for m_timers integration in _g.script module."
	end
	if not (type(_G["start_game_timer"]) == 'function' and type(_G["start_real_timer"]) == 'function') then
		return "m_timers was not attached to actor binder. Please check for m_timers integration in bind_stalker.script module."
	end
end

local name_to_func = {
	["lua_helper"] = {lua_extension = test_luaextension, lua_helper = test_luahelper},
	["m_netpk"] =    {m_netpk = test_mnetpk},
	["se_stor"] =    {lua_extension = test_luaextension, se_stor = test_sestor},
	["m_timers"] =   {lua_extension = test_luaextension, lua_helper = test_luahelper, m_timers = test_mtimers}
}
function execute(...)
	local arg, tested = {...}, {}
	for _, category in pairs(arg) do
		local func_list = name_to_func[category]
		if type(func_list) == "table" then
			for name, func in pairs(func_list) do
				if type(func) == "function" and not tested[name] then
					test(func, name)
					tested[name] = true
				end
			end
		end
	end
end
