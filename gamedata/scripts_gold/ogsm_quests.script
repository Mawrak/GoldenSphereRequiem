---------------------- Квестовые функции для OGSM 2.x -------------------------

------------------------- Copyright 2007-2008 DEXXX ---------------------------

local vdk_cnt = 0
local blood = 0
local bl_sound = sound_object([[heart\2]])


-- ГГ получает доступ в арсенал "Свободы"
function allow_arsenal()
db.actor:give_info_portion("mil_leader_attach_community2")
end

-- Функция проверка, жив ли Боров
function borov_alive(sid)
	local borov = id_by_sid(425)
	if borov then
		local borov_sobj = alife():object(borov)
		if borov_sobj and borov_sobj:alive() then
			 return true else return false
		end
	else return false end
end 

-- Функция проверка, жив ли Фраер
function fraer_alive(sid)
	local fraer = id_by_sid(438)
	if fraer then
		local fraer_sobj = alife():object(fraer)
		if fraer_sobj and fraer_sobj:alive() then
			 return true else return false
		end
	else return false end
end 

-- Устанавливаем нейтральность для Круглова
function kruglov_neutral(sid)
if has_alife_info("actor_set_bandit") or has_alife_info("actor_set_zombied") then
    local npc = level_object_by_sid (503)
    if npc ~= nil and npc:alive () == true then
    amk.set_npc_relation(npc,target,neutral)
    end
end
end 

-- Проверка помощи Круглову
function kruglov_help_chek()
	if has_alife_info("bar_rescue_research_start") and not has_alife_info("bar_kruglov_follow_actor") then
		if level.name() ~= "l06_rostok" then db.actor:give_info_portion("bar_rescue_research_fail") end
	end
end

-- Убиваем Круглова, если ему не помогли и провалили задание
function kruglov_kill()
	if level.name() == "l06_rostok" then
		local npc = level_object_by_sid (503)
		if npc ~= nil and npc:alive() == true then
			if has_alife_info("bar_rescue_research_fail") then npc:kill(npc) end
		end
	end
end

-- Функция проверка, мёртв ли Фраер
function fraer_dead(sid)
	local fraer = id_by_sid(438)
	if fraer then
		local fraer_sobj = alife():object(fraer)
		if fraer_sobj and fraer_sobj:alive() then
			 return false else return true
		end
	else return true end
end 

-- Функция передача экзоскелета от Борова за убийство Фраера
function kill_fraer_complete(first_speaker, second_speaker) 
dialogs.relocate_item_section(second_speaker, "bandit_master_outfit", "in")
end

-- Функция проверка, жив ли долговец Пуля
function pula_alive(sid)
	local pulya = id_by_sid(406)
	if pulya then
		local pulya_sobj = alife():object(pulya)
		if pulya_sobj and pulya_sobj:alive() then
			 return true else return false
		end
	else return false end
end 

-- Функция проверка, мёртв ли долговец Пуля
function pula_dead(sid)
	local pulya = id_by_sid(406)
	if pulya then
		local pulya_sobj = alife():object(pulya)
		if pulya_sobj and pulya_sobj:alive() then
			 return false else return true
		end
	else return true end
end 

-- Проверка, нашёл ли СВД Черепа
function has_cherep_svd()
if db.actor:object("cherep_svd")  then return true end
return false
end

-- Функции квеста с рукой зомби
function has_zombie_hand()
if db.actor:object("af_zombie_hand") and not has_alife_info("zombie_hand_sold") then return true end
return false
end
function zombie_hand_sold()
if has_alife_info("zombie_hand_sold") and not has_alife_info("zombie_hand_research") then return true end
return false
end
function sell_zombie_hand(first_speaker, second_speaker)
dialogs.relocate_item_section(second_speaker, "af_zombie_hand", "out")
db.actor:give_info_portion("zombie_hand_sold")
end
function zombie_hand_research(first_speaker, second_speaker)
db.actor:give_info_portion("zombie_hand_research")
dialogs.relocate_item_section(first_speaker, "wpn_svu_m1", "in")
dialogs.relocate_item_section(first_speaker, "ammo_7.62x54_7h14", "in")
dialogs.relocate_item_section(first_speaker, "ammo_7.62x54_7h14", "in")
end

-- Проверка, пьян ли актор
function drunk()

	local time = level.get_time_days()*60*24+level.get_time_hours()*60+level.get_time_minutes()
	local end_time = amk.load_variable("drnk", 0)
	if time < end_time then
	return true
	else
		amk.del_variable("drnk")
	return false
	end
end


-- Проверка, пьян ли актор, если да, то даем защиту от пси
function check_drunk()
if db.actor.psy_health < 0.99 then
	local time = level.get_time_days()*60*24+level.get_time_hours()*60+level.get_time_minutes()
	local end_time = amk.load_variable("drnk", 0)
	if time < end_time then
		db.actor.psy_health = 0.0015
	else
		amk.del_variable("drnk")
	end
end
end


-- Наложение постэффекта зомбирования актора
local zombied_fx_flag = false
local zombied_fx_strong_flag = false
local zombied_fx_fatal_flag = false
local start_fx_factor = 0.4
local fx_factor = start_fx_factor
local fx_factor_progress = 0.0005
local premeter_time = time_global() + 100
local meter_time = time_global() + 1000
local meter2_time = time_global() + 100000

local fade_idle
local fade_time = 0
local fade_probability = 0.1

local zmb_fx_sound_obj_right, zmb_fx_sound_obj_left = xr_sound.get_sound_object("psy_voices", "random")
local zmb_fx_sound_obj_heart = xr_sound.get_safe_sound_object("heart\\5")
local zmb_fx_sound_initialized = false

function actor_zombied_fx()

local function zmb_fx_remark()
	local rnd = math.random(1, 12)
	local remark = "characters_voice\\human_01\\zombied\\states\\idle\\idle_"..rnd
	local snd = sound_object(remark)
	if snd and not snd:playing() then
		snd:play_at_pos(db.actor, db.actor:position(), 0, sound_object.s3d)
--		snd:play_no_feedback(db.actor, sound_object.s3d, 0, db.actor:position(), 1.0)
	end
end

local function zmb_fx_noise()
	if not zmb_fx_sound_initialized then
		zmb_fx_sound_obj_right:play_at_pos (db.actor, vector():set(-1, 0, 1), 0, sound_object.s2d + sound_object.looped) 
		zmb_fx_sound_obj_left:play_at_pos (db.actor, vector():set(1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		zmb_fx_sound_obj_heart:play_at_pos (db.actor, vector():set(0, 0, 0), 0, sound_object.s2d + sound_object.looped)

		zmb_fx_sound_initialized = true
	end
	zmb_fx_sound_obj_right.volume = fx_factor^2
	zmb_fx_sound_obj_left.volume = fx_factor^2
	zmb_fx_sound_obj_heart.volume = fx_factor
end

	local uptime = time_global()
	if uptime < premeter_time then return end
	premeter_time = uptime + 100
	if has_alife_info("actor_set_zombied") and db.actor:alive() then
		if not zombied_fx_flag then
			amk.save_variable("zmb_fx_kill_time", game.time()+18000000*amk.game_time_factor)
			level.add_pp_effector("psy_antenna.ppe", 2100, true)
			fx_factor = amk.load_variable("zmb_fx_factor", start_fx_factor)
			level.set_pp_effector_factor(2100, fx_factor)
			zombied_fx_flag = true
		else
			db.actor.power = -(fx_factor*db.actor.power*0.005)
			if uptime > meter_time then
				meter_time = uptime + 1000
				if fx_factor <= 1 then
					fx_factor = fx_factor + fx_factor_progress
				end
				if fx_factor <= 1 then
					level.set_pp_effector_factor(2100, fx_factor)
					amk.del_variable("zmb_fx_factor")
					amk.save_variable("zmb_fx_factor", fx_factor)
				else
					if uptime > meter2_time then
						meter2_time = uptime + 100000
						local zmb_fx_kill_time = amk.load_variable("zmb_fx_kill_time", 0)
						if game.time() > zmb_fx_kill_time then
							db.actor:kill(db.actor)
						else
							if math.random() < 0.1 then
								zmb_fx_remark()
							end
							if not zombied_fx_strong_flag then
								if (zmb_fx_kill_time - game.time()) < 3550000*amk.game_time_factor then
									level.add_cam_effector("camera_effects\\fatigue.anm", 2101, true, "")
									zombied_fx_strong_flag = true
								end
							end
							if (zmb_fx_kill_time - game.time()) < 715000*amk.game_time_factor and not zombied_fx_fatal_flag then
								level.add_pp_effector("alcohol.ppe", 2102, true)
								level.set_pp_effector_factor(2102, 0.3)
								zombied_fx_fatal_flag = true
							end
						end
					end
				end

				if fade_idle == nil then
					fade_idle = math.random(30000,50000)
				end
				if time_global() - fade_time > fade_idle then
					fade_time = time_global()
					fade_idle = math.random(20000,40000)*(1-fx_factor+0.5)
					if math.random() < fade_probability * fx_factor then
						level.add_pp_effector ("agr_u_fade.ppe", 2103, false)
						level.set_pp_effector_factor(2103, math.random(fx_factor-start_fx_factor, 1))
					end
				end

				zmb_fx_noise()
			end
		end
	else
		if zombied_fx_flag then
			level.remove_pp_effector(2100)
			zombied_fx_flag = false
			if zombied_fx_strong_flag then
				level.remove_cam_effector(2101)
				zombied_fx_strong_flag = false
			end
			if zombied_fx_fatal_flag then
				level.remove_pp_effector(2102)
				zombied_fx_fatal_flag = false
			end
			amk.del_variable("zmb_fx_kill_time")
			amk.del_variable("zmb_fx_factor")
			if zmb_fx_sound_obj_right:playing() then 
				zmb_fx_sound_obj_right:stop() 
			end
			if zmb_fx_sound_obj_left:playing() then 
				zmb_fx_sound_obj_left:stop() 
			end
			if zmb_fx_sound_obj_heart:playing() then 
				zmb_fx_sound_obj_heart:stop() 
			end
			zmb_fx_sound_initialized = false
		end
	end

end


-- Наложение постэффекта ношения "Ока" актором
local tsm_8_fx_chk = true
local tsm_8_fx_stored = false
local tsm_8_fx_flag = false
local tsm_8_fx_strong_flag = false
local tsm_8_fx_fatal_flag = false
local tsm_8_fx_all_max_factor = 7		-- общий предел подсчёта степени эффекта
local tsm_8_fx_max_factor = 0.4			-- предел интенсивности звуковых и визуальных эффектов
local tsm_8_fx_all_factor = 0			-- стартовое состояние общей интенсивности эффекта
local tsm_8_fx_factor = 0				-- стартовое состояние интенсивности звуковых и визуальных эффектов
local tsm_8_fx_factor_progress = 0.0005	-- изменение в секунду интенсивности эфектов
local tsm_8_fx_factor_dk = 2			-- коэффициент изменения в секунду интенсивности эфектов при отходняке
local tsm_8_premeter_time = time_global() + 100
local tsm_8_meter_time = time_global() + 1000
local tsm_8_meter2_time = time_global() + 100000

local phantom_idle
local phantom_time = 0
local phantom_max = 10					-- max phantoms
local phantom_spawn_probability = 0.15	-- spawn probability (0..1)
local phantom_spawn_radius = 20.0		-- average radius 30.0m +-15m
local phantom_fov = 80					-- ширина сектора перед глазами актёра, в котором могут рождаться фантомы


local tsm_8_fx_sound_obj_right, tsm_8_fx_sound_obj_left = xr_sound.get_sound_object("psy_voices", "random")
local tsm_8_fx_sound_initialized = false

function actor_af_transmut_8_fx()

	if tsm_8_fx_chk then
		if amk.load_variable("tsm_8_fx_all_factor", 0) ~= 0 then
			tsm_8_fx_stored = true
			tsm_8_fx_chk = false
		end
	end

local function generate_phantoms()
	if phantom_idle == nil then
		phantom_idle = math.random(2000,5000)
	end
	if time_global() - phantom_time > phantom_idle then
		phantom_time = time_global()
		phantom_idle = math.random(15000,30000)
		if math.random() < phantom_spawn_probability * tsm_8_fx_all_factor then
			if phantom_manager:phantom_count() < phantom_max then
				local radius = phantom_spawn_radius * ( math.random()/2.0+0.5 )
				local ang = phantom_fov * math.random() - phantom_fov * 0.5
				local dir = vector_rotate_y( db.actor:direction(), ang )

				phantom_manager.spawn_phantom( db.actor:position():add( dir:mul(radius) ) )
			end
		end
	end
end
local function tsm_8_fx_noise()
	if not tsm_8_fx_sound_initialized then
		tsm_8_fx_sound_obj_right:play_at_pos (db.actor, vector():set(-1, 0, 1), 0, sound_object.s2d + sound_object.looped) 
		tsm_8_fx_sound_obj_left:play_at_pos (db.actor, vector():set(1, 0, 1), 0, sound_object.s2d + sound_object.looped)

		tsm_8_fx_sound_initialized = true
	end
	tsm_8_fx_sound_obj_right.volume = tsm_8_fx_factor
	tsm_8_fx_sound_obj_left.volume = tsm_8_fx_factor
end

	local uptime = time_global()
	if uptime < tsm_8_premeter_time then return end
	tsm_8_premeter_time = uptime + 100
	if inventory.belt["af_transmut_8"] and db.actor:dont_has_info("actor_set_zombied") and db.actor:alive() then
		if not tsm_8_fx_flag then
			tsm_8_fx_stored = true
			if amk.load_variable("tsm_8_fx_zombi_time", 0) == 0 then
				amk.save_variable("tsm_8_fx_zombi_time", game.time()+5000000*amk.game_time_factor)
			end
			level.add_pp_effector("psy_antenna.ppe", 2110, true)
			tsm_8_fx_all_factor = amk.load_variable("tsm_8_fx_all_factor", 0)
			if tsm_8_fx_all_factor > tsm_8_fx_max_factor then
				tsm_8_fx_factor = tsm_8_fx_max_factor
			else
				tsm_8_fx_factor = tsm_8_fx_all_factor
			end
			level.set_pp_effector_factor(2110, tsm_8_fx_factor)
			tsm_8_fx_flag = true
		else
--			db.actor.psy_health = -0.001
			if uptime > tsm_8_meter_time then
				tsm_8_meter_time = uptime + 1000
				if tsm_8_fx_all_factor  + tsm_8_fx_factor_progress <= tsm_8_fx_all_max_factor then
					tsm_8_fx_all_factor = tsm_8_fx_all_factor  + tsm_8_fx_factor_progress
					amk.del_variable("tsm_8_fx_all_factor")
					amk.save_variable("tsm_8_fx_all_factor", tsm_8_fx_all_factor)
				end
				if tsm_8_fx_factor <= tsm_8_fx_max_factor then
					tsm_8_fx_factor = tsm_8_fx_factor + tsm_8_fx_factor_progress
				end
				if tsm_8_fx_factor <= tsm_8_fx_max_factor then
					level.set_pp_effector_factor(2110, tsm_8_fx_factor)
				else
					if not tsm_8_fx_strong_flag then
						tsm_8_fx_strong_flag = true
					end
					if uptime > tsm_8_meter2_time then
						tsm_8_meter2_time = uptime + 100000
						local tsm_8_fx_zombi_time = amk.load_variable("tsm_8_fx_zombi_time", 0)
						if game.time() > tsm_8_fx_zombi_time then
							dialogs.actor_set_zombied()
						end
						if (tsm_8_fx_zombi_time - game.time()) < 715000*amk.game_time_factor and not tsm_8_fx_fatal_flag then
							level.add_pp_effector("escape.ppe", 2111, true)
							level.set_pp_effector_factor(2111, 0.5)
							tsm_8_fx_fatal_flag = true
						end
					end
				end
				tsm_8_fx_noise()
				if tsm_8_fx_strong_flag then
					generate_phantoms()
				end
			end
		end
	elseif (not inventory.belt["af_transmut_8"]) and tsm_8_fx_stored and db.actor:dont_has_info("actor_set_zombied") and db.actor:alive() then
		if not tsm_8_fx_flag then
			level.add_pp_effector("psy_antenna.ppe", 2110, true)
			tsm_8_fx_all_factor = amk.load_variable("tsm_8_fx_all_factor", 0)
			if tsm_8_fx_all_factor > tsm_8_fx_max_factor then
				tsm_8_fx_factor = tsm_8_fx_max_factor
			else
				tsm_8_fx_factor = tsm_8_fx_all_factor
			end
			level.set_pp_effector_factor(2110, tsm_8_fx_factor)
			tsm_8_fx_flag = true
		else
			if uptime > tsm_8_meter_time then
				tsm_8_meter_time = uptime + 1000
				if tsm_8_fx_all_factor  - tsm_8_fx_factor_progress*tsm_8_fx_factor_dk > 0 then
					tsm_8_fx_all_factor = tsm_8_fx_all_factor  - tsm_8_fx_factor_progress*tsm_8_fx_factor_dk
					amk.del_variable("tsm_8_fx_all_factor")
					amk.save_variable("tsm_8_fx_all_factor", tsm_8_fx_all_factor)
				else
					amk.del_variable("tsm_8_fx_all_factor")
					amk.del_variable("tsm_8_fx_zombi_time")
					tsm_8_fx_stored = false
				end
				if (tsm_8_fx_all_factor < tsm_8_fx_max_factor) and (tsm_8_fx_factor - tsm_8_fx_factor_progress*tsm_8_fx_factor_dk > 0) then
					tsm_8_fx_factor = tsm_8_fx_factor - tsm_8_fx_factor_progress*tsm_8_fx_factor_dk
					if tsm_8_fx_strong_flag then
						tsm_8_fx_strong_flag = false
					end
				else
					if not tsm_8_fx_strong_flag then
						tsm_8_fx_strong_flag = true
					end
				end
				if tsm_8_fx_fatal_flag then
					tsm_8_fx_fatal_flag = false
					level.add_pp_effector("escape.ppe", 2111, false)
				end
				if uptime > tsm_8_meter2_time then
					tsm_8_meter2_time = uptime + 100000
					local tsm_8_fx_zombi_time = amk.load_variable("tsm_8_fx_zombi_time", 0)
					if tsm_8_fx_zombi_time ~= 0 then
						amk.save_variable("tsm_8_fx_zombi_time", tsm_8_fx_zombi_time + 100000*amk.game_time_factor*tsm_8_fx_factor_dk)
					end
				end

				tsm_8_fx_noise()
				if tsm_8_fx_strong_flag then
					generate_phantoms()
				end
			end
		end
	else
		if tsm_8_fx_flag then
			level.remove_pp_effector(2110)
			tsm_8_fx_flag = false
			if tsm_8_fx_strong_flag then
				tsm_8_fx_strong_flag = false
			end
			amk.del_variable("tsm_8_fx_all_factor")
			amk.del_variable("tsm_8_fx_zombi_time")
			if tsm_8_fx_sound_obj_right:playing() then 
				tsm_8_fx_sound_obj_right:stop() 
			end
			if tsm_8_fx_sound_obj_left:playing() then 
				tsm_8_fx_sound_obj_left:stop() 
			end
			tsm_8_fx_sound_initialized = false
		end
	end

end


-- Проверка наличия 10 бутылок для повара
function has_ten_vodkas()
if has_alife_info("povar_vodka_asked") then 
	vdk_cnt = 0
	db.actor:iterate_inventory(count_vodka, db.actor)
	if vdk_cnt >= 10 then
		return true 
	else
		return false
	end
else 
	return false 
end
end

-- Проверка наличия бутылки для Толика
function has_five_vodkas(task, objective)
if db.actor ~= nil then 
return db.actor:object("vodka") ~= nil
end
return false
end

-- А вдруг Толик погиб, пока мы искали водку?
function tolik_death()
if has_alife_info("tutorial_wounded_die") or has_alife_info("tutorial_wounded_death") then return true else return false end
end

function tolik_give_vodka(first_speaker, second_speaker) 
	-- НЕ ТРОГАТЬ! Работает!!! 23/06/09 KamikaZze
	dialogs.relocate_item_section(second_speaker, "vodka", "out")
	dialogs.relocate_item_section(second_speaker, "ammo_arbolt", "in")
end

function give_vodka_medusa(first_speaker, second_speaker) 
	dialogs.relocate_item_section(first_speaker, "vodka", "out")
	dialogs.relocate_item_section(second_speaker, "af_medusa", "in")
end

function give_vodka_flower(first_speaker, second_speaker) 
	dialogs.relocate_item_section(first_speaker, "vodka", "out")
	dialogs.relocate_item_section(second_speaker, "af_cristall_flower", "in")
end


function give_vodka_myaso(first_speaker, second_speaker) 
	dialogs.relocate_item_section(first_speaker, "vodka", "out")
	dialogs.relocate_item_section(second_speaker, "af_mincer_meat", "in")
end

function give_vodka_conserva(first_speaker, second_speaker) 
	dialogs.relocate_item_section(first_speaker, "vodka", "out")
	local cons_koll = math.random(1,5)
	for i=1,cons_koll do
		dialogs.relocate_item_section(second_speaker, "conserva", "in")
	end
end

function give_vodka(first_speaker, second_speaker) 
	dialogs.relocate_item_section(first_speaker, "vodka", "out")
end



-- Подсчет водки
function count_vodka(npc, item)
local section = item:section()
if section == "vodka" then
	vdk_cnt = vdk_cnt+1
end
end

-- Удаление водки
function del_vodka(npc, item)
local section = item:section()
if vdk_cnt > 0 then
	if section == "vodka" then
		local s_obj = alife():object(item:id())
		if s_obj then
			alife():release(s_obj, true)
		end
		vdk_cnt = vdk_cnt-1
	end
else
	return
end
end

-- Обмен с поваром
function transfer_povar_items(first_speaker, second_speaker)
vdk_cnt = 10
db.actor:iterate_inventory(del_vodka, db.actor)
for i=1,3 do
	dialogs.relocate_item_section(first_speaker, "ammo_7.62x54_7h14", "in")
end
end


-- Использование водки
function use_vodka(pid)

local start_time
local cur_time
local end_time

if alife():object(pid)==nil then
	start_time = level.get_time_days()*60*24+level.get_time_hours()*60+level.get_time_minutes()
	cur_time = amk.load_variable("drnk", 0)
	if cur_time ~= 0 then
		if (cur_time - start_time) > 0 and (cur_time - start_time) < 15 then
			end_time = cur_time + 5
		else
			end_time = cur_time
		end
	else
		end_time = start_time + 5
	end
	amk.save_variable("drnk", end_time)
end

end

-- Использование губной гармошки
function use_harmonica(pid)

local snd
local length

local music = {"characters_voice\\music\\harmonica_1","characters_voice\\music\\harmonica_2",
			   "characters_voice\\music\\harmonica_3","characters_voice\\music\\harmonica_4",
			   "characters_voice\\music\\harmonica_5","characters_voice\\music\\harmonica_6",
			   "characters_voice\\music\\harmonica_7","characters_voice\\music\\harmonica_8",
			   "characters_voice\\music\\harmonica_9","characters_voice\\music\\harmonica_10"}

if alife():object(pid)==nil then
	snd = sound_object(music[amk.real_rand(table.getn(music))])
	length = snd:length()
	if snd and not snd:playing() then
		snd:play_no_feedback(db.actor,sound_object.s2d, 0, vector():set(0, 0, 0), 1.0)
	end
	amk.start_timer("spw",length/1000, "hrm")
end

end

-- Использование гитары
function use_guitar(pid)

local snd
local length

local music = {"music\\guitar_1","music\\guitar_2","music\\guitar_3","music\\guitar_4",
			   "music\\guitar_5","music\\guitar_6","music\\guitar_7","music\\guitar_8",
			   "music\\guitar_9","music\\guitar_10","music\\guitar_11",
			   "characters_voice\\music\\guitar_1","characters_voice\\music\\guitar_3",
			   "characters_voice\\music\\guitar_5","characters_voice\\music\\guitar_6",
			   "characters_voice\\music\\guitar_7","characters_voice\\music\\guitar_8",
			   "characters_voice\\music\\guitar_9","characters_voice\\music\\guitar_10"
			   }

if alife():object(pid)==nil then
	snd = sound_object(music[amk.real_rand(table.getn(music))])
	length = snd:length()
	if snd and not snd:playing() then
		snd:play_no_feedback(db.actor,sound_object.s2d, 0, vector():set(0, 0, 0), 1.0)
	end
	amk.start_timer("spw",length/1000, "gtr")
end

end


-- Использование рации
function use_radio(pid)
--- Устарела, не используется
end

-- Функции вызываются на дроп предмета
--function check_use_vodka(p_obj)
--if p_obj and p_obj:section() == "vodka" then
--	amk.start_timer("vdk", 0.1, p_obj:id())
--end
--end
--function check_use_harmonica(p_obj)
--if p_obj and p_obj:section() == "harmonica_f" then
--	amk.start_timer("hrm", 0.1, p_obj:id())
--end
--end
--function check_use_radio(p_obj)
--if p_obj and p_obj:section() == "hand_radio_f" then
--	if amk.check_game() then
--		amk.start_timer("rad", 0.1, p_obj:id())
--	end
--end
--end
--function check_use_guitar(p_obj)
--if p_obj and p_obj:section() == "guitar_f" then
--	amk.start_timer("gtr", 0.1, p_obj:id())
--end
--end


-- Функции квеста с секретным складом монолита
function spawn_fn2000()
alife():create("wpn_m_134", vector():set(305.05,-39.38,-25.8), 68330, 1930)
for i=1,5 do
alife():create("ammo_7.62x54r", vector():set(305.05,-39.38,-25.8), 68330, 1930)
end
end

-- Помощь раненому
function help_wounded(npc)
local snd
	if npc:name()~="esc_vagon_wounded" then
		snd = xr_sound.get_safe_sound_object("characters_voice\\human_01\\newbie\\help\\wounded_thanx\\thanx_"..math.random(1,3))
		if snd then
			snd:play_no_feedback(npc, sound_object.s3d, 0, npc:position(), 1.0)
		end
	else 
		db.actor:give_info_portion("tutorial_wounded_heal")
		db.actor:give_info_portion("tutorial_wounded_help")
	end
	if npc:relation(db.actor)==game_object.enemy and math.random() > 0.4 then
		npc:set_character_community("stalker", 0, 0)
		npc:set_relation(game_object.friend, db.actor)
		npc:enable_talk()
	elseif npc:relation(db.actor)~=game_object.enemy then
		npc:set_relation(game_object.friend, db.actor)
	end

end

-- Эффект от критического ранения
function wounded_pp()
if not has_alife_info("actor_set_zombied") then 
wounded_pp_normal()
else
wounded_pp_zombied()
end
end

function wounded_pp_normal()
	if db.actor.health<0.2 and blood==0 then
		level.add_pp_effector("escape.ppe", 1999, true)
		level.set_pp_effector_factor(1999, 5.0)
		if bl_sound and not bl_sound:playing() then 
			bl_sound:play_at_pos(db.actor, db.actor:position(), 1, sound_object.looped)
		end
		blood = 1
	elseif db.actor.health>0.2 then
		level.remove_pp_effector(1999)
		if bl_sound:playing() then 
			bl_sound:stop() 
		end
		blood = 0
	elseif db.actor.health<0.2 and blood==1 and bl_sound:playing() then
		bl_sound:set_position(db.actor:position())
	end
end

function wounded_pp_zombied()
	if db.actor.health<0.5 and blood==0 then
		level.add_pp_effector("escape.ppe", 1999, true)
		level.set_pp_effector_factor(1999, 5.0)
		if bl_sound and not bl_sound:playing() then 
			bl_sound:play_at_pos(db.actor, db.actor:position(), 1, sound_object.looped)
		end
		blood = 1
	elseif db.actor.health>0.5 then
		level.remove_pp_effector(1999)
		if bl_sound:playing() then 
			bl_sound:stop() 
		end
		blood = 0
	elseif db.actor.health<0.5 and blood==1 and bl_sound:playing() then
		bl_sound:set_position(db.actor:position())
	end
end


-- Функции квестов Темного дилера
function kill_arny_precondition()
	if has_alife_info("pri_trader_first_talk") and not has_alife_info("pri_trader_arny_task") and
	   not has_alife_info("aem_arny_dead") and not has_alife_info("aem_arny_spread_out") then
		return true
	else
		return false
	end
end
function kill_arny_reward_precondition()
	if (has_alife_info("aem_arny_dead") or has_alife_info("aem_arny_spread_out")) and
	   has_alife_info("pri_trader_arny_task") and not has_alife_info("pri_trader_arny_task_done") then
		return true
	else
		return false
	end
end
function kill_freedom_precondition()
	if ( has_alife_info("pri_trader_arny_task_done") or (not has_alife_info("pri_trader_arny_task") and (has_alife_info("aem_arny_dead") or has_alife_info("aem_arny_spread_out"))) ) and
	   ( not has_alife_info("sar2_death_49") or not has_alife_info("sar2_death_48") ) and
	   not has_alife_info("pri_trader_freedom_task") then
		return true
	else
		return false
	end
end
function kill_dolg_precondition()
	if ( has_alife_info("pri_trader_arny_task_done") or (not has_alife_info("pri_trader_arny_task") and (has_alife_info("aem_arny_dead") or has_alife_info("aem_arny_spread_out"))) ) and
	   ( has_alife_info("pri_trader_freedom_task_done") or (not has_alife_info("pri_trader_freedom_task") and has_alife_info("sar2_death_49") and has_alife_info("sar2_death_48")) ) and
	   ( not has_alife_info("bar_voronin_dead") or not has_alife_info("sar2_death_42") ) and
	   not has_alife_info("pri_trader_dolg_task") then
		return true
	else
		return false
	end
end
function kill_arny_reward(first_speaker, second_speaker)
	dialogs.relocate_money(second_speaker, 10000, "in")
end
function kill_freedom_reward(first_speaker, second_speaker)
	dialogs.relocate_money(second_speaker, 30000, "in")
end
function kill_dolg_reward(first_speaker, second_speaker)
	dialogs.relocate_money(second_speaker, 50000, "in")
end
function final_precondition()
	if ( has_alife_info("pri_trader_arny_task_done") or (not has_alife_info("pri_trader_arny_task") and (has_alife_info("aem_arny_dead") or has_alife_info("aem_arny_spread_out"))) ) and
	   ( has_alife_info("pri_trader_freedom_task_done") or (not has_alife_info("pri_trader_freedom_task") and has_alife_info("sar2_death_49") and has_alife_info("sar2_death_48")) ) and
	   ( has_alife_info("pri_trader_dolg_task_done") or (not has_alife_info("pri_trader_dolg_task") and has_alife_info("bar_voronin_dead") and has_alife_info("sar2_death_42")) ) then
		return true
	else
		return false
	end
end
function remove_dealer_spot(fs,ss)
	level.map_remove_object_spot(fs:id(), "red_location")
end
function release_dark_dealer()
	local pos
	for i=0, 65535 do
		local obj = level.object_by_id(i)
		if obj and string.find(obj:name(), "pri_trader") then
			pos = obj:position()
		end
	end
	if pos then
		db.actor:hide_weapon()
		level.disable_input()
		level.add_cam_effector("camera_effects\\earthquake.anm", 2010, false, "")
		local s = sound_object("ambient\\earthquake")
		if s then
			s:play_no_feedback(db.actor,sound_object.s2d, 0, vector():set(0, 0, 0), 1.0)
		end
		amk.start_timer("vd1", 2, pos)
	end
end
function x18_laugh()
	local s = sound_object("x18_laugh")
	if s then
		s:play_no_feedback(db.actor,sound_object.s2d, 0, vector():set(0, 0, 0), 1.0)
	end
end

---------------------- Квестовые функции для OGSM 2.x -------------------------

------------------------- Copyright 2007-2008 DEXXX ---------------------------

--[[

If you're going to use the whole of this script or its parts in your own creative 
developments for the S.T.A.L.K.E.R. game, please don't become such a goddamn 
motherfucker like the notorious author of the ABC Mod - Carbrobro. Leave the 
copyrights, note the real author(s) and don't claim others' ideas and their 
realization to be your own ones. It's just simple Modmakers' Ethics. Thank you!

Если вы собираетесь использовать данный скрипт целиком или частично в своих 
разработках по игре S.T.A.L.K.E.R., пожалуйста не опускайтесь до уровня печально 
известного автора ABC мода - Carbrobro. Не удаляйте копирайты, указывайте настоящего 
автора(ов) и не выдавайте чужие идеи и их реализацию за свои. Ведь это элементарная 
этика модостроителей! Спасибо за понимание.

]]--