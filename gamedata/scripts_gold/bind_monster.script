-- Monster binding
-----------------------------------------------------------------------------------
local particles={}


function bind(obj)
	printf("_bp: monster.bind: name='%s', id='%d'", obj:name(), obj:id())

	if not obj:alive() then return end
	local new_binder = generic_object_binder(obj)
	obj:bind_object(new_binder)
end

------------------------------------------------------------------------------------
class "generic_object_binder" (object_binder)

function generic_object_binder:__init(obj) super(obj)
	self.loaded = false
	self.particles = {}
	self.MutantManager = ogsm_mutants.MutantManager()
end 

function generic_object_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_object_binder:reinit()
	object_binder.reinit(self)

	if self.object:clsid() ~= clsid.script_trader then
		self.object:set_patrol_extrapolate_callback(generic_object_binder.extrapolate_callback, self)
	end

	db.storage[self.object:id()] = { }

	self.st = db.storage[self.object:id()]

	self.object:set_callback(callback.patrol_path_in_point, self.waypoint_callback, self)
	self.object:set_callback(callback.hit,					self.hit_callback,		self)
	self.object:set_callback(callback.death,				self.death_callback,	self)
end

function generic_object_binder:update(delta)



	if string.find(self.object:name(), "crow_") then
		return false
	end

	object_binder.update(self, delta)

	if particles[self.object:id()] and table.getn(particles[self.object:id()])>0 then
		for kk,vv in pairs(particles[self.object:id()]) do
			table.remove(particles[self.object:id()],kk)
		end
	end
		
	if table.getn(self.particles)>0 then
		for kk,vv in pairs(self.particles) do
			if vv:is_finished() then
				self.particles[kk]=nil
			else
				vv:update(delta)
			end
		end
	end
	
	--' Апдейт напарника - если у какого-то непися главный враг - главгерой,
	--' то напарник воспринимает это как атаку на самого себя
	--xr_companion.process_enemy(self.object)

	if self.object:clsid() == clsid.script_trader then
		trade_manager.update(self.object)
	end

	if self.object:alive() then
		if self.object:is_talk_enabled() then
			self.object:set_tip_text("character_use")
		else
			self.object:set_tip_text("")
		end
	else
		self.object:set_tip_text_default()
	end


	self.MutantManager:update(self.object)

	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
end

function generic_object_binder:extrapolate_callback()
	local cur_pt = self.object:get_current_point_index()

    if self.object:get_script ()	== false then 
       return false
    end    
    
	if patrol(self.object:patrol()):flags(cur_pt):get() == 0 then
		return true
	end
	return false
end

function generic_object_binder:waypoint_callback(obj, action_type, index)
	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "waypoint_callback", obj, action_type, index)
	end
end

function generic_object_binder:death_callback(victim, who)

local pos = victim:position()
local obj_name = victim:name()

-- Убийство мутантов из лазера: -----------------------------------------------------------------------------------------
if who and who.active_item and who:active_item() and ( who:id()==db.actor:id() or who:id()==victim:id() ) and ( who:active_item():section()=="wpn_laser" or who:active_item():section()=="wpn_flame" ) then
	local pos = victim:position()
	local fx_particle = particles_object("explosions\\campfire_01")
	fx_particle:play_at_pos(pos)
end

-- Повышение кармы при ножевом убийстве в состоянии арт-бонуса:	----------------------------------------------------------
if ( who and who:id()==db.actor:id() and who.active_item and who:active_item() and xr_conditions.actor_armed_knife() == true and has_alife_info("arts_powerup_steel") ) then
		local karma = starvation.get_karma()
		if karma<0.95 then 
			starvation.add_karma(0.03)
				if db.actor:object("wonder_doll") ~= nil then
					soundtrack.wonderdoll_sucess_tip35()
					xr_effects.give_dolltip1()
				end
		end
end

-- Эффект при ножевом убийстве в состоянии настойки-бонуса:	----------------------------------------------------------
if ( who and who:id()==db.actor:id() and who.active_item and who:active_item() and xr_conditions.actor_armed_knife() == true and has_alife_info("rage") ) then
	addon_dialogs.af_licvidator_use2()		
end

-- Убийство в состоянии озверения: -----------------------------------------------------------------------------------------
if who and ( who:id()==db.actor:id() or who:id()==victim:id() ) and has_alife_info("rage2") then
	local hunger = starvation.get_hunger()
	starvation.set_hunger(1.0)
	local thirst = starvation.get_thirst()
	starvation.set_thirst(1.0)
end


	local name = tostring(victim:name())
	
	if not self.object then
		self.object = victim
	end

	if db.actor then
		if who:id() == db.actor:id() then
			xr_statistic.addKillCount(self.object)
		end
	end
	
	if self.st.mob_death then
		xr_logic.issue_event(self.object, self.st.mob_death, "death_callback", victim, who)
	end
	
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end

	smart_terrain.on_death( self.object:id() )
	

	
	local h = hit()
	h.draftsman = self.object
	h.type = hit.fire_wound
	if db.actor ~= nil then
		h.direction = db.actor:position():sub(self.object:position())
	end
	h:bone("pelvis")
	h.power = 1
	h.impulse = 10
	self.object:hit(h)

	if table.getn(self.particles)>0 then
		for kk,vv in pairs(self.particles) do
				vv:on_death()
		end
	end
	
	self.MutantManager:on_death(self.object)
	

end



function generic_object_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	if who and victim and string.find(who:name(), "vehicle_btr") then
		who = db.actor
	end	
	if self.st.hit then
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end


	
	
-- Расчёт урона по мутанту в зависимости от пушки(в руках) и дистанции до цели: ----------------------------------------------------------------------

-- малая дистанция + сильный мутант = хит;
-- большая дистанция + сильный мутант = нет хита;
-- большая дистанция + слабый мутант = хит;
-- малая дистанция + слабый мутант = хит;

-- От других НПС: ---------------------------------------------------------------------------------------------

if ( who and who:id()~=db.actor:id() and IsStalker(who) and who.active_item and who:active_item() and amount > 0 ) then
		local h = hit()
         h.type = hit.fire_wound
         h.power = 0.6
         h.impulse = 50
         h.draftsman = obj 
         h.direction = vector():set(-1,0,0) 
         obj:hit(h)
end

local active_wpn = db.actor:active_item()
if who and who:id()==db.actor:id() and amount > 0 and active_wpn then

obj  = obj or self.object
id = get_clsid(obj)
local h = hit()

local obj_pos = obj:position()
local anom_particle = particles_object("explosions\\campfire_01")
local ammo_type = rx_utils.get_weapon_data(alife():object(active_wpn:id())).ammo_type

target_dist = obj:position():distance_to(db.actor:position())

function strong_mob()
    if id == clsid.boar_s or
       id == clsid.bloodsucker_s or
       id == clsid.flesh_s or
       id == clsid.pseudodog_s or
       id == clsid.psy_dog_s or
       id == clsid.burer_s or
       id == clsid.chimera_s or
	   id == clsid.controller_s or
       id == clsid.gigant_s
    then
	    return true
	end
    return false
end

function dog_mob()
    if id == clsid.dog_s or
       id == clsid.pseudodog_s or
       id == clsid.psy_dog_s
    then
	    return true
	end
    return false
end

function boar_or_flesh_mob()
    if id == clsid.boar_s or
       id == clsid.flesh_s 
    then
	    return true
	end
    return false
end

function bloodsucker_mob()
    if id == clsid.bloodsucker_s 
    then
	    return true
	end
    return false
end

function zomb_izlom_snork_mob()
    if id == clsid.snork_s or
       id == clsid.fracture_s or
       id == clsid.zombie_s
    then
	    return true
	end
    return false
end

function power_ammo()
--if active_wpn then local ammo_type = rx_utils.get_weapon_data(alife():object(active_wpn:id())).ammo_type end
	if ammo_type == 1 then
	    return true
	end
    return false
end

function salt_ammo()	--	только для дробовиков
--if active_wpn then local ammo_type = rx_utils.get_weapon_data(alife():object(active_wpn:id())).ammo_type end
	if ammo_type == 2 then
	    return true
	end
    return false
end

-- проверяем кондицию для глушителя: 
local enemy = self.object:best_enemy()
if not enemy and not self.object:see(db.actor) and xr_conditions.actor_silencer_use() == true then
sil = 2.0
else
sil = 1.0
end

-- Вычисляем урон, дистанцию, тип патрона и импульс: ----------------------
if xr_conditions.actor_armed_pistols1() == true then 
base_hit = 0.4
base_dist = 25
impls = 50
elseif xr_conditions.actor_armed_pistols2() == true then
base_hit = 0.7
base_dist = 40
impls = 80
elseif xr_conditions.actor_armed_smg1() == true then
base_hit = 0.45
base_dist = 20
impls = 60
elseif xr_conditions.actor_armed_smg2() == true then
base_hit = 0.65
base_dist = 30
impls = 90
elseif xr_conditions.actor_armed_rifles1() == true then
base_hit = 0.6
base_dist = 45
impls = 100
elseif xr_conditions.actor_armed_rifles2() == true then
base_hit = 0.7
base_dist = 60
impls = 120
elseif xr_conditions.actor_armed_shotguns1() == true then
base_hit = 0.4
base_dist = 40
impls = 50
elseif xr_conditions.actor_armed_shotguns2() == true then
base_hit = 0.6
base_dist = 50
impls = 70
elseif xr_conditions.actor_armed_sniper1() == true then
base_hit = 3.5
base_dist = 90
impls = 130
elseif xr_conditions.actor_armed_sniper2() == true then
base_hit = 4.5
base_dist = 120
impls = 150
else
base_hit = 0.5 -- базовый урон;
base_dist = 20 -- базовая дистанция;
impls = 50	--	базовый импульс;
end

if ammo_type == 1 then
ammo = 5.0
else ammo = 1.0	--	кофициент типа патрона;
end

if ( has_alife_info("achievement6") and xr_conditions.actor_armed_weak_sniper() == true ) then
snpr = 2.0	--	кофициент снайперского навыка;
else
snpr = 1.0
end

-- Огнестрел общий : -------------------
if db.actor:dont_has_info("arts_powerup_steel") then
	if ( target_dist > base_dist and strong_mob() == true ) then -- большая дистанция + сильный мутант = нет хита;
			addon.enemy_armor_hold_indicator()
		else
			h.type = hit.fire_wound
			h.power = base_hit*ammo*snpr*sil
			h.impulse = impls
			h.draftsman = obj 
			h.direction = obj:position():sub(db.actor:position())
			obj:hit(h)
				--news_manager.send_tip(db.actor, base_hit*ammo*snpr*sil, nil)
	end
elseif has_alife_info("arts_powerup_steel") then
		h.type = hit.fire_wound
		h.power = 10.0
		h.impulse = 300
		h.draftsman = obj 
		h.direction = obj:position():sub(db.actor:position())
		obj:hit(h) 
		soundtrack.artefacts_steel_sound()
end


-- Аномальное оружие: -------------------------------------------------------
if xr_conditions.actor_armed_anomal_svd() == true then
	if zomb_izlom_snork_mob() == true then
		h.type = hit.fire_wound
		h.power = 10.0
		h.impulse = 210
		h.draftsman = obj 
		h.direction = obj:position():sub(db.actor:position())
		obj:hit(h) 
		anom_particle:play_at_pos(obj_pos)
	end
end
if xr_conditions.actor_armed_anomal_aksu() == true then
	if bloodsucker_mob() == true then
		h.type = hit.fire_wound
		h.power = 3.0
		h.impulse = 110
		h.draftsman = obj 
		h.direction = obj:position():sub(db.actor:position())
		obj:hit(h)
		anom_particle:play_at_pos(obj_pos)
	end
end
if xr_conditions.actor_armed_anomal_shotgun() == true then
	if boar_or_flesh_mob() == true then
		h.type = hit.fire_wound
		h.power = 3.0
		h.impulse = 110
		h.draftsman = obj
		h.direction = obj:position():sub(db.actor:position())
		obj:hit(h)
		anom_particle:play_at_pos(obj_pos)
	end
end
if xr_conditions.actor_armed_anomal_pm() == true then
	if dog_mob() == true then
		h.type = hit.fire_wound
		h.power = 3.0
		h.impulse = 110
		h.draftsman = obj 
		h.direction = obj:position():sub(db.actor:position())
		obj:hit(h)
		anom_particle:play_at_pos(obj_pos)
	end
end
if xr_conditions.actor_armed_anomal_tt() == true then
		h.type = hit.fire_wound
		h.power = 2.0
		h.impulse = 110
		h.draftsman = obj 
		h.direction = obj:position():sub(db.actor:position())
		obj:hit(h)
end
	
-- Арбалет:	----------------------------------------------------------
if xr_conditions.actor_armed_crossbow() == true then
         h.type = hit.radiation
         h.power = 1.0
         h.impulse = 0
         h.draftsman = obj
         h.direction = vector():set(0,0,0) 
         obj:hit(h)
end

-- Супер-АКМ: ----------------------------------------------------------
if xr_conditions.actor_armed_ak_super() == true then
    local psy = db.actor.psy_health
	db.actor.psy_health = psy + 0.05
	local hlth = db.actor.health
	db.actor.health = hlth + 0.03
end
	
-- Соль: ----------------------------------------------------------
if salt_ammo() == true and ( xr_conditions.actor_armed_shotguns1() == true or xr_conditions.actor_armed_shotguns2() == true ) then
		local range = obj:range()
		local fov = obj:fov()
			obj:set_range(3)
			obj:set_fov(5)
end	
	
-- Куртка охотника:	--------------------------------------------------------------
if xr_conditions.actor_wears_hunter_outfit() == true then
         h.type = hit.fire_wound
         h.power = 0.45
         h.impulse = 0
         h.draftsman = obj
         h.direction = obj:position():sub(db.actor:position())
         obj:hit(h)
end

-- Аномальный ватник:	--------------------------------------------------------------
if xr_conditions.actor_armed_dvustvolka() == true and xr_conditions.actor_wears_anomal_vatnik() == true then
         h.type = hit.fire_wound
         h.power = 0.65
         h.impulse = 150
         h.draftsman = obj
         h.direction = obj:position():sub(db.actor:position())
         obj:hit(h)
end

-- Обрез:	------------------------------------------------------------------------------
if who:active_item() and who:active_item():section()=="wpn_bm16" and target_dist < 3.0 then
	local obrez_particle = particles_object("anomaly2\\group_items\\body_tear_blood_01")
         h.type = hit.fire_wound
         h.power = 100
         h.impulse = 0
         h.draftsman = obj 
         h.direction = obj:position():sub(db.actor:position())
         obj:hit(h) 
		obrez_particle:play_at_pos(pos)
end

-- Достижение "Мясник" -------------------------------------------------------------------------------
if xr_conditions.actor_armed_knife() == true and has_alife_info("achievement5")  then
		h.type = hit.wound
         h.power = 10
         h.impulse = 0
         h.draftsman = obj 
         h.direction = obj:position():sub(db.actor:position())
         obj:hit(h) 
end

-- Пси-винтовка:	----------------------------------------------------------------------------------
if xr_conditions.actor_armed_psy() == true then
local id = get_clsid (obj)
	local pos = self.object:position()
	if ( id == clsid.boar_s and self.object:section() ~= "boar_friend" and self.object:section() ~= "dar_boar_werwolf" and self.object:section() ~= "boar_master" ) then
		self.object:kill( self.object )
		alife():create("boar_friend", vector():set(pos.x, pos.y, pos.z), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		amk.remove_item(self.object)
		news_manager.send_tip(db.actor, "monster_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.dog_s and self.object:section() ~= "dog_friend" and self.object:section() ~= "ovcharka" ) then
		self.object:kill( self.object )
		alife():create("dog_friend", vector():set(pos.x, pos.y, pos.z), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		amk.remove_item(self.object)
		news_manager.send_tip(db.actor, "monster_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.cat_s and self.object:section() ~= "cat_friend" ) then
		self.object:kill( self.object )
		alife():create("cat_friend", vector():set(pos.x, pos.y, pos.z), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		amk.remove_item(self.object)
		news_manager.send_tip(db.actor, "monster_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.zombie_s and self.object:section() ~= "zombie_friend" ) then
		self.object:kill( self.object )
		alife():create("zombie_friend", vector():set(pos.x, pos.y, pos.z), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		amk.remove_item(self.object)
		news_manager.send_tip(db.actor, "monster_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.flesh_s and self.object:section() ~= "flesh_friend" ) then
		self.object:kill( self.object )
		alife():create("flesh_friend", vector():set(pos.x, pos.y, pos.z), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		amk.remove_item(self.object)
		news_manager.send_tip(db.actor, "monster_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.bloodsucker_s and self.object:section() ~= "bloodsucker_friend" and self.object:section() ~= "dar_krovosos_werwolf" ) then
		self.object:kill( self.object )
		alife():create("bloodsucker_friend", vector():set(pos.x, pos.y, pos.z), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		amk.remove_item(self.object)
		news_manager.send_tip(db.actor, "monster_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.fracture_s and self.object:section() ~= "fracture_friend" and self.object:section() ~= "dar_izlom_werwolf" ) then
		self.object:kill( self.object )
		alife():create("fracture_friend", vector():set(pos.x, pos.y, pos.z), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		amk.remove_item(self.object)
		news_manager.send_tip(db.actor, "monster_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.pseudodog_s and self.object:section() ~= "pseudodog_friend" and self.object:section() ~= "ovcharka" ) then
		self.object:kill( self.object )
		alife():create("pseudodog_friend", vector():set(pos.x, pos.y, pos.z), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		amk.remove_item(self.object)
		news_manager.send_tip(db.actor, "monster_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.snork_s and self.object:section() ~= "snork_friend" ) then
		self.object:kill( self.object )
		alife():create("snork_friend", vector():set(pos.x, pos.y, pos.z), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		amk.remove_item(self.object)
		news_manager.send_tip(db.actor, "monster_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.tushkano_s and self.object:section() ~= "tushkano_friend" ) then
		self.object:kill( self.object )
		alife():create("tushkano_friend", vector():set(pos.x, pos.y, pos.z), db.actor:level_vertex_id(), db.actor:game_vertex_id())
		amk.remove_item(self.object)
		news_manager.send_tip(db.actor, "monster_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.chimera_s ) then
		news_manager.send_tip(db.actor, "chimera_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	elseif ( id == clsid.gigant_s ) then
		news_manager.send_tip(db.actor, "gigant_psy_capture", nil)
		soundtrack.psy_weapon_target_hit()
	end
end



end
end



function generic_object_binder:net_spawn(sobject)

	if string.find(self.object:name(), "crow_") then
		local sobj = alife():object(self.object:id())
		if sobj then
			alife():release(sobj, true)
			return false
		end
	end
	
	if not object_binder.net_spawn(self, sobject) then
		return false
	end
	
	-- news_main_spawn.on_spawn(self.object)
	db.add_obj(self.object)

	xr_gulag.setup_gulag_and_logic_on_spawn( self.object, self.st, sobject, modules.stype_mobile, self.loaded )

	local particle_param = utils.cfg_get_string(system_ini(), self.object:section(), "bones_particles", null, false, false, nil)
	
	if particle_param and system_ini():section_exist(particle_param) then
		local tmp=amk.parse_ini_section_to_array(system_ini(),particle_param)
		
		for k,v in pairs(tmp) do
			local t = amk.parse_ini_section_to_array(system_ini(), v)
			t.obj = self.object
			if not t.stop_on_death or self.object:alive() then
				play_particle(self.object, t)
			end
		end
	end

	return true
end

function generic_object_binder:net_destroy()

	if table.getn(self.particles)>0 then
		for kk,vv in pairs(self.particles) do
			if not vv:is_finished() then
				vv:stop()
				self.particles[kk]=nil
			end
		end
	end

	self.object:set_callback(callback.death,				nil)
	self.object:set_callback(callback.patrol_path_in_point, nil)
	self.object:set_callback(callback.hit,					nil)

	local st = db.storage[self.object:id()]
	if st and st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end
	
	db.del_obj(self.object)
	db.storage[self.object:id()] = nil

	object_binder.net_destroy(self)
end 

function generic_object_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_object_binder:net_save_relevant()
	return true
end

function generic_object_binder:save(packet)

	if string.find(self.object:name(), "crow_") then
		return false
	end

	printf("generic_object_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
	if self.object:clsid() == clsid.script_trader then
		trade_manager.save(self.object, packet)
	end
end

function generic_object_binder:load(reader)

	if string.find(self.object:name(), "crow_") then
		return false
	end

	self.loaded = true

	printf("generic_object_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)

	if reader:r_eof() then
		abort("SAVE FILE IS CORRUPT")
	end

	xr_logic.load_obj(self.object, reader)
	if self.object:clsid() == clsid.script_trader then
		trade_manager.load(self.object, reader)
	end
end

function play_particle(obj,params)
	if not particles[obj:id()] then
		particles[obj:id()]={}
	end
	table.insert(particles[obj:id()],params)
end
