-- Графические оболочки для различных девайсов ------------------------------------------------------------------------------------------------------------------------
-- Jek@n-Limon 30.07.2013 ----------------------------------------------------------------------------------------------------------------------------------------------------------

-- local money = db.actor:money()



-- Ноутбуки разведчиков ------------------------------------------------------------------------------------------------------------------------

function garb_vagon_hunters_notebook_use()
	local spwn = notebook_start(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_start" (CUIScriptWnd)

function notebook_start:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_start:__finalize() end

function notebook_start:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\notebook_start.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- рабочий стол
	-- xml:InitStatic("screen", self)

	-- логотип системы
	xml:InitStatic("system_logo", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
	self.btn_7:Enable(true)
	self.btn_8:Enable(true)
end

function notebook_start:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_start:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end

function notebook_start:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_nodata()
end

function notebook_start:btn3()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_start:btn4()
	self:on_quit()
	soundtrack.click()
	notebook_nodata()
end

function notebook_start:btn5()
	self:on_quit()
	soundtrack.click()
	notebooksurvival1()
end

function notebook_start:btn6()
	self:on_quit()
	soundtrack.click()
	addon_dialogs.notebook_treasures()
end


function notebook_start:btn7()
	self:on_quit()
	soundtrack.click()
	notebook7()
end

function notebook_start:btn8()
	self:on_quit()
	soundtrack.click()
	notebook8()
end


function notebook_start:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook1_1()
	local spwn = notebook_1_1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_1_1" (CUIScriptWnd)

function notebook_1_1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_1_1:__finalize() end

function notebook_1_1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\notebook_1_1.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- рабочий стол
	-- xml:InitStatic("screen", self)

	-- логотип системы
	xml:InitStatic("system_logo", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)
	self.btn_11 = xml:Init3tButton("btn_11", self)
	self:Register(self.btn_11, "btn_11")
	self.btn_11:Enable(false)
	self.btn_12 = xml:Init3tButton("btn_12", self)
	self:Register(self.btn_12, "btn_12")
	self.btn_12:Enable(false)
	self.btn_13 = xml:Init3tButton("btn_13", self)
	self:Register(self.btn_13, "btn_13")
	self.btn_13:Enable(false)
	self.btn_14 = xml:Init3tButton("btn_14", self)
	self:Register(self.btn_14, "btn_14")
	self.btn_14:Enable(false)
	self.btn_15 = xml:Init3tButton("btn_15", self)
	self:Register(self.btn_15, "btn_15")
	self.btn_15:Enable(false)
	self.btn_16 = xml:Init3tButton("btn_16", self)
	self:Register(self.btn_16, "btn_16")
	self.btn_16:Enable(false)
	self.btn_17 = xml:Init3tButton("btn_17", self)
	self:Register(self.btn_17, "btn_17")
	self.btn_17:Enable(false)
	self.btn_18 = xml:Init3tButton("btn_18", self)
	self:Register(self.btn_18, "btn_18")
	self.btn_18:Enable(false)
	self.btn_19 = xml:Init3tButton("btn_19", self)
	self:Register(self.btn_19, "btn_19")
	self.btn_19:Enable(false)
	self.btn_20 = xml:Init3tButton("btn_20", self)
	self:Register(self.btn_20, "btn_20")
	self.btn_20:Enable(false)
	self.btn_21 = xml:Init3tButton("btn_21", self)
	self:Register(self.btn_21, "btn_21")
	self.btn_21:Enable(false)
	self.btn_22 = xml:Init3tButton("btn_22", self)
	self:Register(self.btn_22, "btn_22")
	self.btn_22:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
	self.btn_7:Enable(true)
	self.btn_8:Enable(true)
	self.btn_9:Enable(true)
	self.btn_10:Enable(true)
	self.btn_11:Enable(true)
	self.btn_12:Enable(true)
	self.btn_13:Enable(true)
	self.btn_14:Enable(true)
	self.btn_15:Enable(true)
	self.btn_16:Enable(true)
	self.btn_17:Enable(true)
	self.btn_18:Enable(true)
	self.btn_19:Enable(true)
	self.btn_20:Enable(true)
	self.btn_21:Enable(true)
	self.btn_22:Enable(true)
end

function notebook_1_1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_11", ui_events.BUTTON_CLICKED,  self.btn11, self)
	self:AddCallback("btn_12", ui_events.BUTTON_CLICKED,  self.btn12, self)
	self:AddCallback("btn_13", ui_events.BUTTON_CLICKED,  self.btn13, self)
	self:AddCallback("btn_14", ui_events.BUTTON_CLICKED,  self.btn14, self)
	self:AddCallback("btn_15", ui_events.BUTTON_CLICKED,  self.btn15, self)
	self:AddCallback("btn_16", ui_events.BUTTON_CLICKED,  self.btn16, self)
	self:AddCallback("btn_17", ui_events.BUTTON_CLICKED,  self.btn17, self)
	self:AddCallback("btn_18", ui_events.BUTTON_CLICKED,  self.btn18, self)
	self:AddCallback("btn_19", ui_events.BUTTON_CLICKED,  self.btn19, self)
	self:AddCallback("btn_20", ui_events.BUTTON_CLICKED,  self.btn20, self)
	self:AddCallback("btn_21", ui_events.BUTTON_CLICKED,  self.btn21, self)
	self:AddCallback("btn_22", ui_events.BUTTON_CLICKED,  self.btn22, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_1_1:btn1()
	self:on_quit()
	soundtrack.click()
	notebook_coal()
end

function notebook_1_1:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_scale()
end

function notebook_1_1:btn3()
	self:on_quit()
	soundtrack.click()
	notebook_bitum()
end

function notebook_1_1:btn4()
	self:on_quit()
	soundtrack.click()
	notebook_ballast()
end

function notebook_1_1:btn5()
	self:on_quit()
	soundtrack.click()
	notebook_roll()
end

function notebook_1_1:btn6()
	self:on_quit()
	soundtrack.click()
	notebook_chicken_god()
end

function notebook_1_1:btn7()
	self:on_quit()
	soundtrack.click()
	notebook_steel_nut()
end

function notebook_1_1:btn8()
	self:on_quit()
	soundtrack.click()
	notebook_bearing()
end

function notebook_1_1:btn9()
	self:on_quit()
	soundtrack.click()
	notebook_crown()
end

function notebook_1_1:btn10()
	self:on_quit()
	soundtrack.click()
	notebook_frog()
end

function notebook_1_1:btn11()
	self:on_quit()
	soundtrack.click()
	notebook_chestnut()
end

function notebook_1_1:btn12()
	self:on_quit()
	soundtrack.click()
	notebook_sagebrush()
end

function notebook_1_1:btn13()
	self:on_quit()
	soundtrack.click()
	notebook_mushroom()
end

function notebook_1_1:btn14()
	self:on_quit()
	soundtrack.click()
	notebook_glass()
end

function notebook_1_1:btn15()
	self:on_quit()
	soundtrack.click()
	notebook_teardrop()
end

function notebook_1_1:btn16()
	self:on_quit()
	soundtrack.click()
	notebook_lens()
end

function notebook_1_1:btn17()
	self:on_quit()
	soundtrack.click()
	notebook_spiral()
end

function notebook_1_1:btn18()
	self:on_quit()
	soundtrack.click()
	notebook_cristallic()
end

function notebook_1_1:btn19()
	self:on_quit()
	soundtrack.click()
	notebook_snail()
end

function notebook_1_1:btn20()
	self:on_quit()
	soundtrack.click()
	notebook_hole()
end

function notebook_1_1:btn21()
	self:on_quit()
	soundtrack.click()
	notebook_egg()
end

function notebook_1_1:btn22()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end


function notebook_1_1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_coal()
	local spwn = notebook1_coal(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_coal" (CUIScriptWnd)

function notebook1_coal:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_coal:__finalize() end

function notebook1_coal:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_coal.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_coal:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_coal:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_coal:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_scale()
	local spwn = notebook1_scale(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_scale" (CUIScriptWnd)

function notebook1_scale:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_scale:__finalize() end

function notebook1_scale:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_scale.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_scale:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_scale:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_scale:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_bitum()
	local spwn = notebook1_bitum(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_bitum" (CUIScriptWnd)

function notebook1_bitum:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_bitum:__finalize() end

function notebook1_bitum:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_bitum.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_bitum:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_bitum:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_bitum:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_ballast()
	local spwn = notebook1_ballast(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_ballast" (CUIScriptWnd)

function notebook1_ballast:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_ballast:__finalize() end

function notebook1_ballast:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_ballast.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_ballast:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_ballast:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_ballast:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_roll()
	local spwn = notebook1_roll(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_roll" (CUIScriptWnd)

function notebook1_roll:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_roll:__finalize() end

function notebook1_roll:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_roll.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_roll:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_roll:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_roll:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_chicken_god()
	local spwn = notebook1_chicken_god(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_chicken_god" (CUIScriptWnd)

function notebook1_chicken_god:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_chicken_god:__finalize() end

function notebook1_chicken_god:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_chicken_god.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_chicken_god:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_chicken_god:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_chicken_god:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_steel_nut()
	local spwn = notebook1_steel_nut(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_steel_nut" (CUIScriptWnd)

function notebook1_steel_nut:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_steel_nut:__finalize() end

function notebook1_steel_nut:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_steel_nut.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_steel_nut:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_steel_nut:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_steel_nut:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function notebook_bearing()
	local spwn = notebook1_bearing(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_bearing" (CUIScriptWnd)

function notebook1_bearing:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_bearing:__finalize() end

function notebook1_bearing:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_bearing.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_bearing:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_bearing:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_bearing:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_crown()
	local spwn = notebook1_crown(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_crown" (CUIScriptWnd)

function notebook1_crown:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_crown:__finalize() end

function notebook1_crown:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_crown.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_crown:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_crown:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_crown:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_frog()
	local spwn = notebook1_frog(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_frog" (CUIScriptWnd)

function notebook1_frog:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_frog:__finalize() end

function notebook1_frog:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_frog.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_frog:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_frog:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_frog:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_chestnut()
	local spwn = notebook1_chestnut(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_chestnut" (CUIScriptWnd)

function notebook1_chestnut:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_chestnut:__finalize() end

function notebook1_chestnut:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_chestnut.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_chestnut:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_chestnut:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_chestnut:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_sagebrush()
	local spwn = notebook1_sagebrush(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_sagebrush" (CUIScriptWnd)

function notebook1_sagebrush:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_sagebrush:__finalize() end

function notebook1_sagebrush:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_sagebrush.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_sagebrush:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_sagebrush:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_sagebrush:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_mushroom()
	local spwn = notebook1_mushroom(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_mushroom" (CUIScriptWnd)

function notebook1_mushroom:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_mushroom:__finalize() end

function notebook1_mushroom:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_mushroom.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_mushroom:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_mushroom:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_mushroom:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_glass()
	local spwn = notebook1_glass(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_glass" (CUIScriptWnd)

function notebook1_glass:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_glass:__finalize() end

function notebook1_glass:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_glass.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_glass:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_glass:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_glass:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_teardrop()
	local spwn = notebook1_teardrop(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_teardrop" (CUIScriptWnd)

function notebook1_teardrop:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_teardrop:__finalize() end

function notebook1_teardrop:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_teardrop.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_teardrop:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_teardrop:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_teardrop:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_lens()
	local spwn = notebook1_lens(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_lens" (CUIScriptWnd)

function notebook1_lens:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_lens:__finalize() end

function notebook1_lens:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_lens.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_lens:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_lens:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_lens:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_spiral()
	local spwn = notebook1_spiral(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_spiral" (CUIScriptWnd)

function notebook1_spiral:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_spiral:__finalize() end

function notebook1_spiral:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_spiral.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_spiral:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_spiral:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_spiral:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_cristallic()
	local spwn = notebook1_cristallic(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_cristallic" (CUIScriptWnd)

function notebook1_cristallic:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_cristallic:__finalize() end

function notebook1_cristallic:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_cristallic.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_cristallic:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_cristallic:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_cristallic:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_snail()
	local spwn = notebook1_snail(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_snail" (CUIScriptWnd)

function notebook1_snail:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_snail:__finalize() end

function notebook1_snail:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_snail.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_snail:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_snail:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_snail:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_hole()
	local spwn = notebook1_hole(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_hole" (CUIScriptWnd)

function notebook1_hole:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_hole:__finalize() end

function notebook1_hole:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_hole.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_hole:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_hole:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_hole:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_egg()
	local spwn = notebook1_egg(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_egg" (CUIScriptWnd)

function notebook1_egg:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_egg:__finalize() end

function notebook1_egg:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\artefacts\\notebook_egg.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("art_name", self)

	-- низображение
	xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопка назад
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_egg:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_egg:btn1()
	self:on_quit()
	soundtrack.click()
	notebook1_1()
end


function notebook1_egg:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




--  Магазин -----------------------------------------------------------------------------------------------------------------------------------------------------

function notebook8()
	local spwn = notebook_magazine_categories(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_magazine_categories" (CUIScriptWnd)

function notebook_magazine_categories:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_magazine_categories:__finalize() end

function notebook_magazine_categories:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\notebook_magazine_categories.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- рабочий стол
	-- xml:InitStatic("screen", self)

	-- логотип системы
	xml:InitStatic("system_logo", self)
	xml:InitStatic("icon_suits", self)
	xml:InitStatic("icon_weapons", self)
	xml:InitStatic("icon_ammo", self)
	xml:InitStatic("icon_others", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
end

function notebook_magazine_categories:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_magazine_categories:btn1()
	self:on_quit()
	soundtrack.click()
	notebook_suits()
end

function notebook_magazine_categories:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_weapons()
end

function notebook_magazine_categories:btn3()
	self:on_quit()
	soundtrack.click()
	notebook_ammo()
end

function notebook_magazine_categories:btn4()
	self:on_quit()
	soundtrack.click()
	notebook_others()
end

function notebook_magazine_categories:btn5()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end


function notebook_magazine_categories:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Костюмы:
function notebook_suits()
	local spwn = notebook_magazine1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_magazine1" (CUIScriptWnd)

function notebook_magazine1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_magazine1:__finalize() end

function notebook_magazine1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_magazine1.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- рабочий стол
	-- xml:InitStatic("screen", self)

	-- логотип системы
	xml:InitStatic("system_logo", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
end

function notebook_magazine1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_magazine1:btn1()
	self:on_quit()
	soundtrack.click()
	notebook_seva()
end

function notebook_magazine1:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_berill()
end

function notebook_magazine1:btn3()
	self:on_quit()
	soundtrack.click()
	notebook_bronik()
end

function notebook_magazine1:btn4()
	self:on_quit()
	soundtrack.click()
	notebook_skafandr()
end

function notebook_magazine1:btn5()
	self:on_quit()
	soundtrack.click()
	notebook_ekzo()
end

function notebook_magazine1:btn6()
	self:on_quit()
	soundtrack.click()
	notebook8()
end


function notebook_magazine1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Стволы:
function notebook_weapons()
	local spwn = notebook_magazine2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_magazine2" (CUIScriptWnd)

function notebook_magazine2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_magazine2:__finalize() end

function notebook_magazine2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_magazine2.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- рабочий стол
	-- xml:InitStatic("screen", self)

	-- логотип системы
	xml:InitStatic("system_logo", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
	self.btn_7:Enable(true)
	self.btn_8:Enable(true)
	self.btn_9:Enable(true)
	self.btn_10:Enable(true)
end

function notebook_magazine2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_magazine2:btn1()
	self:on_quit()
	soundtrack.click()
	notebook_akm()
end

function notebook_magazine2:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_pkm()
end

function notebook_magazine2:btn3()
	self:on_quit()
	soundtrack.click()
	notebook_winchester()
end

function notebook_magazine2:btn4()
	self:on_quit()
	soundtrack.click()
	notebook_sayga()
end

function notebook_magazine2:btn5()
	self:on_quit()
	soundtrack.click()
	notebook_m16()
end

function notebook_magazine2:btn6()
	self:on_quit()
	soundtrack.click()
	notebook_vintorez()
end

function notebook_magazine2:btn7()
	self:on_quit()
	soundtrack.click()
	notebook_usas()
end

function notebook_magazine2:btn8()
	self:on_quit()
	soundtrack.click()
	notebook_aug()
end

function notebook_magazine2:btn9()
	self:on_quit()
	soundtrack.click()
	notebook_wa2000()
end

function notebook_magazine2:btn10()
	self:on_quit()
	soundtrack.click()
	notebook8()
end


function notebook_magazine2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Патроны:
function notebook_ammo()
	local spwn = notebook_magazine3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_magazine3" (CUIScriptWnd)

function notebook_magazine3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_magazine3:__finalize() end

function notebook_magazine3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_magazine3.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- рабочий стол
	-- xml:InitStatic("screen", self)

	-- логотип системы
	xml:InitStatic("system_logo", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
	self.btn_7:Enable(true)
	self.btn_8:Enable(true)
	self.btn_9:Enable(true)
	self.btn_10:Enable(true)
end

function notebook_magazine3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_magazine3:btn1()
	self:on_quit()
	soundtrack.click()
	notebook_545x39()
end

function notebook_magazine3:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_556x45()
end

function notebook_magazine3:btn3()
	self:on_quit()
	soundtrack.click()
	notebook_buck()
end

function notebook_magazine3:btn4()
	self:on_quit()
	soundtrack.click()
	notebook_762x54()
end

function notebook_magazine3:btn5()
	self:on_quit()
	soundtrack.click()
	notebook_762x51()
end

function notebook_magazine3:btn6()
	self:on_quit()
	soundtrack.click()
	notebook_762x39()
end

function notebook_magazine3:btn7()
	self:on_quit()
	soundtrack.click()
	notebook_9x18()
end

function notebook_magazine3:btn8()
	self:on_quit()
	soundtrack.click()
	notebook_9x19()
end

function notebook_magazine3:btn9()
	self:on_quit()
	soundtrack.click()
	notebook_sp5792()
end

function notebook_magazine3:btn10()
	self:on_quit()
	soundtrack.click()
	notebook8()
end


function notebook_magazine3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Прочее:
function notebook_others()
	local spwn = notebook_magazine4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_magazine4" (CUIScriptWnd)

function notebook_magazine4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_magazine4:__finalize() end

function notebook_magazine4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_magazine4.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- рабочий стол
	-- xml:InitStatic("screen", self)

	-- логотип системы
	xml:InitStatic("system_logo", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
end

function notebook_magazine4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_magazine4:btn1()
	self:on_quit()
	soundtrack.click()
	notebook_explosive()
end

function notebook_magazine4:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_fuel()
end

function notebook_magazine4:btn3()
	self:on_quit()
	soundtrack.click()
	notebook_medicine()
end

function notebook_magazine4:btn4()
	self:on_quit()
	soundtrack.click()
	notebook_items()
end

function notebook_magazine4:btn5()
	self:on_quit()
	soundtrack.click()
	notebook_instruments()
end

function notebook_magazine4:btn6()
	self:on_quit()
	soundtrack.click()
	notebook8()
end


function notebook_magazine4:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



function notebook_seva()
	local spwn = notebook1_seva(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_seva" (CUIScriptWnd)

function notebook1_seva:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_seva:__finalize() end

function notebook1_seva:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_seva.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)


	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 100000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_seva:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_seva:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_seva")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-100000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_seva:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_suits()
end

function notebook1_seva:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_order_done()
	local spwn = notebook1_order_done(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_order_done" (CUIScriptWnd)

function notebook1_order_done:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_order_done:__finalize() end

function notebook1_order_done:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_order_done.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_order_done:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_order_done:btn1()
	self:on_quit()
	soundtrack.click()
	notebook8()
end


function notebook1_order_done:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_order_fail()
	local spwn = notebook1_order_fail(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_order_fail" (CUIScriptWnd)

function notebook1_order_fail:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_order_fail:__finalize() end

function notebook1_order_fail:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_order_fail.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_order_fail:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_order_fail:btn1()
	self:on_quit()
	soundtrack.click()
	notebook8()
end


function notebook1_order_fail:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_order_fail2()
	local spwn = notebook1_order_fail2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_order_fail2" (CUIScriptWnd)

function notebook1_order_fail2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_order_fail2:__finalize() end

function notebook1_order_fail2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_order_fail2.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("art_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook1_order_fail2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_order_fail2:btn1()
	self:on_quit()
	soundtrack.click()
	notebook8()
end


function notebook1_order_fail2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_berill()
	local spwn = notebook1_berill(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_berill" (CUIScriptWnd)

function notebook1_berill:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_berill:__finalize() end

function notebook1_berill:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_berill.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 150000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_berill:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_berill:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_berill")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-150000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_berill:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_suits()
end

function notebook1_berill:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_bronik()
	local spwn = notebook1_bronik(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_bronik" (CUIScriptWnd)

function notebook1_bronik:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_bronik:__finalize() end

function notebook1_bronik:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_bronik.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 80000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_bronik:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_bronik:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_bronik")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-80000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_bronik:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_suits()
end

function notebook1_bronik:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_skafandr()
	local spwn = notebook1_skafandr(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_skafandr" (CUIScriptWnd)

function notebook1_skafandr:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_skafandr:__finalize() end

function notebook1_skafandr:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_skafandr.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 90000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_skafandr:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_skafandr:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_skafandr")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-90000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_skafandr:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_suits()
end

function notebook1_skafandr:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_ekzo()
	local spwn = notebook1_ekzo(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_ekzo" (CUIScriptWnd)

function notebook1_ekzo:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_ekzo:__finalize() end

function notebook1_ekzo:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_ekzo.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 250000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_ekzo:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_ekzo:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_ekzo")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-250000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_ekzo:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_suits()
end

function notebook1_ekzo:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_akm()
	local spwn = notebook1_akm(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_akm" (CUIScriptWnd)

function notebook1_akm:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_akm:__finalize() end

function notebook1_akm:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_akm.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 100000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_akm:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_akm:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_akm")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-100000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_akm:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_weapons()
end

function notebook1_akm:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_pkm()
	local spwn = notebook1_pkm(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_pkm" (CUIScriptWnd)

function notebook1_pkm:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_pkm:__finalize() end

function notebook1_pkm:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_pkm.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 200000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_pkm:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_pkm:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_pkm")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-200000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_pkm:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_weapons()
end

function notebook1_pkm:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_winchester()
	local spwn = notebook1_winchester(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_winchester" (CUIScriptWnd)

function notebook1_winchester:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_winchester:__finalize() end

function notebook1_winchester:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_winchester.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 120000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_winchester:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_winchester:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_winchester")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-120000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_winchester:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_weapons()
end

function notebook1_winchester:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_sayga()
	local spwn = notebook1_sayga(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_sayga" (CUIScriptWnd)

function notebook1_sayga:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_sayga:__finalize() end

function notebook1_sayga:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_sayga.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 80000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_sayga:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_sayga:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_sayga")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-80000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_sayga:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_weapons()
end

function notebook1_sayga:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_m16()
	local spwn = notebook1_m16(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_m16" (CUIScriptWnd)

function notebook1_m16:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_m16:__finalize() end

function notebook1_m16:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_m16.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 120000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_m16:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_m16:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_m16")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-120000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_m16:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_weapons()
end

function notebook1_m16:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_vintorez()
	local spwn = notebook1_vintorez(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_vintorez" (CUIScriptWnd)

function notebook1_vintorez:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_vintorez:__finalize() end

function notebook1_vintorez:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_vintorez.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 170000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_vintorez:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_vintorez:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_vintorez")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-170000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_vintorez:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_weapons()
end

function notebook1_vintorez:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_usas()
	local spwn = notebook1_usas(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_usas" (CUIScriptWnd)

function notebook1_usas:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_usas:__finalize() end

function notebook1_usas:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_usas.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 150000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_usas:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_usas:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_usas")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-150000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_usas:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_weapons()
end

function notebook1_usas:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_aug()
	local spwn = notebook1_aug(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_aug" (CUIScriptWnd)

function notebook1_aug:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_aug:__finalize() end

function notebook1_aug:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_aug.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 170000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_aug:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_aug:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_aug")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-170000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_aug:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_weapons()
end

function notebook1_aug:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_wa2000()
	local spwn = notebook1_wa2000(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_wa2000" (CUIScriptWnd)

function notebook1_wa2000:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_wa2000:__finalize() end

function notebook1_wa2000:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_wa2000.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 150000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_wa2000:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_wa2000:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_wa2000")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-150000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_wa2000:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_weapons()
end

function notebook1_wa2000:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-- Патрончики:

function notebook_545x39()
	local spwn = notebook1_545x39(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_545x39" (CUIScriptWnd)

function notebook1_545x39:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_545x39:__finalize() end

function notebook1_545x39:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_545x39.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 20000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_545x39:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_545x39:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_ammo545x39")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-20000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_545x39:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_ammo()
end

function notebook1_545x39:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_556x45()
	local spwn = notebook1_556x45(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_556x45" (CUIScriptWnd)

function notebook1_556x45:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_556x45:__finalize() end

function notebook1_556x45:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_556x45.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 25000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_556x45:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_556x45:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_ammo556x45")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-25000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_556x45:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_ammo()
end

function notebook1_556x45:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_buck()
	local spwn = notebook1_buck(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_buck" (CUIScriptWnd)

function notebook1_buck:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_buck:__finalize() end

function notebook1_buck:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_buck.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 10000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_buck:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_buck:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_ammo_shotgun")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-10000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_buck:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_ammo()
end

function notebook1_buck:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_762x54()
	local spwn = notebook1_762x54(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_762x54" (CUIScriptWnd)

function notebook1_762x54:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_762x54:__finalize() end

function notebook1_762x54:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_762x54.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 30000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_762x54:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_762x54:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_ammo762x54")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-30000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_762x54:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_ammo()
end

function notebook1_762x54:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_762x51()
	local spwn = notebook1_762x51(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_762x51" (CUIScriptWnd)

function notebook1_762x51:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_762x51:__finalize() end

function notebook1_762x51:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_762x51.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 35000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_762x51:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_762x51:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_ammo762x51")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-35000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_762x51:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_ammo()
end

function notebook1_762x51:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_762x39()
	local spwn = notebook1_762x39(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_762x39" (CUIScriptWnd)

function notebook1_762x39:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_762x39:__finalize() end

function notebook1_762x39:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_762x39.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 20000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_762x39:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_762x39:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_ammo762x39")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-20000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_762x39:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_ammo()
end

function notebook1_762x39:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_9x18()
	local spwn = notebook1_9x18(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_9x18" (CUIScriptWnd)

function notebook1_9x18:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_9x18:__finalize() end

function notebook1_9x18:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_9x18.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 5000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_9x18:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_9x18:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_ammo9x18")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-5000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_9x18:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_ammo()
end

function notebook1_9x18:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_9x19()
	local spwn = notebook1_9x19(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_9x19" (CUIScriptWnd)

function notebook1_9x19:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_9x19:__finalize() end

function notebook1_9x19:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_9x19.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 8000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_9x19:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_9x19:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_ammo9x19")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-8000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_9x19:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_ammo()
end

function notebook1_9x19:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_sp5792()
	local spwn = notebook1_sp5792(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_sp5792" (CUIScriptWnd)

function notebook1_sp5792:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_sp5792:__finalize() end

function notebook1_sp5792:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_sp5792.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 20000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_sp5792:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_sp5792:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_ammo_rare")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-20000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_sp5792:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_ammo()
end

function notebook1_sp5792:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_explosive()
	local spwn = notebook1_explosive(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_explosive" (CUIScriptWnd)

function notebook1_explosive:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_explosive:__finalize() end

function notebook1_explosive:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_explosive.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 70000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_explosive:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_explosive:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_explosive")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-70000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_explosive:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_others()
end

function notebook1_explosive:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_fuel()
	local spwn = notebook1_fuel(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_fuel" (CUIScriptWnd)

function notebook1_fuel:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_fuel:__finalize() end

function notebook1_fuel:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_fuel.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 10000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_fuel:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_fuel:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_fuel")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-10000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_fuel:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_others()
end

function notebook1_fuel:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_medicine()
	local spwn = notebook1_medicine(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_medicine" (CUIScriptWnd)

function notebook1_medicine:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_medicine:__finalize() end

function notebook1_medicine:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_medicine.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 8000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_medicine:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_medicine:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_medicine")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-8000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_medicine:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_others()
end

function notebook1_medicine:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_items()
	local spwn = notebook1_items(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_items" (CUIScriptWnd)

function notebook1_items:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_items:__finalize() end

function notebook1_items:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_items.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 50000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_items:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_items:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_items")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-50000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_items:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_others()
end

function notebook1_items:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_instruments()
	local spwn = notebook1_instruments(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook1_instruments" (CUIScriptWnd)

function notebook1_instruments:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook1_instruments:__finalize() end

function notebook1_instruments:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\orders\\notebook_instruments.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- низображение
	-- xml:InitStatic("tovar_icon", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)
	xml:InitStatic("description8", self)
	xml:InitStatic("description9", self)
	xml:InitStatic("price", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if db.actor:money() >= 30000 then
	self.btn_1:Enable(true)
	end

	self.btn_2:Enable(true)
end

function notebook1_instruments:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook1_instruments:btn1()
	self:on_quit()
	soundtrack.click()
	if db.actor:dont_has_info("garb_cargo_heli_goto_place")  then
		db.actor:give_info_portion ("actor_order_repare")
		db.actor:give_info_portion ("garb_cargo_heli_goto_place")
		notebook_order_done()
		db.actor:give_money(-30000)
	elseif has_alife_info("garb_cargo_heli_goto_place") then
		notebook_order_fail()
	elseif db.actor:dont_has_info("garb_cargo_heli_goto_place") and has_alife_info("actor_order_seva") or
		has_alife_info("actor_order_berill") or
		has_alife_info("actor_order_bronik") or
		has_alife_info("actor_order_skafandr") or
		has_alife_info("actor_order_ekzo") or
		has_alife_info("actor_order_akm") or
		has_alife_info("actor_order_pkm") or
		has_alife_info("actor_order_winchester") or
		has_alife_info("actor_order_sayga") or
		has_alife_info("actor_order_m16") or
		has_alife_info("actor_order_vintorez") or
		has_alife_info("actor_order_usas") or
		has_alife_info("actor_order_aug") or
		has_alife_info("actor_order_wa2000") or
		has_alife_info("actor_order_ammo545x39") or
		has_alife_info("actor_order_ammo556x45") or
		has_alife_info("actor_order_ammo_shotgun") or
		has_alife_info("actor_order_ammo762x54") or
		has_alife_info("actor_order_ammo762x51") or
		has_alife_info("actor_order_ammo762x39") or
		has_alife_info("actor_order_ammo9x18") or
		has_alife_info("actor_order_ammo9x19") or
		has_alife_info("actor_order_ammo_rare") or
		has_alife_info("actor_order_explosive") or
		has_alife_info("actor_order_fuel") or
		has_alife_info("actor_order_items") or
		has_alife_info("actor_order_repare") or
		has_alife_info("actor_order_medicine") then
		notebook_order_fail2()
	end
end

function notebook1_instruments:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_others()
end

function notebook1_instruments:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



-- Клиенты -----------------------------------------------------------------------------------------------------------------------------------------------------

function notebook7()
	local spwn = notebook_clients(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_clients" (CUIScriptWnd)

function notebook_clients:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_clients:__finalize() end

function notebook_clients:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_clients_list.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- рабочий стол
	-- xml:InitStatic("screen", self)

	-- логотип системы
	xml:InitStatic("system_logo", self)
	xml:InitStatic("icon_client1", self)
	xml:InitStatic("client1_description1", self)
	xml:InitStatic("client1_description2", self)
	xml:InitStatic("client1_description3", self)
	xml:InitStatic("client1_description4", self)
	xml:InitStatic("client1_description5", self)
	xml:InitStatic("icon_client2", self)
	xml:InitStatic("client2_description1", self)
	xml:InitStatic("client2_description2", self)
	xml:InitStatic("client2_description3", self)
	xml:InitStatic("icon_client3", self)
	xml:InitStatic("client3_description1", self)
	xml:InitStatic("client3_description2", self)
	xml:InitStatic("client3_description3", self)
	xml:InitStatic("client3_description4", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	if ( db.actor:dont_has_info("client1_garbage_traveling") or db.actor:dont_has_info("client1_agro_traveling") or db.actor:dont_has_info("client1_darkval_traveling") or  db.actor:dont_has_info("client1_yantar_traveling") or db.actor:dont_has_info("client1_military_traveling") ) then
	self.btn_1:Enable(true)
	end
	
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
end

function notebook_clients:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_clients:btn1()
	self:on_quit()
	soundtrack.click()
	if ( has_alife_info("notebook_client1task1") or has_alife_info("notebook_client1task2") or has_alife_info("notebook_client1task3") ) then
		notebook_client1waiting()
elseif ( db.actor:dont_has_info("notebook_client1task1") and db.actor:dont_has_info("notebook_client1task2") and db.actor:dont_has_info("notebook_client1task3") ) then
		addon_dialogs.client1_tasks_give()
elseif ( has_alife_info("client1_agro_traveling") or has_alife_info("client1_darkval_traveling") or has_alife_info("client1_garbage_traveling") or has_alife_info("client1_military_traveling")) then
		self:on_quit()
	end
		
end

function notebook_clients:btn2()
	self:on_quit()
	soundtrack.click()
	if ( has_alife_info("notebook_client2task1") or has_alife_info("notebook_client2task2") or has_alife_info("notebook_client2task3") ) then
		notebook_client2waiting()
elseif ( db.actor:dont_has_info("notebook_client2task1") and db.actor:dont_has_info("notebook_client2task2") and db.actor:dont_has_info("notebook_client2task3") ) then
		addon_dialogs.client2_tasks_give()
elseif ( has_alife_info("client2_garbage_traveling") or has_alife_info("client2_agro_traveling") or has_alife_info("client2_darkval_traveling") or has_alife_info("client2_military_traveling")) then
		self:on_quit()
	end
end

function notebook_clients:btn3()
	self:on_quit()
	soundtrack.click()
	if has_alife_info("notebook_client3travel") then
		notebook_client3waiting()
elseif db.actor:dont_has_info("notebook_client3travel") then
		notebook_client3()
	end
end

function notebook_clients:btn4()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end


function notebook_clients:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


function notebook_client1task1()
	local spwn = notebook_client_1_task_1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_1_task_1" (CUIScriptWnd)

function notebook_client_1_task_1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_1_task_1:__finalize() end

function notebook_client_1_task_1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_1_task_1.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client1", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_client_1_task_1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_1_task_1:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_info_portion ("notebook_client1task1")
	addon_dialogs.client1_task1_give()
end

function notebook_client_1_task_1:btn2()
	self:on_quit()
	soundtrack.click()
	notebook7()
end

function notebook_client_1_task_1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_client1task2()
	local spwn = notebook_client_1_task_2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_1_task_2" (CUIScriptWnd)

function notebook_client_1_task_2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_1_task_2:__finalize() end

function notebook_client_1_task_2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_1_task_2.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client1", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_client_1_task_2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_1_task_2:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_info_portion ("notebook_client1task2")
	addon_dialogs.client1_task2_give()
end

function notebook_client_1_task_2:btn2()
	self:on_quit()
	soundtrack.click()
	notebook7()
end

function notebook_client_1_task_2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_client1task3()
	local spwn = notebook_client_1_task_3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_1_task_3" (CUIScriptWnd)

function notebook_client_1_task_3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_1_task_3:__finalize() end

function notebook_client_1_task_3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_1_task_3.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client1", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_client_1_task_3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_1_task_3:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_info_portion ("notebook_client1task3")
	addon_dialogs.client1_task3_give()
end

function notebook_client_1_task_3:btn2()
	self:on_quit()
	soundtrack.click()
	notebook7()
end

function notebook_client_1_task_3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_client1waiting()
	local spwn = notebook_client_1_waiting(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_1_waiting" (CUIScriptWnd)

function notebook_client_1_waiting:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_1_waiting:__finalize() end

function notebook_client_1_waiting:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_1_waiting.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client1", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:object("af_black_splash") ~= nil or db.actor:object("af_fulminating_napkin") ~= nil or db.actor:object("af_cancer_eye") ~= nil then
	self.btn_1:Enable(true)
	end
end

function notebook_client_1_waiting:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_1_waiting:btn1()
	self:on_quit()
	soundtrack.click()
	notebook_client1done()
end


function notebook_client_1_waiting:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_client1done()
	local spwn = notebook_client_1_done(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_1_done" (CUIScriptWnd)

function notebook_client_1_done:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_1_done:__finalize() end

function notebook_client_1_done:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_1_done.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client1", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_client_1_done:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_1_done:btn1()
	self:on_quit()
	soundtrack.click()
		if has_alife_info("notebook_client1task1") or has_alife_info("notebook_client1task2") or has_alife_info("notebook_client1task3") then
		addon_dialogs.client1level_traveling()
		elseif has_alife_info("notebook_client2task1") or has_alife_info("notebook_client2task2") or has_alife_info("notebook_client2task3") then
		addon_dialogs.client2level_traveling()
		elseif has_alife_info("notebook_client3task1") or has_alife_info("notebook_client3task2") or has_alife_info("notebook_client3task3") then
		addon_dialogs.client3level_traveling()
		end
	notebook_clients()
end


function notebook_client_1_done:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------



-- Клиент 2-------------------------------------------------------------------------------------------------------------------------------------------------------------
function notebook_client2task1()
	local spwn = notebook_client_2_task_1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_2_task_1" (CUIScriptWnd)

function notebook_client_2_task_1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_2_task_1:__finalize() end

function notebook_client_2_task_1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_2_task_1.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client1", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_client_2_task_1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_2_task_1:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_info_portion ("notebook_client2task1")
	addon_dialogs.client2_task1_give()
end

function notebook_client_2_task_1:btn2()
	self:on_quit()
	soundtrack.click()
	notebook7()
end

function notebook_client_2_task_1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_client2task2()
	local spwn = notebook_client_2_task_2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_2_task_2" (CUIScriptWnd)

function notebook_client_2_task_2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_2_task_2:__finalize() end

function notebook_client_2_task_2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_2_task_2.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client1", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_client_2_task_2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_2_task_2:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_info_portion ("notebook_client2task2")
	addon_dialogs.client2_task2_give()
end

function notebook_client_2_task_2:btn2()
	self:on_quit()
	soundtrack.click()
	notebook7()
end

function notebook_client_2_task_2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_client2task3()
	local spwn = notebook_client_2_task_3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_2_task_3" (CUIScriptWnd)

function notebook_client_2_task_3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_2_task_3:__finalize() end

function notebook_client_2_task_3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_2_task_3.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client1", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_client_2_task_3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_2_task_3:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_info_portion ("notebook_client2task3")
	addon_dialogs.client2_task3_give()
end

function notebook_client_2_task_3:btn2()
	self:on_quit()
	soundtrack.click()
	notebook7()
end

function notebook_client_2_task_3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_client2waiting()
	local spwn = notebook_client_2_waiting(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_2_waiting" (CUIScriptWnd)

function notebook_client_2_waiting:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_2_waiting:__finalize() end

function notebook_client_2_waiting:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_2_waiting.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client1", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if ( has_alife_info("client2_arts1_have") or has_alife_info("client2_arts2_have") or has_alife_info("client2_arts3_have") ) then
	self.btn_1:Enable(true)
	end
end

function notebook_client_2_waiting:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_2_waiting:btn1()
	self:on_quit()
	soundtrack.click()
	notebook_client2done()
end


function notebook_client_2_waiting:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_client2done()
	local spwn = notebook_client_2_done(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_2_done" (CUIScriptWnd)

function notebook_client_2_done:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_2_done:__finalize() end

function notebook_client_2_done:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_2_done.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client1", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_client_2_done:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_2_done:btn1()
	self:on_quit()
	soundtrack.click()
	addon_dialogs.client2level_traveling()
	notebook_clients()
end


function notebook_client_2_done:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- Клиент 3 (Доктор Пильман) -------------------------------------------------------------------------------------------------------------------------------------------------------------
function notebook_client3()
	local spwn = notebook_client_3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_3" (CUIScriptWnd)

function notebook_client_3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_3:__finalize() end

function notebook_client_3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_3.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client3", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)
	xml:InitStatic("description4", self)
	xml:InitStatic("description5", self)
	xml:InitStatic("description6", self)
	xml:InitStatic("description7", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if arts_exchange.have_some_arts() then
		self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function notebook_client_3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_3:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_info_portion ("notebook_client3travel")
	addon_dialogs.client3level_traveling()
	news_manager.send_tip(db.actor, "client3_start_travel_tip", nil, "pillman", 8000, nil)
end

function notebook_client_3:btn2()
	self:on_quit()
	soundtrack.click()
	notebook7()
end

function notebook_client_3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_client3waiting()
	local spwn = notebook_client_3waiting(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_client_3waiting" (CUIScriptWnd)

function notebook_client_3waiting:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_client_3waiting:__finalize() end

function notebook_client_3waiting:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\clients\\notebook_client_3waiting.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("icon_client3", self)

	-- строки описания
	xml:InitStatic("description1", self)
	xml:InitStatic("description2", self)
	xml:InitStatic("description3", self)


	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_client_3waiting:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_client_3waiting:btn1()
	self:on_quit()
	soundtrack.click()
	notebook7()
end


function notebook_client_3waiting:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------

-- Выживание ----------------------------------------------------------------------------------------------------------------
function notebooksurvival1()
	local spwn = notebook_survival1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_survival1" (CUIScriptWnd)

function notebook_survival1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_survival1:__finalize() end

function notebook_survival1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\survival\\notebook_survival1.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("survival_icon_1", self)

	-- строки описания
	xml:InitStatic("description1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_survival1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_survival1:btn1()
	self:on_quit()
	soundtrack.click()
	notebooksurvival2()
end

function notebook_survival1:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function notebook_survival1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------
function notebooksurvival2()
	local spwn = notebook_survival2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_survival2" (CUIScriptWnd)

function notebook_survival2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_survival2:__finalize() end

function notebook_survival2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\survival\\notebook_survival2.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("survival_icon_1", self)

	-- строки описания
	xml:InitStatic("description1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_survival2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_survival2:btn1()
	self:on_quit()
	soundtrack.click()
	notebooksurvival3()
end

function notebook_survival2:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function notebook_survival2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------
function notebooksurvival3()
	local spwn = notebook_survival3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_survival3" (CUIScriptWnd)

function notebook_survival3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_survival3:__finalize() end

function notebook_survival3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\survival\\notebook_survival3.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("survival_icon_1", self)

	-- строки описания
	xml:InitStatic("description1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_survival3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_survival3:btn1()
	self:on_quit()
	soundtrack.click()
	notebooksurvival4()
end

function notebook_survival3:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end


function notebook_survival3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------
function notebooksurvival4()
	local spwn = notebook_survival4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_survival4" (CUIScriptWnd)

function notebook_survival4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_survival4:__finalize() end

function notebook_survival4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\survival\\notebook_survival4.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("survival_icon_1", self)

	-- строки описания
	xml:InitStatic("description1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_survival4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_survival4:btn1()
	self:on_quit()
	soundtrack.click()
	notebooksurvival5()
end

function notebook_survival4:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function notebook_survival4:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------
function notebooksurvival5()
	local spwn = notebook_survival5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_survival5" (CUIScriptWnd)

function notebook_survival5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_survival5:__finalize() end

function notebook_survival5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\survival\\notebook_survival5.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("survival_icon_1", self)

	-- строки описания
	xml:InitStatic("description1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_survival5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_survival5:btn1()
	self:on_quit()
	soundtrack.click()
	notebooksurvival6()
end

function notebook_survival5:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function notebook_survival5:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------
function notebooksurvival6()
	local spwn = notebook_survival6(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_survival6" (CUIScriptWnd)

function notebook_survival6:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_survival6:__finalize() end

function notebook_survival6:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\survival\\notebook_survival6.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("survival_icon_1", self)

	-- строки описания
	xml:InitStatic("description1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function notebook_survival6:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_survival6:btn1()
	self:on_quit()
	soundtrack.click()
	notebooksurvival1()
end

function notebook_survival6:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function notebook_survival6:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-----------------------------------------------------------------------------------------------------------------------------------------------

function notebook3_1()
	local spwn = notebook_3_1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_3_1" (CUIScriptWnd)

function notebook_3_1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_3_1:__finalize() end

function notebook_3_1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\notebook_3_1.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- рабочий стол
	-- xml:InitStatic("screen", self)

	-- логотип системы
	xml:InitStatic("system_logo", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)
	self.btn_11 = xml:Init3tButton("btn_11", self)
	self:Register(self.btn_11, "btn_11")
	self.btn_11:Enable(false)
	self.btn_12 = xml:Init3tButton("btn_12", self)
	self:Register(self.btn_12, "btn_12")
	self.btn_12:Enable(false)
	self.btn_13 = xml:Init3tButton("btn_13", self)
	self:Register(self.btn_13, "btn_13")
	self.btn_13:Enable(false)
	self.btn_14 = xml:Init3tButton("btn_14", self)
	self:Register(self.btn_14, "btn_14")
	self.btn_14:Enable(false)
	self.btn_15 = xml:Init3tButton("btn_15", self)
	self:Register(self.btn_15, "btn_15")
	self.btn_15:Enable(false)
	self.btn_16 = xml:Init3tButton("btn_16", self)
	self:Register(self.btn_16, "btn_16")
	self.btn_16:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
	self.btn_7:Enable(true)
	self.btn_8:Enable(true)
	self.btn_9:Enable(true)
	self.btn_10:Enable(true)
	self.btn_11:Enable(true)
	self.btn_12:Enable(true)
	self.btn_13:Enable(true)
	self.btn_14:Enable(true)
	self.btn_15:Enable(true)
	self.btn_16:Enable(true)
end

function notebook_3_1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_11", ui_events.BUTTON_CLICKED,  self.btn11, self)
	self:AddCallback("btn_12", ui_events.BUTTON_CLICKED,  self.btn12, self)
	self:AddCallback("btn_13", ui_events.BUTTON_CLICKED,  self.btn13, self)
	self:AddCallback("btn_14", ui_events.BUTTON_CLICKED,  self.btn14, self)
	self:AddCallback("btn_15", ui_events.BUTTON_CLICKED,  self.btn15, self)
	self:AddCallback("btn_16", ui_events.BUTTON_CLICKED,  self.btn16, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_3_1:btn1()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_drojka()
end

function notebook_3_1:btn2()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_lift()
end

function notebook_3_1:btn3()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_polynstar()
end

function notebook_3_1:btn4()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_mincer()
end

function notebook_3_1:btn5()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_dik_drifter()
end

function notebook_3_1:btn6()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_ameba()
end

function notebook_3_1:btn7()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_liana()
end

function notebook_3_1:btn8()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_duga()
end

function notebook_3_1:btn9()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_alkali()
end

function notebook_3_1:btn10()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_flies()
end

function notebook_3_1:btn11()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_sphereflash()
end

function notebook_3_1:btn12()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_ghost()
end

function notebook_3_1:btn13()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_brownie()
end

function notebook_3_1:btn14()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_vacuum()
end

function notebook_3_1:btn15()
	self:on_quit()
	soundtrack.click()
	notebook_anomaly_swarm()
end

function notebook_3_1:btn16()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function notebook_3_1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
------------------------------------------------------------------------------------------------------------------------------------------------------------------

function notebook_anomaly_drojka()
	local spwn = notebook_drojka(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_drojka" (CUIScriptWnd)

function notebook_drojka:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_drojka:__finalize() end

function notebook_drojka:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_drojka.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_drojka:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_drojka:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_drojka:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_lift()
	local spwn = notebook_lift(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_lift" (CUIScriptWnd)

function notebook_lift:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_lift:__finalize() end

function notebook_lift:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_lift.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_lift:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_lift:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_lift:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_polynstar()
	local spwn = notebook_polynstar(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_polynstar" (CUIScriptWnd)

function notebook_polynstar:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_polynstar:__finalize() end

function notebook_polynstar:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_polynstar.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_polynstar:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_polynstar:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_polynstar:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_mincer()
	local spwn = notebook_mincer(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_mincer" (CUIScriptWnd)

function notebook_mincer:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_mincer:__finalize() end

function notebook_mincer:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_mincer.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_mincer:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_mincer:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_mincer:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_dik_drifter()
	local spwn = notebook_dik_drifter(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_dik_drifter" (CUIScriptWnd)

function notebook_dik_drifter:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_dik_drifter:__finalize() end

function notebook_dik_drifter:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_dik_drifter.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_dik_drifter:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_dik_drifter:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_dik_drifter:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_ameba()
	local spwn = notebook_ameba(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_ameba" (CUIScriptWnd)

function notebook_ameba:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_ameba:__finalize() end

function notebook_ameba:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_ameba.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_ameba:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_ameba:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_ameba:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_liana()
	local spwn = notebook_liana(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_liana" (CUIScriptWnd)

function notebook_liana:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_liana:__finalize() end

function notebook_liana:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_liana.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_liana:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_liana:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_liana:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_duga()
	local spwn = notebook_duga(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_duga" (CUIScriptWnd)

function notebook_duga:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_duga:__finalize() end

function notebook_duga:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_duga.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_duga:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_duga:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_duga:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_alkali()
	local spwn = notebook_alkali(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_alkali" (CUIScriptWnd)

function notebook_alkali:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_alkali:__finalize() end

function notebook_alkali:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_alkali.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_alkali:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_alkali:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_alkali:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_flies()
	local spwn = notebook_flies(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_flies" (CUIScriptWnd)

function notebook_flies:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_flies:__finalize() end

function notebook_flies:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_flies.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_flies:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_flies:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_flies:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_sphereflash()
	local spwn = notebook_sphereflash(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_sphereflash" (CUIScriptWnd)

function notebook_sphereflash:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_sphereflash:__finalize() end

function notebook_sphereflash:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_sphereflash.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_sphereflash:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_sphereflash:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_sphereflash:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_ghost()
	local spwn = notebook_ghost(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_ghost" (CUIScriptWnd)

function notebook_ghost:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_ghost:__finalize() end

function notebook_ghost:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_ghost.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_ghost:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_ghost:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_ghost:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_brownie()
	local spwn = notebook_brownie(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_brownie" (CUIScriptWnd)

function notebook_brownie:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_brownie:__finalize() end

function notebook_brownie:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_brownie.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	-- xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_brownie:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_brownie:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_brownie:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_vacuum()
	local spwn = notebook_vacuum(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_vacuum" (CUIScriptWnd)

function notebook_vacuum:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_vacuum:__finalize() end

function notebook_vacuum:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_vacuum.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_vacuum:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_vacuum:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_vacuum:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_anomaly_swarm()
	local spwn = notebook_swarm(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_swarm" (CUIScriptWnd)

function notebook_swarm:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_swarm:__finalize() end

function notebook_swarm:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\anomaly\\notebook_swarm.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- изображение
	xml:InitStatic("anomaly_icon", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_swarm:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_swarm:btn1()
	self:on_quit()
	soundtrack.click()
	notebook3_1()
end

function notebook_swarm:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------



-- Нычки в ноуте ------------------------------------------------------------------------------------------------------------------

function notebook_garb_treasure1()
	local spwn = garb_treasure1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "garb_treasure1" (CUIScriptWnd)

function garb_treasure1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function garb_treasure1:__finalize() end

function garb_treasure1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\garb_treasure1.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 50000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function garb_treasure1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function garb_treasure1:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-50000)
	db.actor:give_info_portion ("garb_notebook_treasure1")
	addon_dialogs.spawn_notebook_garb_treasure1()
end

function garb_treasure1:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function garb_treasure1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_garb_treasure2()
	local spwn = garb_treasure2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "garb_treasure2" (CUIScriptWnd)

function garb_treasure2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function garb_treasure2:__finalize() end

function garb_treasure2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\garb_treasure2.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 60000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function garb_treasure2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function garb_treasure2:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-60000)
	addon_dialogs.spawn_notebook_garb_treasure2()
	db.actor:give_info_portion ("garb_notebook_treasure2")
end

function garb_treasure2:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function garb_treasure2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_garb_treasure3()
	local spwn = garb_treasure3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "garb_treasure3" (CUIScriptWnd)

function garb_treasure3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function garb_treasure3:__finalize() end

function garb_treasure3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\garb_treasure3.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 70000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function garb_treasure3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function garb_treasure3:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-70000)
	addon_dialogs.spawn_notebook_garb_treasure3()
	db.actor:give_info_portion ("garb_notebook_treasure3")
end

function garb_treasure3:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function garb_treasure3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_agr_treasure1()
	local spwn = agr_treasure1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "agr_treasure1" (CUIScriptWnd)

function agr_treasure1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function agr_treasure1:__finalize() end

function agr_treasure1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\agr_treasure1.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 40000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function agr_treasure1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function agr_treasure1:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-40000)
	db.actor:give_info_portion ("agr_notebook_treasure1")
	addon_dialogs.spawn_notebook_agr_treasure1()
end

function agr_treasure1:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function agr_treasure1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_agr_treasure2()
	local spwn = agr_treasure2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "agr_treasure2" (CUIScriptWnd)

function agr_treasure2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function agr_treasure2:__finalize() end

function agr_treasure2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\agr_treasure2.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 45000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function agr_treasure2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function agr_treasure2:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-45000)
	db.actor:give_info_portion ("agr_notebook_treasure2")
	addon_dialogs.spawn_notebook_agr_treasure2()
end

function agr_treasure2:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function agr_treasure2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_agr_treasure3()
	local spwn = agr_treasure3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "agr_treasure3" (CUIScriptWnd)

function agr_treasure3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function agr_treasure3:__finalize() end

function agr_treasure3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\agr_treasure3.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 52000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function agr_treasure3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function agr_treasure3:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-52000)
	db.actor:give_info_portion ("agr_notebook_treasure3")
	addon_dialogs.spawn_notebook_agr_treasure3()
end

function agr_treasure3:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function agr_treasure3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------


function notebook_dar_treasure1()
	local spwn = dar_treasure1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "dar_treasure1" (CUIScriptWnd)

function dar_treasure1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function dar_treasure1:__finalize() end

function dar_treasure1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\dar_treasure1.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 35000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function dar_treasure1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function dar_treasure1:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-35000)
	db.actor:give_info_portion ("dar_notebook_treasure1")
	addon_dialogs.spawn_notebook_dar_treasure1()
end

function dar_treasure1:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function dar_treasure1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_dar_treasure2()
	local spwn = dar_treasure2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "dar_treasure2" (CUIScriptWnd)

function dar_treasure2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function dar_treasure2:__finalize() end

function dar_treasure2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\dar_treasure2.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 43000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function dar_treasure2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function dar_treasure2:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-43000)
	db.actor:give_info_portion ("dar_notebook_treasure2")
	addon_dialogs.spawn_notebook_dar_treasure2()
end

function dar_treasure2:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function dar_treasure2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_dar_treasure3()
	local spwn = dar_treasure3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "dar_treasure3" (CUIScriptWnd)

function dar_treasure3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function dar_treasure3:__finalize() end

function dar_treasure3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\dar_treasure3.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 55000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function dar_treasure3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function dar_treasure3:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-55000)
	db.actor:give_info_portion ("dar_notebook_treasure3")
	addon_dialogs.spawn_notebook_dar_treasure3()
end

function dar_treasure3:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function dar_treasure3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_mil_treasure1()
	local spwn = mil_treasure1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mil_treasure1" (CUIScriptWnd)

function mil_treasure1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mil_treasure1:__finalize() end

function mil_treasure1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\mil_treasure1.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 65000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function mil_treasure1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mil_treasure1:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-65000)
	db.actor:give_info_portion ("mil_treasure1")
	addon_dialogs.spawn_notebook_mil_treasure1()
end

function mil_treasure1:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function mil_treasure1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------

function notebook_mil_treasure2()
	local spwn = mil_treasure1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mil_treasure2" (CUIScriptWnd)

function mil_treasure2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mil_treasure2:__finalize() end

function mil_treasure2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\treasures\\mil_treasure2.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("name", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	if db.actor:money() >= 45000 then
	self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function mil_treasure2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mil_treasure2:btn1()
	self:on_quit()
	soundtrack.click()
	db.actor:give_money(-45000)
	db.actor:give_info_portion ("mil_treasure2")
	addon_dialogs.spawn_notebook_mil_treasure2()
end

function mil_treasure2:btn2()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function mil_treasure2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------


function notebook_nodata()
	local spwn = notebook_no_data(get_hud())
	level.start_stop_menu(spwn,true)
end

class "notebook_no_data" (CUIScriptWnd)

function notebook_no_data:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function notebook_no_data:__finalize() end

function notebook_no_data:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("notebook\\notebook_no_data.xml")

	-- корпус
	xml:InitStatic("corpus", self)

	-- название
	xml:InitStatic("system_logo", self)

	-- строки описания
	xml:InitStatic("description", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопок
	self.btn_1:Enable(true)
end

function notebook_no_data:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function notebook_no_data:btn1()
	self:on_quit()
	soundtrack.click()
	garb_vagon_hunters_notebook_use()
end

function notebook_no_data:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	soundtrack.click()
end
-------------------------------------------------------------------------------------------






-- Интерфейс сборки автомобиля ------------------------------------------------------------------------------------------------------------------------------------------

function car_intrface_start()
	local spwn = car_intrface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "car_intrface" (CUIScriptWnd)

function car_intrface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function car_intrface:__finalize() end

function car_intrface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("car_intrface.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- заголовок
	xml:InitStatic("name", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	-- кнопка 4
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	-- кнопка 5
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	-- кнопка 6
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	-- кнопка 7
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)



	-- определяем доступность кнопок
	if db.actor:object("akumulator") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and db.actor:dont_has_info("esc_niva_empty_akum") then
		self.btn_1:Enable(true)
	elseif db.actor:object("akumulator") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and has_alife_info("esc_niva_empty_akum") then
		self.btn_1:Enable(false)

	elseif db.actor:object("akumulator") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and db.actor:dont_has_info("garb_zaz_empty_akum") then
		self.btn_1:Enable(true)
	elseif db.actor:object("akumulator") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and has_alife_info("garb_zaz_empty_akum") then
		self.btn_1:Enable(false)

	elseif db.actor:object("akumulator") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and db.actor:dont_has_info("agr_uaz_empty_akum") then
		self.btn_1:Enable(true)
	elseif db.actor:object("akumulator") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and has_alife_info("agr_uaz_empty_akum") then
		self.btn_1:Enable(false)

	elseif db.actor:object("akumulator") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and db.actor:dont_has_info("dar_zil_empty_akum") then
		self.btn_1:Enable(true)
	elseif db.actor:object("akumulator") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and has_alife_info("dar_zil_empty_akum") then
		self.btn_1:Enable(false)
		
	elseif db.actor:object("akumulator") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and db.actor:dont_has_info("predb_niva_empty_akum") then
		self.btn_1:Enable(true)
	elseif db.actor:object("akumulator") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and has_alife_info("predb_niva_empty_akum") then
		self.btn_1:Enable(false)
	
	end



	if db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and db.actor:dont_has_info("esc_niva_empty_wheel1") then
		self.btn_2:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and has_alife_info("esc_niva_empty_wheel1") then
		self.btn_2:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and db.actor:dont_has_info("garb_zaz_empty_wheel1") then
		self.btn_2:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and has_alife_info("garb_zaz_empty_wheel1") then
		self.btn_2:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and db.actor:dont_has_info("agr_uaz_empty_wheel1") then
		self.btn_2:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and has_alife_info("agr_uaz_empty_wheel1") then
		self.btn_2:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and db.actor:dont_has_info("dar_zil_empty_wheel1") then
		self.btn_2:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and has_alife_info("dar_zil_empty_wheel1") then
		self.btn_2:Enable(false)
		
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and db.actor:dont_has_info("predb_niva_empty_wheel1") then
		self.btn_2:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and has_alife_info("predb_niva_empty_wheel1") then
		self.btn_2:Enable(false)
		
	end



	if db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and db.actor:dont_has_info("esc_niva_empty_wheel2") then
		self.btn_3:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and has_alife_info("esc_niva_empty_wheel2") then
		self.btn_3:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and db.actor:dont_has_info("garb_zaz_empty_wheel2") then
		self.btn_3:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and has_alife_info("garb_zaz_empty_wheel2") then
		self.btn_3:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and db.actor:dont_has_info("agr_uaz_empty_wheel2") then
		self.btn_3:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and has_alife_info("agr_uaz_empty_wheel2") then
		self.btn_3:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and db.actor:dont_has_info("dar_zil_empty_wheel2") then
		self.btn_3:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and has_alife_info("dar_zil_empty_wheel2") then
		self.btn_3:Enable(false)
		
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and db.actor:dont_has_info("predb_niva_empty_wheel2") then
		self.btn_3:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and has_alife_info("predb_niva_empty_wheel2") then
		self.btn_3:Enable(false)
		
	end



	if db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and db.actor:dont_has_info("esc_niva_empty_wheel3") then
		self.btn_4:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and has_alife_info("esc_niva_empty_wheel3") then
		self.btn_4:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and db.actor:dont_has_info("garb_zaz_empty_wheel3") then
		self.btn_4:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and has_alife_info("garb_zaz_empty_wheel3") then
		self.btn_4:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and db.actor:dont_has_info("agr_uaz_empty_wheel3") then
		self.btn_4:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and has_alife_info("agr_uaz_empty_wheel3") then
		self.btn_4:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and db.actor:dont_has_info("dar_zil_empty_wheel3") then
		self.btn_4:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and has_alife_info("dar_zil_empty_wheel3") then
		self.btn_4:Enable(false)
		
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and db.actor:dont_has_info("predb_niva_empty_wheel3") then
		self.btn_4:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and has_alife_info("predb_niva_empty_wheel3") then
		self.btn_4:Enable(false)
		
	end



	if db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and db.actor:dont_has_info("esc_niva_empty_wheel4") then
		self.btn_5:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and has_alife_info("esc_niva_empty_wheel4") then
		self.btn_5:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and db.actor:dont_has_info("garb_zaz_empty_wheel4") then
		self.btn_5:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and has_alife_info("garb_zaz_empty_wheel4") then
		self.btn_5:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and db.actor:dont_has_info("agr_uaz_empty_wheel4") then
		self.btn_5:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and has_alife_info("agr_uaz_empty_wheel4") then
		self.btn_5:Enable(false)

	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and db.actor:dont_has_info("dar_zil_empty_wheel4") then
		self.btn_5:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and has_alife_info("dar_zil_empty_wheel4") then
		self.btn_5:Enable(false)
		
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and db.actor:dont_has_info("predb_niva_empty_wheel4") then
		self.btn_5:Enable(true)
	elseif db.actor:object("wheel") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and has_alife_info("predb_niva_empty_wheel4") then
		self.btn_5:Enable(false)
		
	end



	if db.actor:object("bearing") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and db.actor:dont_has_info("esc_niva_empty_bearing") then
		self.btn_6:Enable(true)
	elseif db.actor:object("bearing") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and has_alife_info("esc_niva_empty_bearing") then
		self.btn_6:Enable(false)

	elseif db.actor:object("bearing") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and db.actor:dont_has_info("garb_zaz_empty_bearing") then
		self.btn_6:Enable(true)
	elseif db.actor:object("bearing") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and has_alife_info("garb_zaz_empty_bearing") then
		self.btn_6:Enable(false)

	elseif db.actor:object("bearing") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and db.actor:dont_has_info("agr_uaz_empty_bearing") then
		self.btn_6:Enable(true)
	elseif db.actor:object("bearing") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and has_alife_info("agr_uaz_empty_bearing") then
		self.btn_6:Enable(false)

	elseif db.actor:object("bearing") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and db.actor:dont_has_info("dar_zil_empty_bearing") then
		self.btn_6:Enable(true)
	elseif db.actor:object("bearing") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and has_alife_info("dar_zil_empty_bearing") then
		self.btn_6:Enable(false)
		
	elseif db.actor:object("bearing") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and db.actor:dont_has_info("predb_niva_empty_bearing") then
		self.btn_6:Enable(true)
	elseif db.actor:object("bearing") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and has_alife_info("predb_niva_empty_bearing") then
		self.btn_6:Enable(false)
		
	end



	if db.actor:object("avtomobile_tank") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and db.actor:dont_has_info("esc_niva_empty_tank") then
		self.btn_7:Enable(true)
	elseif db.actor:object("avtomobile_tank") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) 
	and has_alife_info("esc_niva_empty_tank") then
		self.btn_7:Enable(false)

	elseif db.actor:object("avtomobile_tank") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and db.actor:dont_has_info("garb_zaz_empty_tank") then
		self.btn_7:Enable(true)
	elseif db.actor:object("avtomobile_tank") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) 
	and has_alife_info("garb_zaz_empty_tank") then
		self.btn_7:Enable(false)

	elseif db.actor:object("avtomobile_tank") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and db.actor:dont_has_info("agr_uaz_empty_tank") then
		self.btn_7:Enable(true)
	elseif db.actor:object("avtomobile_tank") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) 
	and has_alife_info("agr_uaz_empty_tank") then
		self.btn_7:Enable(false)

	elseif db.actor:object("avtomobile_tank") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and db.actor:dont_has_info("dar_zil_empty_tank") then
		self.btn_7:Enable(true)
	elseif db.actor:object("avtomobile_tank") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) 
	and has_alife_info("dar_zil_empty_tank") then
		self.btn_7:Enable(false)
		
	elseif db.actor:object("avtomobile_tank") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and db.actor:dont_has_info("predb_niva_empty_tank") then
		self.btn_7:Enable(true)
	elseif db.actor:object("avtomobile_tank") ~= nil and xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) 
	and has_alife_info("predb_niva_empty_tank") then
		self.btn_7:Enable(false)
		
	end

end

function car_intrface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
end

function car_intrface:btn1()
	self:on_quit()
	amk.remove_item(db.actor:object("akumulator"))
	soundtrack.reparing()
		if xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) then
			db.actor:give_info_portion ("esc_niva_empty_akum")
		elseif xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) then
			db.actor:give_info_portion ("garb_zaz_empty_akum")
		elseif xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) then
			db.actor:give_info_portion ("agr_uaz_empty_akum")
		elseif xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) then
			db.actor:give_info_portion ("dar_zil_empty_akum")
		elseif xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) then
			db.actor:give_info_portion ("predb_niva_empty_akum")
		end
end

function car_intrface:btn2()
	self:on_quit()
	amk.remove_item(db.actor:object("wheel"))
	soundtrack.reparing()
		if xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) then
			db.actor:give_info_portion ("esc_niva_empty_wheel1")
		elseif xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) then
			db.actor:give_info_portion ("garb_zaz_empty_wheel1")
		elseif xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) then
			db.actor:give_info_portion ("agr_uaz_empty_wheel1")
		elseif xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) then
			db.actor:give_info_portion ("dar_zil_empty_wheel1")
		elseif xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) then
			db.actor:give_info_portion ("predb_niva_empty_wheel1")
		end
end

function car_intrface:btn3()
	self:on_quit()
	amk.remove_item(db.actor:object("wheel"))
	soundtrack.reparing()
		if xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) then
			db.actor:give_info_portion ("esc_niva_empty_wheel2")
		elseif xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) then
			db.actor:give_info_portion ("garb_zaz_empty_wheel2")
		elseif xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) then
			db.actor:give_info_portion ("agr_uaz_empty_wheel2")
		elseif xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) then
			db.actor:give_info_portion ("dar_zil_empty_wheel2")
		elseif xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) then
			db.actor:give_info_portion ("predb_niva_empty_wheel2")
		end
end

function car_intrface:btn4()
	self:on_quit()
	amk.remove_item(db.actor:object("wheel"))
	soundtrack.reparing()
		if xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) then
			db.actor:give_info_portion ("esc_niva_empty_wheel3")
		elseif xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) then
			db.actor:give_info_portion ("garb_zaz_empty_wheel3")
		elseif xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) then
			db.actor:give_info_portion ("agr_uaz_empty_wheel3")
		elseif xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) then
			db.actor:give_info_portion ("dar_zil_empty_wheel3")
		elseif xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) then
			db.actor:give_info_portion ("predb_niva_empty_wheel3")
		end
end

function car_intrface:btn5()
	self:on_quit()
	amk.remove_item(db.actor:object("wheel"))
	soundtrack.reparing()
		if xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) then
			db.actor:give_info_portion ("esc_niva_empty_wheel4")
		elseif xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) then
			db.actor:give_info_portion ("garb_zaz_empty_wheel4")
		elseif xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) then
			db.actor:give_info_portion ("agr_uaz_empty_wheel4")
		elseif xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) then
			db.actor:give_info_portion ("dar_zil_empty_wheel4")
		elseif xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) then
			db.actor:give_info_portion ("predb_niva_empty_wheel4")
		end
end

function car_intrface:btn6()
	self:on_quit()
	amk.remove_item(db.actor:object("bearing"))
	soundtrack.reparing()
		if xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) then
			db.actor:give_info_portion ("esc_niva_empty_bearing")
		elseif xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) then
			db.actor:give_info_portion ("garb_zaz_empty_bearing")
		elseif xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) then
			db.actor:give_info_portion ("agr_uaz_empty_bearing")
		elseif xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) then
			db.actor:give_info_portion ("dar_zil_empty_bearing")
		elseif xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) then
			db.actor:give_info_portion ("predb_niva_empty_bearing")
		end
end

function car_intrface:btn7()
	self:on_quit()
	amk.remove_item(db.actor:object("avtomobile_tank"))
	soundtrack.reparing()
		if xr_conditions.actor_in_zone(nil,nil,{"esc_niva_empty_zone"}) then
			db.actor:give_info_portion ("esc_niva_empty_tank")
		elseif xr_conditions.actor_in_zone(nil,nil,{"gar_zapor_empty_zone"}) then
			db.actor:give_info_portion ("garb_zaz_empty_tank")
		elseif xr_conditions.actor_in_zone(nil,nil,{"agr_uaz_empty_zone"}) then
			db.actor:give_info_portion ("agr_uaz_empty_tank")
		elseif xr_conditions.actor_in_zone(nil,nil,{"dar_zil_empty_zone"}) then
			db.actor:give_info_portion ("dar_zil_empty_tank")
		elseif xr_conditions.actor_in_zone(nil,nil,{"predb_niva_empty_zone"}) then
			db.actor:give_info_portion ("predb_niva_empty_tank")
		end
end

function car_intrface:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------------------------------------------------------------


-- Спички -------------------------------------------------------------------------------------------------------------------------

function matches_use()
	local spwn = matches_interface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "matches_interface" (CUIScriptWnd)

function matches_interface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function matches_interface:__finalize() end

function matches_interface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("matches_interface.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("text", self)

	-- кнопка
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	if db.actor:object("bowler") ~= nil then
		self.btn_1:Enable(true)
	end
	if db.actor:object("teapot") ~= nil then
	self.btn_2:Enable(true)
	end
end

function matches_interface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function matches_interface:btn1()
	self:quit()
	addon.bowler_use()
end

function matches_interface:btn2()
	self:quit()
	addon.teapot_use()
end

function matches_interface:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

-- Интерфейс котелка -----------------------------------------------------------------------------------------------------------------------------------------

function bowler_intrface_start()
	local spwn = bowler_intrface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "bowler_intrface" (CUIScriptWnd)

function bowler_intrface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function bowler_intrface:__finalize() end

function bowler_intrface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("bowler_intrface.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- заголовок
	xml:InitStatic("name", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	-- кнопка 4
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	-- кнопка 5
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	-- кнопка 6
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	-- кнопка 7
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	-- кнопка 8
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	-- кнопка 9
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	-- кнопка 10
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)
	-- кнопка 11
	self.btn_11 = xml:Init3tButton("btn_11", self)
	self:Register(self.btn_11, "btn_11")
	self.btn_11:Enable(false)
	-- кнопка 12
	self.btn_12 = xml:Init3tButton("btn_12", self)
	self:Register(self.btn_12, "btn_12")
	self.btn_12:Enable(false)

	-- определяем доступность кнопок
	if db.actor:object("mutant_boar_leg") ~= nil and db.actor:object("flyaga_full") ~= nil then
	self.btn_1:Enable(true)
	end
	if db.actor:object("mutant_flesh_eye") ~= nil and db.actor:object("flyaga_full") ~= nil then
	self.btn_2:Enable(true)
	end
	if db.actor:object("mutant_psevdodog_tail") ~= nil and db.actor:object("flyaga_full") ~= nil then
	self.btn_3:Enable(true)
	end
	if db.actor:object("mutant_krovosos_jaw") ~= nil and db.actor:object("flyaga_full") ~= nil then
	self.btn_4:Enable(true)
	end
	if db.actor:object("mutant_face_tushkano") ~= nil and db.actor:object("flyaga_full") ~= nil then
	self.btn_5:Enable(true)
	end
	if db.actor:object("mutant_psevdogigant_hand") ~= nil and db.actor:object("flyaga_full") ~= nil then
	self.btn_6:Enable(true)
	end
	if db.actor:object("conserva") ~= nil and db.actor:object("flyaga_full") ~= nil then
	self.btn_7:Enable(true)
	end
	if db.actor:object("salo") ~= nil and db.actor:object("kartoshka") ~= nil  and db.actor:object("flyaga_full") ~= nil then
	self.btn_8:Enable(true)
	end
	if has_alife_info("predb_recipes") and (addon_utils.get_object_number(db.actor, "mutant_dog_tail") >= 5) and (addon_utils.get_object_number(db.actor, "kartoshka") >= 4)  and db.actor:object("vodka") ~= nil then
	self.btn_9:Enable(true)
	end
	if has_alife_info("predb_recipes") and (addon_utils.get_object_number(db.actor, "mutant_psevdodog_tail") >= 3) and (addon_utils.get_object_number(db.actor, "pivo") >= 2)  and db.actor:object("gidroperit") ~= nil then
	self.btn_10:Enable(true)
	end
	if has_alife_info("predb_recipes") and (addon_utils.get_object_number(db.actor, "mutant_tail_cat") >= 10) and db.actor:object("energy_drink") ~= nil  and db.actor:object("bipsizon") ~= nil then
	self.btn_11:Enable(true)
	end
	if has_alife_info("	") and (addon_utils.get_object_number(db.actor, "vodka") >= 10) and (addon_utils.get_object_number(db.actor, "mutant_zombie_hand") >= 5) and db.actor:object("antirad") ~= nil then
	self.btn_11:Enable(true)
	end
end

function bowler_intrface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_11", ui_events.BUTTON_CLICKED,  self.btn11, self)
	self:AddCallback("btn_12", ui_events.BUTTON_CLICKED,  self.btn11, self)
end

function bowler_intrface:btn1()
	amk.remove_item(db.actor:object("bowler"))
	amk.remove_item(db.actor:object("flyaga_full"))
	amk.remove_item(db.actor:object("mutant_boar_leg"))
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food1")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn2()
	amk.remove_item(db.actor:object("bowler"))
	amk.remove_item(db.actor:object("flyaga_full"))
	amk.remove_item(db.actor:object("mutant_flesh_eye"))
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food2")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn3()
	amk.remove_item(db.actor:object("bowler"))
	amk.remove_item(db.actor:object("flyaga_full"))
	amk.remove_item(db.actor:object("mutant_psevdodog_tail"))
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food3")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn4()
	amk.remove_item(db.actor:object("bowler"))
	amk.remove_item(db.actor:object("flyaga_full"))
	amk.remove_item(db.actor:object("mutant_krovosos_jaw"))
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food4")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn5()
	amk.remove_item(db.actor:object("bowler"))
	amk.remove_item(db.actor:object("flyaga_full"))
	amk.remove_item(db.actor:object("mutant_face_tushkano"))
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food5")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn6()
	amk.remove_item(db.actor:object("bowler"))
	amk.remove_item(db.actor:object("flyaga_full"))
	amk.remove_item(db.actor:object("mutant_psevdogigant_hand"))
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food6")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn7()
	amk.remove_item(db.actor:object("bowler"))
	amk.remove_item(db.actor:object("flyaga_full"))
	amk.remove_item(db.actor:object("conserva"))
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food7")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn8()
	amk.remove_item(db.actor:object("bowler"))
	amk.remove_item(db.actor:object("kartoshka"))
	amk.remove_item(db.actor:object("salo"))
	amk.remove_item(db.actor:object("flyaga_full"))
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food8")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn9()
	addon.remove_items("mutant_dog_tail", 5)
	addon.remove_items("kartoshka", 4)
	addon.remove_items("vodka", 1)
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food9")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn10()
	addon.remove_items("mutant_psevdodog_tail", 3)
	addon.remove_items("pivo", 2)
	addon.remove_items("gidroperit", 1)
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food10")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn11()
	addon.remove_items("mutant_tail_cat", 10)
	addon.remove_items("energy_drink", 1)
	addon.remove_items("bipsizon", 1)
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food11")
	level.disable_input()
	bowler_intrface_bowling()
end

function bowler_intrface:btn12()
	addon.remove_items("vodka", 10)
	addon.remove_items("mutant_zombie_hand", 5)
	addon.remove_items("antirad", 1)
	soundtrack.boiling_water()
	start_real_timer(7, "timer_actions.bowling_food12")
	level.disable_input()
	bowler_intrface_bowling()
end


function bowler_intrface:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
--------------------------------------------------------------------------------------------------------------

function bowler_intrface_bowling()
	local spwn = bowler_bowling(get_hud())
	level.start_stop_menu(spwn,true)
end

class "bowler_bowling" (CUIScriptWnd)

function bowler_bowling:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
end

function bowler_bowling:__finalize() end

function bowler_bowling:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("bowler_intrface.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- видео варки:
	xml:InitStatic("bowling", self)

end
-----------------------------------------------------------------------------------------------------------------------------------------------------

-- Интерфейс чайника -----------------------------------------------------------------------------------------------------------------------------------------

function use_teapot()
	local spwn = teapot_intrface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "teapot_intrface" (CUIScriptWnd)

function teapot_intrface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function teapot_intrface:__finalize() end

function teapot_intrface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("teapot_intrface.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- заголовок
	xml:InitStatic("name", self)
	xml:InitStatic("text", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)


	-- определяем доступность кнопок
	if db.actor:object("teapot_pack") ~= nil and db.actor:object("flyaga_full") ~= nil then
	self.btn_1:Enable(true)
	end
	if db.actor:object("flyaga_bad") ~= nil then
	self.btn_2:Enable(true)
	end

end

function teapot_intrface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function teapot_intrface:btn1() -- заварить чай
	self:on_quit()
	teapot_bowling()
	-- db.actor:give_info_portion ("bowling9")
	start_real_timer(7, "timer_actions.bowling_tea1")
	level.disable_input()
	soundtrack.boiling_water()
end

function teapot_intrface:btn2() -- вскипятить воду
	self:on_quit()
	teapot_bowling()
	-- db.actor:give_info_portion ("bowling10")
	start_real_timer(7, "timer_actions.bowling_tea2")
	level.disable_input()
	soundtrack.boiling_water()
end


function teapot_intrface:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
--------------------------------------------------------------------------------------------------------------

function teapot_bowling()
	local spwn = teapot_bowling_process(get_hud())
	level.start_stop_menu(spwn,true)
end

class "teapot_bowling_process" (CUIScriptWnd)

function teapot_bowling_process:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
end

function teapot_bowling_process:__finalize() end

function teapot_bowling_process:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("teapot_bowling_process.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- видео варки:
	xml:InitStatic("bowling", self)

end
-----------------------------------------------------------------------------------------------------------------------------------------------------

-- Сканнер ------------------------------------------------------------------------------------------------------------------------------------------

function afscanner_start()
	local spwn = afscanner_0(get_hud())
	level.start_stop_menu(spwn,true)
end

class "afscanner_0" (CUIScriptWnd)

function afscanner_0:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function afscanner_0:__finalize() end

function afscanner_0:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("afscanner\\afscanner_start.xml")

	-- панель
	xml:InitStatic("panel", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function afscanner_0:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function afscanner_0:btn1()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner1()
end

function afscanner_0:btn2()
	soundtrack.afscanner_click()
end

function afscanner_0:btn3()
	if ( xr_conditions.actor_in_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone_7"}) )  then

	elseif ( xr_conditions.actor_out_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone_7"}) )  then
		soundtrack.afscanner_click2()
		news_manager.send_tip(db.actor, "actor_out_strangzone", nil, "anomal", 5000, nil)
	end

end

function afscanner_0:on_quit2()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end

function afscanner_0:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	alife():create('afscanner', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	soundtrack.afscanner_off()
	db.actor:restore_weapon()
end

function afscanner_0:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end
-----------------------------------------------------------------------------------------------

function afscanner1()
	local spwn = afscanner_1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "afscanner_1" (CUIScriptWnd)

function afscanner_1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function afscanner_1:__finalize() end

function afscanner_1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("afscanner\\afscanner_1.xml")

	-- панель
	xml:InitStatic("panel", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function afscanner_1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function afscanner_1:btn1()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner2()
end

function afscanner_1:btn2()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner_start()
end

function afscanner_1:btn3()
	if xr_conditions.actor_in_zone(nil,nil,{"strange_zone5"}) then
		addon.afscanner_impulse5()
	elseif ( xr_conditions.actor_out_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone_7"}) )  then
		soundtrack.afscanner_click2()
		news_manager.send_tip(db.actor, "actor_out_strangzone", nil, "anomal", 5000, nil)
	end

end

function afscanner_1:on_quit2()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	-- db.actor:hide_weapon()
end

function afscanner_1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	alife():create('afscanner', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	soundtrack.afscanner_off()
	db.actor:restore_weapon()
end

function afscanner_1:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end
-----------------------------------------------------------------------------------------------

function afscanner2()
	local spwn = afscanner_2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "afscanner_2" (CUIScriptWnd)

function afscanner_2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function afscanner_2:__finalize() end

function afscanner_2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("afscanner\\afscanner_2.xml")

	-- панель
	xml:InitStatic("panel", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function afscanner_2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function afscanner_2:btn1()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner3()
end

function afscanner_2:btn2()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner1()
end

function afscanner_2:btn3()
	if xr_conditions.actor_in_zone(nil,nil,{"strange_zone2"}) then
		addon.afscanner_impulse2()
	elseif ( xr_conditions.actor_out_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone_7"}) )  then
		soundtrack.afscanner_click2()
		news_manager.send_tip(db.actor, "actor_out_strangzone", nil, "anomal", 5000, nil)
	end

end

function afscanner_2:on_quit2()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end

function afscanner_2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	alife():create('afscanner', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	soundtrack.afscanner_off()
	db.actor:restore_weapon()
end

function afscanner_2:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end
-----------------------------------------------------------------------------------------------


function afscanner3()
	local spwn = afscanner_3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "afscanner_3" (CUIScriptWnd)

function afscanner_3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function afscanner_3:__finalize() end

function afscanner_3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("afscanner\\afscanner_3.xml")

	-- панель
	xml:InitStatic("panel", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function afscanner_3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function afscanner_3:btn1()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner4()
end

function afscanner_3:btn2()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner2()
end

function afscanner_3:btn3()
	if xr_conditions.actor_in_zone(nil,nil,{"strange_zone1"}) then
		addon.afscanner_impulse1()
	elseif ( xr_conditions.actor_out_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone_7"}) )  then
		soundtrack.afscanner_click2()
		news_manager.send_tip(db.actor, "actor_out_strangzone", nil, "anomal", 5000, nil)
	end

end

function afscanner_3:on_quit2()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end

function afscanner_3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	alife():create('afscanner', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	soundtrack.afscanner_off()
	db.actor:restore_weapon()
end

function afscanner_3:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end
-----------------------------------------------------------------------------------------------


function afscanner4()
	local spwn = afscanner_4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "afscanner_4" (CUIScriptWnd)

function afscanner_4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function afscanner_4:__finalize() end

function afscanner_4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("afscanner\\afscanner_4.xml")

	-- панель
	xml:InitStatic("panel", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function afscanner_4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function afscanner_4:btn1()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner5()
end

function afscanner_4:btn2()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner3()
end

function afscanner_4:btn3()
	if xr_conditions.actor_in_zone(nil,nil,{"strange_zone_7"}) then
		addon.afscanner_impulse7()
	elseif ( xr_conditions.actor_out_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone_7"}) )  then
		soundtrack.afscanner_click2()
		news_manager.send_tip(db.actor, "actor_out_strangzone", nil, "anomal", 5000, nil)
	end

end

function afscanner_4:on_quit2()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end

function afscanner_4:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	alife():create('afscanner', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	soundtrack.afscanner_off()
	db.actor:restore_weapon()
end

function afscanner_4:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end
-----------------------------------------------------------------------------------------------


function afscanner5()
	local spwn = afscanner_5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "afscanner_5" (CUIScriptWnd)

function afscanner_5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function afscanner_5:__finalize() end

function afscanner_5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("afscanner\\afscanner_5.xml")

	-- панель
	xml:InitStatic("panel", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function afscanner_5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function afscanner_5:btn1()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner6()
end

function afscanner_5:btn2()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner4()
end

function afscanner_5:btn3()
	if xr_conditions.actor_in_zone(nil,nil,{"strange_zone3"}) then
		addon.afscanner_impulse3()
	elseif ( xr_conditions.actor_out_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone_7"}) )  then
		soundtrack.afscanner_click2()
		news_manager.send_tip(db.actor, "actor_out_strangzone", nil, "anomal", 5000, nil)
	end

end

function afscanner_5:on_quit2()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end

function afscanner_5:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	alife():create('afscanner', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	soundtrack.afscanner_off()
	db.actor:restore_weapon()
end

function afscanner_5:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end
-----------------------------------------------------------------------------------------------


function afscanner6()
	local spwn = afscanner_6(get_hud())
	level.start_stop_menu(spwn,true)
end

class "afscanner_6" (CUIScriptWnd)

function afscanner_6:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function afscanner_6:__finalize() end

function afscanner_6:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("afscanner\\afscanner_6.xml")

	-- панель
	xml:InitStatic("panel", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function afscanner_6:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function afscanner_6:btn1()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner7()
end

function afscanner_6:btn2()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner5()
end

function afscanner_6:btn3()
	if xr_conditions.actor_in_zone(nil,nil,{"strange_zone4"}) then
		addon.afscanner_impulse4()
	elseif ( xr_conditions.actor_out_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone_7"}) )  then
		soundtrack.afscanner_click2()
		news_manager.send_tip(db.actor, "actor_out_strangzone", nil, "anomal", 5000, nil)
	end

end

function afscanner_6:on_quit2()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end

function afscanner_6:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	alife():create('afscanner', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	soundtrack.afscanner_off()
	db.actor:restore_weapon()
end

function afscanner_6:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end
-----------------------------------------------------------------------------------------------


function afscanner7()
	local spwn = afscanner_7(get_hud())
	level.start_stop_menu(spwn,true)
end

class "afscanner_7" (CUIScriptWnd)

function afscanner_7:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function afscanner_7:__finalize() end

function afscanner_7:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("afscanner\\afscanner_7.xml")

	-- панель
	xml:InitStatic("panel", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function afscanner_7:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function afscanner_7:btn1()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner8()
end

function afscanner_7:btn2()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner6()
end

function afscanner_7:btn3()
	if xr_conditions.actor_in_zone(nil,nil,{"strange_zone6"}) then
		addon.afscanner_impulse6()
	elseif ( xr_conditions.actor_out_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone_7"}) )  then
		soundtrack.afscanner_click2()
		news_manager.send_tip(db.actor, "actor_out_strangzone", nil, "anomal", 5000, nil)
	end

end

function afscanner_7:on_quit2()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end

function afscanner_7:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	alife():create('afscanner', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	soundtrack.afscanner_off()
	db.actor:restore_weapon()
end

function afscanner_7:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end
-----------------------------------------------------------------------------------------------


function afscanner8()
	local spwn = afscanner_8(get_hud())
	level.start_stop_menu(spwn,true)
end

class "afscanner_8" (CUIScriptWnd)

function afscanner_8:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function afscanner_8:__finalize() end

function afscanner_8:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("afscanner\\afscanner_8.xml")

	-- панель
	xml:InitStatic("panel", self)

	-- кнопка 1
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- кнопка 2
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	-- кнопка 3
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")


	-- определяем доступность кнопок
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function afscanner_8:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function afscanner_8:btn1()
	soundtrack.afscanner_click()
end

function afscanner_8:btn2()
	self:on_quit2()
	soundtrack.afscanner_click()
	afscanner7()
end

function afscanner_8:btn3()
	if ( xr_conditions.actor_in_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_in_zone(nil,nil,{"strange_zone_7"}) )  then
		-- soundtrack.afscanner_click3()
		-- addon.afscanner_impulse()
	elseif ( xr_conditions.actor_out_zone(nil,nil,{"strange_zone1"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone2"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone3"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone4"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone5"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone6"}) or xr_conditions.actor_out_zone(nil,nil,{"strange_zone_7"}) )  then
		soundtrack.afscanner_click2()
		news_manager.send_tip(db.actor, "actor_out_strangzone", nil, "anomal", 5000, nil)
	end

end

function afscanner_8:on_quit2()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	-- db.actor:hide_weapon()
end

function afscanner_8:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
	alife():create('afscanner', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
	soundtrack.afscanner_off()
	db.actor:restore_weapon()
end

function afscanner_8:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
	end
	return true
end
-------------------------------------------------------------------------------------------------------------------------------------------------------------



-- Кресты могильные ------------------------------------------------------------------------------------------------------------------------------------------

function garb_grave_cross_use()
	local spwn = garb_grave_cross_intrface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "garb_grave_cross_intrface" (CUIScriptWnd)

function garb_grave_cross_intrface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function garb_grave_cross_intrface:__finalize() end

function garb_grave_cross_intrface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("graves\\garb_grave_cross.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- заголовок
	xml:InitStatic("name", self)

	-- Надписи:
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)
	xml:InitStatic("text4", self)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

end

function garb_grave_cross_intrface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function garb_grave_cross_intrface:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------------------------------------------------------------

function garb_grave_cross2_use()
	local spwn = garb_grave_cross2_intrface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "garb_grave_cross2_intrface" (CUIScriptWnd)

function garb_grave_cross2_intrface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function garb_grave_cross2_intrface:__finalize() end

function garb_grave_cross2_intrface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("graves\\garb_grave_cross2.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- заголовок
	xml:InitStatic("name", self)

	-- Надписи:
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)
	xml:InitStatic("text4", self)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

end

function garb_grave_cross2_intrface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function garb_grave_cross2_intrface:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------------------------------------------------------------
function agr_grave_cross_use()
	local spwn = agr_grave_cross_intrface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "agr_grave_cross_intrface" (CUIScriptWnd)

function agr_grave_cross_intrface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function agr_grave_cross_intrface:__finalize() end

function agr_grave_cross_intrface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("graves\\agr_grave_cross.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- заголовок
	xml:InitStatic("name", self)

	-- Надписи:
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)
	xml:InitStatic("text4", self)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

end

function agr_grave_cross_intrface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function agr_grave_cross_intrface:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------------------------------------------------------------




-- Переносная турель ----------------------------------------------------------------------------------------------------------

function use_turret_interface_installing()
	local spwn = turret_interface1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "turret_interface1" (CUIScriptWnd)

function turret_interface1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function turret_interface1:__finalize() end

function turret_interface1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("turret_interface.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("text_on", self)

	-- кнопка
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end


function turret_interface1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.quit, self)
end

function turret_interface1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end

----------------------------------------------------------------------------------

function use_turret_interface_uninstalling()
	local spwn = turret_interface2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "turret_interface2" (CUIScriptWnd)

function turret_interface2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function turret_interface2:__finalize() end

function turret_interface2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("turret_interface.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("text_off", self)

	-- кнопка
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function turret_interface2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.quit, self)
end

function turret_interface2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------



-- Ремнабор для оружия -------------------------------------------------------------------------------------------------------------------------

function weapon_remkit_use()
	local spwn = weapon_remkit_interface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "weapon_remkit_interface" (CUIScriptWnd)

function weapon_remkit_interface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function weapon_remkit_interface:__finalize() end

function weapon_remkit_interface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("weapon_remkit_interface.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("text", self)

	-- кнопка
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function weapon_remkit_interface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function weapon_remkit_interface:btn1()
	self:quit()
	addon.weapon_remkit_repare1slot()
	addon.actor_disable_inventory()
end

function weapon_remkit_interface:btn2()
	self:quit()
	addon.weapon_remkit_repare2slot()
	addon.actor_disable_inventory()
end

function weapon_remkit_interface:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


-- Патроны для самопала -------------------------------------------------------------------------------------------------------------------------

function samopal_ammo_preparing()
	local spwn = ammo_preparing(get_hud())
	level.start_stop_menu(spwn,true)
end

class "ammo_preparing" (CUIScriptWnd)

function ammo_preparing:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function ammo_preparing:__finalize() end

function ammo_preparing:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("ammo_preparing.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("text", self)

	-- кнопка
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function ammo_preparing:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function ammo_preparing:btn1()
	self:quit()
	addon.remove_items("bearing", 1)
	addon.remove_items("powder", 1)
	amk.spawn_ammo_in_inv("ammo_samopal", 16)
	--amk.spawn_ammo_in_inv("ammo_5.56x45_ap", 16)
end

function ammo_preparing:btn2()
	self:quit()
	addon.remove_items("bearing", 1)
	addon.remove_items("powder", 1)
	amk.spawn_ammo_in_inv("ammo_samopal_big", 8)
	--amk.spawn_ammo_in_inv("ammo_5.56x45_ap", 16)
end

function ammo_preparing:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


-- Карта Свалки -------------------------------------------------------------------------------------------------------------------------

function anomal_map_garbage_use()
	local spwn = anomal_map_garbage(get_hud())
	level.start_stop_menu(spwn,true)
end

class "anomal_map_garbage" (CUIScriptWnd)

function anomal_map_garbage:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
end

function anomal_map_garbage:__finalize() end

function anomal_map_garbage:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("maps\\anomal_map_garbage.xml")

	-- текстура
	xml:InitStatic("main_list", self)
end
-----------------------------------------------------------------------------------------------


-- Использование лопаты -------------------------------------------------------------------------------------------------------------------------

function shovel_visualisation()
	local spwn = shovel_use(get_hud())
	level.start_stop_menu(spwn,true)
end

class "shovel_use" (CUIScriptWnd)

function shovel_use:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
end

function shovel_use:__finalize() end

function shovel_use:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("shovel_use.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("work_process", self)
end
------------------------------------------------------------------------------------------------------------------------------------


-- Сумки с патронами -------------------------------------------------------------------------------------------------------------------------

function equipment_bag_use1()
	local spwn = equipmentbag_use1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "equipmentbag_use1" (CUIScriptWnd)

function equipmentbag_use1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function equipmentbag_use1:__finalize() end

function equipmentbag_use1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("equipmentbag_use1.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("bag_icon", self)
	xml:InitStatic("text", self)

	-- кнопка
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)
	self.btn_11 = xml:Init3tButton("btn_11", self)
	self:Register(self.btn_11, "btn_11")
	self.btn_11:Enable(false)
	self.btn_12 = xml:Init3tButton("btn_12", self)
	self:Register(self.btn_12, "btn_12")
	self.btn_12:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
	self.btn_7:Enable(true)
	self.btn_8:Enable(true)
	self.btn_9:Enable(true)
	self.btn_10:Enable(true)
	self.btn_11:Enable(true)
	self.btn_12:Enable(true)
end

function equipmentbag_use1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_11", ui_events.BUTTON_CLICKED,  self.btn11, self)
	self:AddCallback("btn_12", ui_events.BUTTON_CLICKED,  self.btn12, self)
end

function equipmentbag_use1:btn1()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_5.45x39_fmj", 90)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:btn2()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_5.56x45_ss190", 90)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:btn3()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_12x70_buck", 40)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:btn4()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_7.62x54_7h1", 45)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:btn5()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_7.62x51_fmj", 45)
	amk.remove_item(db.actor:object("equipment_bag"))
end

function equipmentbag_use1:btn6()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_7.62x39_fmj", 90)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:btn7()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_9x18_fmj", 60)
	amk.spawn_ammo_in_inv("ammo_9x19_fmj", 60)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:btn8()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_9x39_sp5", 50)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:btn9()
	self:quit()
	amk.spawn_item_in_inv("grenade_rgd5")
	amk.spawn_item_in_inv("grenade_rgd5")
	amk.spawn_item_in_inv("grenade_rgd5")
	amk.spawn_item_in_inv("grenade_rgd5")
	amk.spawn_item_in_inv("grenade_rgd5")
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:btn10()
	self:quit()
	amk.spawn_item_in_inv("ammo_og-7b")
	amk.spawn_item_in_inv("ammo_og-7b")
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:btn11()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_11.43x23_fmj", 70)
	amk.spawn_ammo_in_inv("ammo_357_hp_mag", 30)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:btn12()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_7.62x25_p", 80)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
------------------------------------------------------------------------------------------------------

function equipment_bag_use2()
	local spwn = equipmentbag_use2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "equipmentbag_use2" (CUIScriptWnd)

function equipmentbag_use2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function equipmentbag_use2:__finalize() end

function equipmentbag_use2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("equipmentbag_use2.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("bag_icon", self)
	xml:InitStatic("text", self)

	-- кнопка
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)
	self.btn_11 = xml:Init3tButton("btn_11", self)
	self:Register(self.btn_11, "btn_11")
	self.btn_11:Enable(false)
	self.btn_12 = xml:Init3tButton("btn_12", self)
	self:Register(self.btn_12, "btn_12")
	self.btn_12:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
	self.btn_7:Enable(true)
	self.btn_8:Enable(true)
	self.btn_9:Enable(true)
	self.btn_10:Enable(true)
	self.btn_11:Enable(true)
	self.btn_12:Enable(true)
end

function equipmentbag_use2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_11", ui_events.BUTTON_CLICKED,  self.btn11, self)
	self:AddCallback("btn_12", ui_events.BUTTON_CLICKED,  self.btn12, self)
end

function equipmentbag_use2:btn1()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_5.45x39_ap", 90)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:btn2()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_5.56x45_ap", 90)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:btn3()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_12x70_buck", 40)
	amk.spawn_ammo_in_inv("ammo_12x76_zhekan", 20)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:btn4()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_7.62x54_ap", 45)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:btn5()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_7.62x51_ap", 45)
	amk.remove_item(db.actor:object("equipment_bag"))
end

function equipmentbag_use2:btn6()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_7.62x39_ap", 90)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:btn7()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_9x18_pmm", 60)
	amk.spawn_ammo_in_inv("ammo_9x19_pbp", 60)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:btn8()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_9x39_ap", 50)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:btn9()
	self:quit()
	amk.spawn_item_in_inv("grenade_f1")
	amk.spawn_item_in_inv("grenade_f1")
	amk.spawn_item_in_inv("grenade_f1")
	amk.spawn_item_in_inv("grenade_f1")
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:btn10()
	self:quit()
	amk.spawn_item_in_inv("ammo_og-7b")
	amk.spawn_item_in_inv("ammo_og-7b")
	amk.spawn_item_in_inv("ammo_og-7b")
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:btn11()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_11.43x23_hydro", 70)
	amk.spawn_ammo_in_inv("ammo_357_hp_mag", 30)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:btn12()
	self:quit()
	amk.spawn_ammo_in_inv("ammo_7.62x25_ps", 80)
	amk.remove_item(db.actor:object("equipment_bag"))
	soundtrack.inv_operation()
end

function equipmentbag_use2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
------------------------------------------------------------------------------------------------------

-- Сумки с медикаментами -------------------------------------------------------------------------------------------------------------------------

function medic_pack_use1()
	local spwn = medicpack_use1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "medicpack_use1" (CUIScriptWnd)

function medicpack_use1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function medicpack_use1:__finalize() end

function medicpack_use1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("medicpack_use1.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("bag_icon", self)
	xml:InitStatic("text", self)

	-- кнопка
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
	self.btn_7:Enable(true)
	self.btn_8:Enable(true)
end

function medicpack_use1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
end

function medicpack_use1:btn1()
	self:quit()
	amk.spawn_item_in_inv("medkit")
	amk.spawn_item_in_inv("medkit")
	amk.spawn_item_in_inv("medkit_army")
	amk.spawn_item_in_inv("medkit_army")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use1:btn2()
	self:quit()
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use1:btn3()
	self:quit()
	amk.spawn_item_in_inv("antirad")
	amk.spawn_item_in_inv("antirad")
	amk.spawn_item_in_inv("antirad")
	amk.spawn_item_in_inv("antirad")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use1:btn4()
	self:quit()
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use1:btn5()
	self:quit()
	amk.spawn_item_in_inv("vint")
	amk.remove_item(db.actor:object("medic_bag"))
end

function medicpack_use1:btn6()
	self:quit()
	amk.spawn_item_in_inv("medkomplekt")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use1:btn7()
	self:quit()
	amk.spawn_item_in_inv("ibuprophen")
	amk.spawn_item_in_inv("ibuprophen")
	amk.spawn_item_in_inv("ibuprophen")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use1:btn8()
	self:quit()
	amk.spawn_item_in_inv("gidroperit")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
------------------------------------------------------------------------------------------------------

function medic_pack_use2()
	local spwn = medicpack_use2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "medicpack_use2" (CUIScriptWnd)

function medicpack_use2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function medicpack_use2:__finalize() end

function medicpack_use2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("medicpack_use2.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("bag_icon", self)
	xml:InitStatic("text", self)

	-- кнопка
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
	self.btn_6:Enable(true)
	self.btn_7:Enable(true)
	self.btn_8:Enable(true)
	self.btn_9:Enable(true)
	self.btn_10:Enable(true)
end

function medicpack_use2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
end

function medicpack_use2:btn1()
	self:quit()
	amk.spawn_item_in_inv("medkit")
	amk.spawn_item_in_inv("medkit")
	amk.spawn_item_in_inv("medkit_army")
	amk.spawn_item_in_inv("medkit_army")
	amk.spawn_item_in_inv("medkit_scientic")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use2:btn2()
	self:quit()
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.spawn_item_in_inv("bandage")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use2:btn3()
	self:quit()
	amk.spawn_item_in_inv("dix")
	amk.spawn_item_in_inv("dix")
	amk.spawn_item_in_inv("dix")
	amk.spawn_item_in_inv("dix")
	amk.spawn_item_in_inv("dix")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use2:btn4()
	self:quit()
	amk.spawn_item_in_inv("antirad")
	amk.spawn_item_in_inv("antirad")
	amk.spawn_item_in_inv("antirad")
	amk.spawn_item_in_inv("antirad")
	amk.spawn_item_in_inv("antirad")
	amk.spawn_item_in_inv("antirad")
	amk.spawn_item_in_inv("antirad")
	amk.spawn_item_in_inv("antirad")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use2:btn5()
	self:quit()
	amk.spawn_item_in_inv("bipsizon")
	amk.spawn_item_in_inv("bipsizon")
	amk.spawn_item_in_inv("bipsizon")
	amk.spawn_item_in_inv("bipsizon")
	amk.spawn_item_in_inv("bipsizon")
	amk.remove_item(db.actor:object("medic_bag"))
end

function medicpack_use2:btn6()
	self:quit()
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.spawn_item_in_inv("yod")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use2:btn7()
	self:quit()
	amk.spawn_item_in_inv("vint")
	amk.spawn_item_in_inv("vint")
	amk.spawn_item_in_inv("vint")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use2:btn8()
	self:quit()
	amk.spawn_item_in_inv("medkomplekt")
	amk.spawn_item_in_inv("medkomplekt")
	amk.spawn_item_in_inv("medkomplekt")
	amk.spawn_item_in_inv("medkomplekt")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use2:btn9()
	self:quit()
	amk.spawn_item_in_inv("ibuprophen")
	amk.spawn_item_in_inv("ibuprophen")
	amk.spawn_item_in_inv("ibuprophen")
	amk.spawn_item_in_inv("ibuprophen")
	amk.spawn_item_in_inv("ibuprophen")
	amk.spawn_item_in_inv("ibuprophen")
	amk.spawn_item_in_inv("ibuprophen")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use2:btn10()
	self:quit()
	amk.spawn_item_in_inv("gidroperit")
	amk.spawn_item_in_inv("gidroperit")
	amk.spawn_item_in_inv("gidroperit")
	amk.spawn_item_in_inv("gidroperit")
	amk.spawn_item_in_inv("gidroperit")
	amk.spawn_item_in_inv("gidroperit")
	amk.remove_item(db.actor:object("medic_bag"))
	soundtrack.inv_operation()
end

function medicpack_use2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
------------------------------------------------------------------------------------------------------




-- Кукла -------------------------------------------------------------------------------------------------------------------------

function wonder_doll_use_first_time()
	local spwn = wonder_doll_use1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_use1" (CUIScriptWnd)

function wonder_doll_use1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_use1:__finalize() end

function wonder_doll_use1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_use1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- self.btn_2 = xml:Init3tButton("btn_2", self)
	-- self:Register(self.btn_2, "btn_2")
	-- self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	-- self.btn_2:Enable(true)
end

function wonder_doll_use1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	-- self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function wonder_doll_use1:btn1()
	self:quit()
	if db.actor:dont_has_info("wonderdoll_first_talk") then
		db.actor:give_info_portion ("wonderdoll_first_talk")
	end
	wonder_doll_use_familiarity1()
end

function wonder_doll_use1:btn2()
	self:quit()
	amk.remove_item(db.actor:object("wonder_doll"))
	soundtrack.wonder_doll_dead()
end

function wonder_doll_use1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


function wonder_doll_use_familiarity1()
	local spwn = wonder_doll_use2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_use2" (CUIScriptWnd)

function wonder_doll_use2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_use2:__finalize() end

function wonder_doll_use2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_use2.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	-- self.btn_2 = xml:Init3tButton("btn_2", self)
	-- self:Register(self.btn_2, "btn_2")
	-- self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	-- self.btn_2:Enable(true)
end

function wonder_doll_use2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	-- self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function wonder_doll_use2:btn1()
	self:quit()
	wonder_doll_use_familiarity2()
end

function wonder_doll_use2:btn2()
	self:quit()
	amk.remove_item(db.actor:object("wonder_doll"))
	soundtrack.wonder_doll_dead()
end

function wonder_doll_use2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


function wonder_doll_use_familiarity2()
	local spwn = wonder_doll_use3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_use3" (CUIScriptWnd)

function wonder_doll_use3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_use3:__finalize() end

function wonder_doll_use3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_use3.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function wonder_doll_use3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function wonder_doll_use3:btn1()
	self:quit()
	wonder_doll_use_familiarity3()
end

function wonder_doll_use3:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


function wonder_doll_use_familiarity3()
	local spwn = wonder_doll_use4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_use4" (CUIScriptWnd)

function wonder_doll_use4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_use4:__finalize() end

function wonder_doll_use4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_use4.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function wonder_doll_use4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function wonder_doll_use4:btn1()
	self:quit()
	wonder_doll_use_familiarity4()
end

function wonder_doll_use4:btn2()
	self:quit()
	wonder_doll_use_familiarity4()
end

function wonder_doll_use4:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_use_familiarity4()
	local spwn = wonder_doll_use5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_use5" (CUIScriptWnd)

function wonder_doll_use5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_use5:__finalize() end

function wonder_doll_use5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_use5.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function wonder_doll_use5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function wonder_doll_use5:btn1()
	self:quit()
	wonder_doll_use_familiarity5()
end

function wonder_doll_use5:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_use_familiarity5()
	local spwn = wonder_doll_use6(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_use6" (CUIScriptWnd)

function wonder_doll_use6:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_use6:__finalize() end

function wonder_doll_use6:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_use6.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function wonder_doll_use6:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function wonder_doll_use6:btn1()
	self:quit()
	wonder_doll_use_familiarity6()
end

function wonder_doll_use6:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_use_familiarity6()
	local spwn = wonder_doll_use7(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_use7" (CUIScriptWnd)

function wonder_doll_use7:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_use7:__finalize() end

function wonder_doll_use7:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_use7.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function wonder_doll_use7:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function wonder_doll_use7:btn1()
	self:quit()
	wonder_doll_use_familiarity7()
end

function wonder_doll_use7:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_use_familiarity7()
	local spwn = wonder_doll_use8(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_use8" (CUIScriptWnd)

function wonder_doll_use8:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_use8:__finalize() end

function wonder_doll_use8:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_use8.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function wonder_doll_use8:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function wonder_doll_use8:btn1()
	self:quit()
	wonder_doll_use_familiarity8()
end

function wonder_doll_use8:btn2()
	self:quit()
	wonder_doll_use_familiarity8()
end

function wonder_doll_use8:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_use_familiarity8()
	local spwn = wonder_doll_use9(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_use9" (CUIScriptWnd)

function wonder_doll_use9:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_use9:__finalize() end

function wonder_doll_use9:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_use9.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function wonder_doll_use9:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function wonder_doll_use9:btn1()
	self:quit()
	wonder_doll_use_familiarity9()
end

function wonder_doll_use9:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_use_familiarity9()
	local spwn = wonder_doll_use10(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_use10" (CUIScriptWnd)

function wonder_doll_use10:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_use10:__finalize() end

function wonder_doll_use10:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_use10.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function wonder_doll_use10:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function wonder_doll_use10:btn1()
	self:quit()
	wonder_doll_use_regular1()
	db.actor:give_info_portion ("wonderdoll_task1")
end

function wonder_doll_use10:btn2()
	self:quit()
	amk.remove_item(db.actor:object("wonder_doll"))
	-- soundtrack.wonder_doll_dead()
	level.add_cam_effector("camera_effects\\prison_1.anm", 25, false, "")
	level.add_pp_effector("agr_u_fade.ppe", 2007, false)
	addon.actor_disable_inventory()
end

function wonder_doll_use10:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------




function wonder_doll_use_regular1()
	local spwn = wonder_doll_regular1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "wonder_doll_regular1" (CUIScriptWnd)

function wonder_doll_regular1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function wonder_doll_regular1:__finalize() end

function wonder_doll_regular1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_regular1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)

	-- определяем доступность кнопки
	if db.actor:dont_has_info("garb_camerrer_info") then
		self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
end

function wonder_doll_regular1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
end

function wonder_doll_regular1:btn1()
	self:quit()
	if ( db.actor:dont_has_info("wonder_task_done1") and 
	db.actor:dont_has_info("wonder_task_done2") and
	db.actor:dont_has_info("wonder_task_done3") and
	db.actor:dont_has_info("wonder_task_done4") and
	db.actor:dont_has_info("wonder_task_done5") and
	db.actor:dont_has_info("wonder_task_done6") and
	db.actor:dont_has_info("wonder_task_done7") and
	db.actor:dont_has_info("wonder_task_done8") and
	db.actor:dont_has_info("wonder_task_done9") and
	db.actor:dont_has_info("wonder_task_done10") ) then
		soundtrack.wonderdoll_tasks()
		wonder_doll_task_phase1()
	elseif ( db.actor:dont_has_info("wonder_task_done2") and
	db.actor:dont_has_info("wonder_task_done3") and
	db.actor:dont_has_info("wonder_task_done4") and
	db.actor:dont_has_info("wonder_task_done5") and
	db.actor:dont_has_info("wonder_task_done6") and
	db.actor:dont_has_info("wonder_task_done7") and
	db.actor:dont_has_info("wonder_task_done8") and
	db.actor:dont_has_info("wonder_task_done9") and
	db.actor:dont_has_info("wonder_task_done10") ) then
		soundtrack.wonderdoll_tasks()
		wonder_doll_task_phase2()
	elseif ( db.actor:dont_has_info("wonder_task_done3") and
	db.actor:dont_has_info("wonder_task_done4") and
	db.actor:dont_has_info("wonder_task_done5") and
	db.actor:dont_has_info("wonder_task_done6") and
	db.actor:dont_has_info("wonder_task_done7") and
	db.actor:dont_has_info("wonder_task_done8") and
	db.actor:dont_has_info("wonder_task_done9") and
	db.actor:dont_has_info("wonder_task_done10") ) then
		soundtrack.wonderdoll_tasks()
		wonder_doll_task_phase3()
	elseif ( db.actor:dont_has_info("wonder_task_done4") and
	db.actor:dont_has_info("wonder_task_done5") and
	db.actor:dont_has_info("wonder_task_done6") and
	db.actor:dont_has_info("wonder_task_done7") and
	db.actor:dont_has_info("wonder_task_done8") and
	db.actor:dont_has_info("wonder_task_done9") and
	db.actor:dont_has_info("wonder_task_done10") ) then
		soundtrack.wonderdoll_tasks()
		wonder_doll_task_phase4()
	elseif ( db.actor:dont_has_info("wonder_task_done5") and
	db.actor:dont_has_info("wonder_task_done6") and
	db.actor:dont_has_info("wonder_task_done7") and
	db.actor:dont_has_info("wonder_task_done8") and
	db.actor:dont_has_info("wonder_task_done9") and
	db.actor:dont_has_info("wonder_task_done10") ) then
		soundtrack.wonderdoll_tasks()
		wonder_doll_task_phase5()
	elseif ( db.actor:dont_has_info("wonder_task_done6") and
	db.actor:dont_has_info("wonder_task_done7") and
	db.actor:dont_has_info("wonder_task_done8") and
	db.actor:dont_has_info("wonder_task_done9") and
	db.actor:dont_has_info("wonder_task_done10") ) then
		soundtrack.wonderdoll_tasks()
		wonder_doll_task_phase6()
	elseif ( db.actor:dont_has_info("wonder_task_done7") and
	db.actor:dont_has_info("wonder_task_done8") and
	db.actor:dont_has_info("wonder_task_done9") and
	db.actor:dont_has_info("wonder_task_done10") ) then
		soundtrack.wonderdoll_tasks()
		wonder_doll_task_phase7()
	elseif ( db.actor:dont_has_info("wonder_task_done8") and
	db.actor:dont_has_info("wonder_task_done9") and
	db.actor:dont_has_info("wonder_task_done10") ) then
		soundtrack.wonderdoll_tasks()
		wonder_doll_task_phase8()
	elseif ( db.actor:dont_has_info("wonder_task_done9") and
	db.actor:dont_has_info("wonder_task_done10") ) then
		soundtrack.wonderdoll_tasks()
		wonder_doll_task_phase9()
	elseif ( db.actor:dont_has_info("wonder_task_done10") and db.actor:dont_has_info("wonderdoll_end") and has_alife_info("yan_camerer_no") ) then
		soundtrack.wonderdoll_tasks()
		wonder_doll_task_phase10()
	elseif has_alife_info("wonderdoll_end") then
		soundtrack.wonderdoll_tasks_end1()
		wonder_doll_task_phase11()
	end
end

function wonder_doll_regular1:btn2()
	rnd = math.random(1, 16)
	if rnd == 1 then 
		self:quit()
		wonder_doll_talking1()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 2 then 
		self:quit()
		wonder_doll_talking2()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 3 then 
		self:quit()
		wonder_doll_talking3()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 4 then 
		self:quit()
		wonder_doll_talking4()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 5 then 
		self:quit()
		wonder_doll_talking5()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 6 then 
		self:quit()
		wonder_doll_talking6()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 7 then 
		self:quit()
		wonder_doll_talking7()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 8 then 
		self:quit()
		wonder_doll_talking8()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 9 then 
		self:quit()
		wonder_doll_talking9()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 10 then 
		self:quit()
		wonder_doll_talking10()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 11 then 
		self:quit()
		wonder_doll_talking11()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 12 then 
		self:quit()
		wonder_doll_talking12()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 13 then 
		self:quit()
		wonder_doll_talking13()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 14 then 
		self:quit()
		wonder_doll_talking14()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 15 then 
		self:quit()
		wonder_doll_talking15()
		soundtrack.wonderdoll_storytell_replik()
	elseif rnd == 16 then 
		self:quit()
		wonder_doll_talking16()
		soundtrack.wonderdoll_storytell_replik()
	end


end

function wonder_doll_regular1:btn3()
	self:quit()
	addon_dialogs.wonderdoll_secrets_tell()
end

function wonder_doll_regular1:btn4()
	self:quit()
	wonderdoll_tasks_help0()
	soundtrack.wonderdoll_hungry_replik()
end

function wonder_doll_regular1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase1()
	local spwn = task_phase1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase1" (CUIScriptWnd)

function task_phase1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase1:__finalize() end

function task_phase1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase1:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function task_phase1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


function wonder_doll_task_phase2()
	local spwn = task_phase2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase2" (CUIScriptWnd)

function task_phase2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase2:__finalize() end

function task_phase2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase2.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase2:btn1()
	self:quit()
	
end

function task_phase2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase3()
	local spwn = task_phase3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase3" (CUIScriptWnd)

function task_phase3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase3:__finalize() end

function task_phase3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase3.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase3:btn1()
	self:quit()
	wonder_doll_task_phase3a()
end

function task_phase3:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase3a()
	local spwn = task_phase3a(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase3a" (CUIScriptWnd)

function task_phase3a:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase3a:__finalize() end

function task_phase3a:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase3a.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase3a:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase3a:btn1()
	self:quit()
	
end

function task_phase3a:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase4()
	local spwn = task_phase4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase4" (CUIScriptWnd)

function task_phase4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase4:__finalize() end

function task_phase4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase4.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase4:btn1()
	self:quit()
	wonder_doll_task_phase4a()
end

function task_phase4:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase4a()
	local spwn = task_phase4a(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase4a" (CUIScriptWnd)

function task_phase4a:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase4a:__finalize() end

function task_phase4a:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase4a.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase4a:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase4a:btn1()
	self:quit()
	wonder_doll_task_phase4b()
end

function task_phase4a:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase4b()
	local spwn = task_phase4b(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase4b" (CUIScriptWnd)

function task_phase4b:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase4b:__finalize() end

function task_phase4b:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase4b.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase4b:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase4b:btn1()
	self:quit()
	wonder_doll_task_phase4c()
end

function task_phase4b:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase4c()
	local spwn = task_phase4c(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase4c" (CUIScriptWnd)

function task_phase4c:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase4c:__finalize() end

function task_phase4c:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase4c.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase4c:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase4c:btn1()
	self:quit()
	
end

function task_phase4c:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase5()
	local spwn = task_phase5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase5" (CUIScriptWnd)

function task_phase5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase5:__finalize() end

function task_phase5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase5.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase5:btn1()
	self:quit()
	wonder_doll_task_phase5a()
end

function task_phase5:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase5a()
	local spwn = task_phase5a(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase5a" (CUIScriptWnd)

function task_phase5a:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase5a:__finalize() end

function task_phase5a:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase5a.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase5a:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase5a:btn1()
	self:quit()
	soundtrack.wonderdoll_sucess_tip10()

end

function task_phase5a:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase6()
	local spwn = task_phase6(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase6" (CUIScriptWnd)

function task_phase6:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase6:__finalize() end

function task_phase6:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase6.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase6:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase6:btn1()
	self:quit()
	wonder_doll_task_phase6a()
end

function task_phase6:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase6a()
	local spwn = task_phase6a(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase6a" (CUIScriptWnd)

function task_phase6a:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase6a:__finalize() end

function task_phase6a:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase6a.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase6a:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase6a:btn1()
	self:quit()

end

function task_phase6a:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_task_phase7()
	local spwn = task_phase7(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase7" (CUIScriptWnd)

function task_phase7:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase7:__finalize() end

function task_phase7:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase7.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase7:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase7:btn1()
	self:quit()
	wonder_doll_task_phase7a()
end

function task_phase7:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


function wonder_doll_task_phase7a()
	local spwn = task_phase7a(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase7a" (CUIScriptWnd)

function task_phase7a:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase7a:__finalize() end

function task_phase7a:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase7a.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase7a:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase7a:btn1()
	self:quit()

end

function task_phase7a:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
------------------------------------------------------------------------------------------------------------------------
function wonder_doll_task_phase8()
	local spwn = task_phase8(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase8" (CUIScriptWnd)

function task_phase8:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase8:__finalize() end

function task_phase8:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase8.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase8:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase8:btn1()
	self:quit()
	wonder_doll_task_phase8a()
end

function task_phase8:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_task_phase8a()
	local spwn = task_phase8a(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase8a" (CUIScriptWnd)

function task_phase8a:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase8a:__finalize() end

function task_phase8a:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase8a.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase8a:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase8a:btn1()
	self:quit()

end

function task_phase8a:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
------------------------------------------------------------------------------------------------------------------------

function wonder_doll_task_phase9()
	local spwn = task_phase9(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase9" (CUIScriptWnd)

function task_phase9:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase9:__finalize() end

function task_phase9:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase9.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase9:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase9:btn1()
	self:quit()
	wonder_doll_task_phase9a()
end

function task_phase9:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_task_phase9a()
	local spwn = task_phase9a(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase9a" (CUIScriptWnd)

function task_phase9a:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase9a:__finalize() end

function task_phase9a:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase9a.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase9a:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase9a:btn1()
	self:quit()
	if db.actor:dont_has_info("spawn_yan_camerer") then
		db.actor:give_info_portion ("spawn_yan_camerer")
	end
end

function task_phase9a:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
------------------------------------------------------------------------------------------------------------------------
function wonder_doll_task_phase10()
	local spwn = task_phase10(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase10" (CUIScriptWnd)

function task_phase10:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase10:__finalize() end

function task_phase10:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase10.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase10:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase10:btn1()
	self:quit()
	wonder_doll_task_phase10a()
end

function task_phase10:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
------------------------------------------------------------------------------------------------------------------------
function wonder_doll_task_phase10a()
	local spwn = task_phase10a(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase10a" (CUIScriptWnd)

function task_phase10a:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase10a:__finalize() end

function task_phase10a:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase10a.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase10a:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase10a:btn1()
	self:quit()
	if db.actor:dont_has_info("wonderdoll_surprise") then
		db.actor:give_info_portion ("wonderdoll_surprise")
	end
end

function task_phase10a:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
------------------------------------------------------------------------------------------------------------------------
function wonder_doll_task_phase11()
	local spwn = task_phase11(get_hud())
	level.start_stop_menu(spwn,true)
end

class "task_phase11" (CUIScriptWnd)

function task_phase11:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function task_phase11:__finalize() end

function task_phase11:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\task_phase11.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function task_phase11:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function task_phase11:btn1()
	self:quit()
	soundtrack.wonderdoll_tasks_end2()
end

function task_phase11:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
------------------------------------------------------------------------------------------------------------------------




function wonder_doll_talking1()
	local spwn = doll_talking1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking1" (CUIScriptWnd)

function doll_talking1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking1:__finalize() end

function doll_talking1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking1:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_talking2()
	local spwn = doll_talking2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking2" (CUIScriptWnd)

function doll_talking2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking2:__finalize() end

function doll_talking2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking2.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking2:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_talking3()
	local spwn = doll_talking3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking3" (CUIScriptWnd)

function doll_talking3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking3:__finalize() end

function doll_talking3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking3.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking3:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking3:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_talking4()
	local spwn = doll_talking4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking4" (CUIScriptWnd)

function doll_talking4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking4:__finalize() end

function doll_talking4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking4.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking4:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking4:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_talking5()
	local spwn = doll_talking5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking5" (CUIScriptWnd)

function doll_talking5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking5:__finalize() end

function doll_talking5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking5.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking5:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking5:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_talking6()
	local spwn = doll_talking6(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking6" (CUIScriptWnd)

function doll_talking6:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking6:__finalize() end

function doll_talking6:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking6.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking6:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking6:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking6:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_talking7()
	local spwn = doll_talking7(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking7" (CUIScriptWnd)

function doll_talking7:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking7:__finalize() end

function doll_talking7:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking7.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking7:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking7:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking7:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_talking8()
	local spwn = doll_talking1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking8" (CUIScriptWnd)

function doll_talking8:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking8:__finalize() end

function doll_talking8:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking8.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking8:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking8:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking8:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_talking9()
	local spwn = doll_talking9(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking9" (CUIScriptWnd)

function doll_talking9:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking9:__finalize() end

function doll_talking9:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking9.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking9:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking9:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking9:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_talking10()
	local spwn = doll_talking10(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking10" (CUIScriptWnd)

function doll_talking10:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking10:__finalize() end

function doll_talking10:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking10.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking10:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking10:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking10:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_talking11()
	local spwn = doll_talking11(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking11" (CUIScriptWnd)

function doll_talking11:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking11:__finalize() end

function doll_talking11:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking11.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking11:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking11:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking11:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_talking12()
	local spwn = doll_talking12(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking12" (CUIScriptWnd)

function doll_talking12:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking12:__finalize() end

function doll_talking12:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking12.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking12:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking12:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking12:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_talking13()
	local spwn = doll_talking13(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking13" (CUIScriptWnd)

function doll_talking13:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking13:__finalize() end

function doll_talking13:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking13.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking13:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking13:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking13:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_talking14()
	local spwn = doll_talking14(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking14" (CUIScriptWnd)

function doll_talking14:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking14:__finalize() end

function doll_talking14:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking14.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking14:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking14:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking14:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_talking15()
	local spwn = doll_talking15(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking15" (CUIScriptWnd)

function doll_talking15:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking15:__finalize() end

function doll_talking15:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking15.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking15:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking15:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking15:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_talking16()
	local spwn = doll_talking16(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_talking16" (CUIScriptWnd)

function doll_talking16:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_talking16:__finalize() end

function doll_talking16:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\wonder_doll_talking16.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_talking16:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_talking16:btn1()
	self:quit()
	wonder_doll_use_regular1()
end

function doll_talking16:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------






function wonder_doll_level_secret0()
	local spwn = doll_level_secret0(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret0" (CUIScriptWnd)

function doll_level_secret0:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret0:__finalize() end

function doll_level_secret0:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret0.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret0:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret0:btn1()
	self:quit()
	wonder_doll_use_regular1()
	
end

function doll_level_secret0:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_level_secret1()
	local spwn = doll_level_secret1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret1" (CUIScriptWnd)

function doll_level_secret1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret1:__finalize() end

function doll_level_secret1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret1:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret1") then
		db.actor:give_info_portion ("wonderdoll_level_secret1")
		alife():create("doll_habar1", vector():set (28.93,4.70,25.73), 308289, 90)
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_level_secret2()
	local spwn = doll_level_secret2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret2" (CUIScriptWnd)

function doll_level_secret2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret2:__finalize() end

function doll_level_secret2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret2.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret2:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret2") then
		db.actor:give_info_portion ("wonderdoll_level_secret2")
		alife():create("doll_habar2", vector():set (128.70,-6.31,-12.90), 432753, 134)
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_level_secret3()
	local spwn = doll_level_secret3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret3" (CUIScriptWnd)

function doll_level_secret3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret3:__finalize() end

function doll_level_secret3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret3.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret3:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret3") then
		db.actor:give_info_portion ("wonderdoll_level_secret3")
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret3:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_level_secret4()
	local spwn = doll_level_secret4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret4" (CUIScriptWnd)

function doll_level_secret4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret4:__finalize() end

function doll_level_secret4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret4.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret4:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret4") then
		db.actor:give_info_portion ("wonderdoll_level_secret4")
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret4:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_level_secret5()
	local spwn = doll_level_secret5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret5" (CUIScriptWnd)

function doll_level_secret5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret5:__finalize() end

function doll_level_secret5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret5.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret5:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret5") then
		db.actor:give_info_portion ("wonderdoll_level_secret5")
		-- alife():create("gar_doll_treeart", vector():set (199.17,16.16,58.04), 342879, 383)
		alife():create("gar_doll_treeart", vector():set (199.29,11.55,57.15), 343326, 383)
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret5:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function wonder_doll_level_secret6()
	local spwn = doll_level_secret6(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret6" (CUIScriptWnd)

function doll_level_secret6:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret6:__finalize() end

function doll_level_secret6:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret6.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret6:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret6:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret6") then
		db.actor:give_info_portion ("wonderdoll_level_secret6")
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret6:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_level_secret7()
	local spwn = doll_level_secret7(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret7" (CUIScriptWnd)

function doll_level_secret7:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret7:__finalize() end

function doll_level_secret7:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret8.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret7:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret7:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret10") then
		db.actor:give_info_portion ("wonderdoll_level_secret10")
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret7:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_level_secret8()
	local spwn = doll_level_secret8(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret8" (CUIScriptWnd)

function doll_level_secret8:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret8:__finalize() end

function doll_level_secret8:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret9.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret8:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret8:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret11") then
		db.actor:give_info_portion ("wonderdoll_level_secret11")
		addon.script_spawn("doll_habar3", "l06_rostok", vector():set(-242.44,23.96,40.11) )
		news_manager.send_tip(db.actor, "doll_help_tip24", nil, "doll", 8000, nil)
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret8:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_level_secret9()
	local spwn = doll_level_secret9(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret9" (CUIScriptWnd)

function doll_level_secret9:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret9:__finalize() end

function doll_level_secret9:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret10.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret9:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret9:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret12") then
		db.actor:give_info_portion ("wonderdoll_level_secret12")
		addon.script_spawn("doll_habar4", "l06_rostok", vector():set(-65.53,-13.30,-133.23) )
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret9:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_level_secret9a()
	local spwn = doll_level_secret9a(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret9a" (CUIScriptWnd)

function doll_level_secret9a:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret9a:__finalize() end

function doll_level_secret9a:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret10a.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret9a:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret9a:btn1()
	self:quit()
	wonder_doll_use_regular1()
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret9a:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_level_secret10()
	local spwn = doll_level_secret10(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret10" (CUIScriptWnd)

function doll_level_secret10:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret10:__finalize() end

function doll_level_secret10:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret11.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret10:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret10:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret13") then
		db.actor:give_info_portion ("wonderdoll_level_secret13")
		addon.script_spawn("doll_habar5", "l08_yantar", vector():set(116.06,1.59,-160.77) )
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret10:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_level_secret11()
	local spwn = doll_level_secret11(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret11" (CUIScriptWnd)

function doll_level_secret11:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret11:__finalize() end

function doll_level_secret11:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret12.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret11:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret11:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret14") then
		db.actor:give_info_portion ("wonderdoll_level_secret14")
		addon.script_spawn("doll_habar6", "l08_yantar", vector():set(42.40,10.00,-56.60) )
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret11:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_level_secret12()
	local spwn = doll_level_secret12(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret12" (CUIScriptWnd)

function doll_level_secret12:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret12:__finalize() end

function doll_level_secret12:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret13.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret12:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret12:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret15") then
		db.actor:give_info_portion ("wonderdoll_level_secret15")
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret12:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_level_secret13()
	local spwn = doll_level_secret13(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret13" (CUIScriptWnd)

function doll_level_secret13:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret13:__finalize() end

function doll_level_secret13:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret14.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret13:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret13:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret16") then
		db.actor:give_info_portion ("wonderdoll_level_secret16")
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret13:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonder_doll_level_secret14()
	local spwn = doll_level_secret14(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_level_secret14" (CUIScriptWnd)

function doll_level_secret14:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_level_secret14:__finalize() end

function doll_level_secret14:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_level_secret15.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function doll_level_secret14:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function doll_level_secret14:btn1()
	self:quit()
	wonder_doll_use_regular1()
	if db.actor:dont_has_info("wonderdoll_level_secret17") then
		db.actor:give_info_portion ("wonderdoll_level_secret17")
	end
	soundtrack.wonderdoll_sucess_tip43()
end

function doll_level_secret14:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------







function wonderdoll_tasks_help0()
	local spwn = doll_tasks_help0(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_tasks_help0" (CUIScriptWnd)

function doll_tasks_help0:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_tasks_help0:__finalize() end

function doll_tasks_help0:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_tasks_help0.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	if ( db.actor:object("syrok") ~= nil or db.actor:object("syrok_bad") ~= nil ) then
		self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
end

function doll_tasks_help0:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function doll_tasks_help0:btn1()
	self:quit()
	wonderdoll_tasks_help1()
	addon.remove_items("syrok", 1)
	addon.remove_items("syrok_bad", 1)
	soundtrack.wonderdoll_sucess_tip34()
end

function doll_tasks_help0:btn2()
	self:quit()
	wonder_doll_use_regular1()
	soundtrack.wonderdoll_bad_deal_replic()
end

function doll_tasks_help0:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonderdoll_tasks_help1()
	local spwn = doll_tasks_help1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_tasks_help1" (CUIScriptWnd)

function doll_tasks_help1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_tasks_help1:__finalize() end

function doll_tasks_help1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_tasks_help1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)
	xml:InitStatic("tasks_list_name", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)
	self.btn_11 = xml:Init3tButton("btn_11", self)
	self:Register(self.btn_11, "btn_11")
	self.btn_11:Enable(false)
	self.btn_12 = xml:Init3tButton("btn_12", self)
	self:Register(self.btn_12, "btn_12")
	self.btn_12:Enable(false)
	self.btn_13 = xml:Init3tButton("btn_13", self)
	self:Register(self.btn_13, "btn_13")
	self.btn_13:Enable(false)
	self.btn_14 = xml:Init3tButton("btn_14", self)
	self:Register(self.btn_14, "btn_14")
	self.btn_14:Enable(false)
	self.btn_15 = xml:Init3tButton("btn_15", self)
	self:Register(self.btn_15, "btn_15")
	self.btn_15:Enable(false)
	self.btn_16 = xml:Init3tButton("btn_16", self)
	self:Register(self.btn_16, "btn_16")
	self.btn_16:Enable(false)
	self.btn_17 = xml:Init3tButton("btn_17", self)
	self:Register(self.btn_17, "btn_17")
	self.btn_17:Enable(false)
	self.btn_18 = xml:Init3tButton("btn_18", self)
	self:Register(self.btn_18, "btn_18")
	self.btn_18:Enable(false)
	self.btn_19 = xml:Init3tButton("btn_19", self)
	self:Register(self.btn_19, "btn_19")
	self.btn_19:Enable(false)
	self.btn_20 = xml:Init3tButton("btn_20", self)
	self:Register(self.btn_20, "btn_20")
	self.btn_20:Enable(false)
	self.btn_21 = xml:Init3tButton("btn_21", self)
	self:Register(self.btn_21, "btn_21")
	self.btn_21:Enable(false)
	self.btn_22 = xml:Init3tButton("btn_22", self)
	self:Register(self.btn_22, "btn_22")
	self.btn_22:Enable(false)
	self.btn_23 = xml:Init3tButton("btn_23", self)
	self:Register(self.btn_23, "btn_23")
	self.btn_23:Enable(false)
	self.btn_24 = xml:Init3tButton("btn_24", self)
	self:Register(self.btn_24, "btn_24")
	self.btn_24:Enable(false)
	self.btn_25 = xml:Init3tButton("btn_25", self)
	self:Register(self.btn_25, "btn_25")
	self.btn_25:Enable(false)

	-- определяем доступность кнопки
	if has_alife_info("story_task1") then
		self.btn_1:Enable(true)
	end
	if has_alife_info("atp_controler_task") and db.actor:dont_has_info("skidan_control_task_reward") then
		self.btn_2:Enable(true)
	end
	if has_alife_info("skidan_killers_info") and db.actor:dont_has_info("underbridge_task_sucess") then
		self.btn_3:Enable(true)
	end
	if has_alife_info("skidan_post_stels_task") and db.actor:dont_has_info("skidan_post_stels_task_done") then
		self.btn_4:Enable(true)
	end
	if has_alife_info("spawn_garbage_companions") and db.actor:dont_has_info("repare_btr_task") then
		self.btn_5:Enable(true)
	end
	if has_alife_info("kpp_bandits_timer_start") and db.actor:dont_has_info("abdul_strikes_bandits") then
		self.btn_6:Enable(true)
	end
	if has_alife_info("helicrash_survival_ready_to_go") and db.actor:dont_has_info("spawn_garbage_companions") then
		self.btn_7:Enable(true)
	end
	if has_alife_info("shadow_zone_task_info") and db.actor:object("chamelleon") == nil then
		self.btn_8:Enable(true)
	end
	if has_alife_info("skidan_fn2000_task") and db.actor:dont_has_info("skidan_fn2000_done") then
		self.btn_9:Enable(true)
	end
	if has_alife_info("locomotive_body_info") and db.actor:dont_has_info("agrund_redrik_info1") then
		self.btn_10:Enable(true)
	end
	if has_alife_info("sanya_suslik_task") and db.actor:dont_has_info("obelisk_task") then
		self.btn_11:Enable(true)
	end
	if has_alife_info("redrik_about_nii_scientists_info") and db.actor:dont_has_info("agr_nii_ecolog_reward") then
		self.btn_12:Enable(true)
	end
	if has_alife_info("obelisk_task") and db.actor:dont_has_info("deadmans_head_task_done") then
		self.btn_13:Enable(true)
	end
	if has_alife_info("find_vanomas_task") and db.actor:dont_has_info("skidan_bomzh_reward") then
		self.btn_14:Enable(true)
	end
	if has_alife_info("repare_btr_task") and db.actor:dont_has_info("garb_btr_task_done") then
		self.btn_15:Enable(true)
	end
	if has_alife_info("dar_factory_rats_task") and db.actor:dont_has_info("dar_explorers_key_finded") then
		self.btn_16:Enable(true)
	end
	if has_alife_info("ratter_diary_info") and db.actor:dont_has_info("x18_ambush_start") then
		self.btn_17:Enable(true)
	end
	if has_alife_info("dar_woman_stolen") and db.actor:dont_has_info("dar_woman_in_vagon") then
		self.btn_18:Enable(true)
	end
	if has_alife_info("dar_farm_anomaly_task") and db.actor:dont_has_info("dar_renegade1_go_away") then
		self.btn_19:Enable(true)
	end
	if has_alife_info("dyatlov_group_task") and db.actor:dont_has_info("find_instruments_task") then
		self.btn_20:Enable(true)
	end
	if has_alife_info("find_instruments_task") and db.actor:dont_has_info("instruments_task_done") then
		self.btn_21:Enable(true)
	end
	if has_alife_info("agr_fabrik_electroshema_search") and db.actor:dont_has_info("agr_fabrik_elshema_done") then
		self.btn_22:Enable(true)
	end
	if has_alife_info("find_agr_undeground_task") and db.actor:dont_has_info("spawn_agrund_hunter") then
		self.btn_23:Enable(true)
	end
	self.btn_24:Enable(true)
	self.btn_25:Enable(true)
end

function doll_tasks_help1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_11", ui_events.BUTTON_CLICKED,  self.btn11, self)
	self:AddCallback("btn_12", ui_events.BUTTON_CLICKED,  self.btn12, self)
	self:AddCallback("btn_13", ui_events.BUTTON_CLICKED,  self.btn13, self)
	self:AddCallback("btn_14", ui_events.BUTTON_CLICKED,  self.btn14, self)
	self:AddCallback("btn_15", ui_events.BUTTON_CLICKED,  self.btn15, self)
	self:AddCallback("btn_16", ui_events.BUTTON_CLICKED,  self.btn16, self)
	self:AddCallback("btn_17", ui_events.BUTTON_CLICKED,  self.btn17, self)
	self:AddCallback("btn_18", ui_events.BUTTON_CLICKED,  self.btn18, self)
	self:AddCallback("btn_19", ui_events.BUTTON_CLICKED,  self.btn19, self)
	self:AddCallback("btn_20", ui_events.BUTTON_CLICKED,  self.btn20, self)
	self:AddCallback("btn_21", ui_events.BUTTON_CLICKED,  self.btn21, self)
	self:AddCallback("btn_22", ui_events.BUTTON_CLICKED,  self.btn22, self)
	self:AddCallback("btn_23", ui_events.BUTTON_CLICKED,  self.btn23, self)
	self:AddCallback("btn_24", ui_events.BUTTON_CLICKED,  self.btn24, self)
	self:AddCallback("btn_25", ui_events.BUTTON_CLICKED,  self.btn25, self)
end

function doll_tasks_help1:btn1()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task1_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn2()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task2_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn3()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task3_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn4()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task4_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn5()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task5_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn6()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task6_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn7()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task7_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn8()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task8_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn9()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task9_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn10()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task10_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn11()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task11_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn12()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task12_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn13()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task13_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn14()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task14_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn15()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task15_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn16()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task16_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn17()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task17_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn18()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task18_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn19()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task19_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn20()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task20_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn21()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task21_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn22()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task22_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn23()
	self:quit()
	addon.actor_disable_inventory()
	news_manager.send_tip(db.actor, "doll_task23_help_tip", nil, "doll", 20000, nil)
end

function doll_tasks_help1:btn24()
	self:quit()
	wonderdoll_tasks_help2()
end

function doll_tasks_help1:btn25()
	self:quit()
	addon_dialogs.wonderdoll_seifs_help()
end

function doll_tasks_help1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function wonderdoll_tasks_help2()
	local spwn = doll_tasks_help2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "doll_tasks_help2" (CUIScriptWnd)

function doll_tasks_help2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function doll_tasks_help2:__finalize() end

function doll_tasks_help2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("doll\\doll_tasks_help2.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("doll_talk_text", self)
	xml:InitStatic("tasks_list_name", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)
	self.btn_11 = xml:Init3tButton("btn_11", self)
	self:Register(self.btn_11, "btn_11")
	self.btn_11:Enable(false)
	self.btn_12 = xml:Init3tButton("btn_12", self)
	self:Register(self.btn_12, "btn_12")
	self.btn_12:Enable(false)
	self.btn_13 = xml:Init3tButton("btn_13", self)
	self:Register(self.btn_13, "btn_13")
	self.btn_13:Enable(false)
	self.btn_14 = xml:Init3tButton("btn_14", self)
	self:Register(self.btn_14, "btn_14")
	self.btn_14:Enable(false)
	self.btn_15 = xml:Init3tButton("btn_15", self)
	self:Register(self.btn_15, "btn_15")
	self.btn_15:Enable(false)
	self.btn_16 = xml:Init3tButton("btn_16", self)
	self:Register(self.btn_16, "btn_16")
	self.btn_16:Enable(false)

	-- определяем доступность кнопки
	if has_alife_info("bar_abdul_sick") and db.actor:dont_has_info("bar_virus_off") then
		self.btn_1:Enable(true)
	end
	if has_alife_info("bar_arena_pseudogig_spawn") and db.actor:dont_has_info("bar_arena_pseudogig_dead") then
		self.btn_2:Enable(true)
	end
	if has_alife_info("ochkaric_shron_info") and db.actor:dont_has_info("deathlamp_saled") then
		self.btn_3:Enable(true)
	end
	if has_alife_info("x18_perfocards_task") and db.actor:dont_has_info("subj1_docks_done") then
		self.btn_4:Enable(true)
	end
	if has_alife_info("x18_pumps_task") and db.actor:dont_has_info("x18_pumps_task_reward") then
		self.btn_5:Enable(true)
	end
	if has_alife_info("abdul_goto_roadbus") and db.actor:dont_has_info("bar_road_bus_off") then
		self.btn_6:Enable(true)
	end
	if has_alife_info("bar_kotelnya_quest") and db.actor:dont_has_info("bar_kotelnya_seif_open") then
		self.btn_7:Enable(true)
	end
	if has_alife_info("pri_abdul_last_talk2") and db.actor:dont_has_info("pri_brownie3_dead") then
		self.btn_8:Enable(true)
	end
	if has_alife_info("aes_body1_info") and db.actor:dont_has_info("aes_body4_info") then
		self.btn_9:Enable(true)
	end
	if has_alife_info("predb_village_trap") and db.actor:dont_has_info("predb_rogue_dead") then
		self.btn_10:Enable(true)
	end
	if has_alife_info("predb_marouder_search") and db.actor:dont_has_info("predb_marouders_to_base") then
		self.btn_11:Enable(true)
	end
	if xr_conditions.actor_in_predb_base_zone() == true and db.actor:dont_has_info("predb_base_chimera_dead") then
		self.btn_12:Enable(true)
	end
	if has_alife_info("predb_firest_search") and db.actor:dont_has_info("predb_cave_search") then
		self.btn_13:Enable(true)
	end
	if has_alife_info("predb_cave_search") and db.actor:dont_has_info("predb_fabrik_search") then
		self.btn_14:Enable(true)
	end
	if has_alife_info("mil_separ_acess") and db.actor:dont_has_info("mil_separ_end") then
		self.btn_15:Enable(true)
	end

	self.btn_16:Enable(true)

end

function doll_tasks_help2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_11", ui_events.BUTTON_CLICKED,  self.btn11, self)
	self:AddCallback("btn_12", ui_events.BUTTON_CLICKED,  self.btn12, self)
	self:AddCallback("btn_13", ui_events.BUTTON_CLICKED,  self.btn13, self)
	self:AddCallback("btn_14", ui_events.BUTTON_CLICKED,  self.btn14, self)
	self:AddCallback("btn_15", ui_events.BUTTON_CLICKED,  self.btn15, self)
	self:AddCallback("btn_16", ui_events.BUTTON_CLICKED,  self.btn16, self)
end

function doll_tasks_help2:btn1()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task24_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn2()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task25_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn3()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task26_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn4()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task27_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn5()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task28_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn6()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task29_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn7()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task30_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn8()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task31_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn9()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task32_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn10()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task33_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn11()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task34_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn12()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task35_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn13()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task36_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn14()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task37_help_tip", nil, "doll", 12000, nil)
end

function doll_tasks_help2:btn15()
	self:quit()
	news_manager.send_tip(db.actor, "doll_task38_help_tip", nil, "doll", 12000, nil)
end


function doll_tasks_help2:btn16()
	self:quit()
	wonderdoll_tasks_help1()
end

function doll_tasks_help2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------







-- Табличка вентилятора в подземке Агро ------------------------------------------------------------
function agrund_motor_table_use()
	local spwn = agrund_motor_table(get_hud())
	level.start_stop_menu(spwn,true)
end

class "agrund_motor_table" (CUIScriptWnd)

function agrund_motor_table:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function agrund_motor_table:__finalize() end

function agrund_motor_table:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("agrund_motor_table.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- заголовок
	xml:InitStatic("name", self)

	-- Надписи:
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)
	xml:InitStatic("text4", self)
	xml:InitStatic("text5", self)
	xml:InitStatic("text6", self)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

end

function agrund_motor_table:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function agrund_motor_table:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------------------------------------------------------------

-- Кнопка лифта в заднии НИИ Агропром ------------------------------------------------------------
function agr_nii_lift_button_use()
	local spwn = agr_nii_lift_button(get_hud())
	level.start_stop_menu(spwn,true)
end

class "agr_nii_lift_button" (CUIScriptWnd)

function agr_nii_lift_button:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function agr_nii_lift_button:__finalize() end

function agr_nii_lift_button:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("agr_nii_lift_button.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- заголовок
	xml:InitStatic("name", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- доступность кнопок:
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)

end

function agr_nii_lift_button:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function agr_nii_lift_button:btn1()
	self:on_quit()
	level.add_pp_effector("agr_u_fade.ppe", 2007, false)
	db.actor:set_actor_position(vector():set(-122.86,0.00,-201.99))
end

function agr_nii_lift_button:btn2()
	self:on_quit()
	level.add_pp_effector("agr_u_fade.ppe", 2007, false)
	db.actor:set_actor_position(vector():set(-122.87,5.00,-201.99))
end

function agr_nii_lift_button:btn3()
	self:on_quit()
	level.add_pp_effector("agr_u_fade.ppe", 2007, false)
	db.actor:set_actor_position(vector():set(-122.86,10.00,-201.99))
end

function agr_nii_lift_button:btn4()
	self:on_quit()
	level.add_pp_effector("agr_u_fade.ppe", 2007, false)
	db.actor:set_actor_position(vector():set(-122.83,15.00,-201.99))
	if db.actor:dont_has_info("actor_on_agr_nii_roof") then
		db.actor:give_info_portion ("actor_on_agr_nii_roof")
	end
end

function agr_nii_lift_button:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------------------------------------------------------------



-- Излом -----------------------------------------------------------------------------------------------------------------------------------------
function izlom_pervert_dialog1()
	local spwn = pervert_dialog1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog1" (CUIScriptWnd)

function pervert_dialog1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog1:__finalize() end

function pervert_dialog1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function pervert_dialog1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function pervert_dialog1:btn1()
	self:quit()
	izlom_pervert_dialog2()
end

function pervert_dialog1:btn2()
	self:quit()
	db.actor:give_info_portion ("dar_izlom_enemy")
end

function pervert_dialog1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog2()
	local spwn = pervert_dialog2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog2" (CUIScriptWnd)

function pervert_dialog2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog2:__finalize() end

function pervert_dialog2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog2.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog2:btn1()
	self:quit()
	izlom_pervert_dialog3()
end

function pervert_dialog2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog3()
	local spwn = pervert_dialog3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog3" (CUIScriptWnd)

function pervert_dialog3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog3:__finalize() end

function pervert_dialog3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog3.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog3:btn1()
	self:quit()
	izlom_pervert_dialog4()
end

function pervert_dialog3:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog4()
	local spwn = pervert_dialog4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog4" (CUIScriptWnd)

function pervert_dialog4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog4:__finalize() end

function pervert_dialog4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog4.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog4:btn1()
	self:quit()
	izlom_pervert_dialog5()
end

function pervert_dialog4:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog5()
	local spwn = pervert_dialog5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog5" (CUIScriptWnd)

function pervert_dialog5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog5:__finalize() end

function pervert_dialog5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog5.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog5:btn1()
	self:quit()
	izlom_pervert_dialog6()
end

function pervert_dialog5:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog6()
	local spwn = pervert_dialog6(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog6" (CUIScriptWnd)

function pervert_dialog6:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog6:__finalize() end

function pervert_dialog6:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog6.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog6:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog6:btn1()
	self:quit()
	izlom_pervert_dialog7()
end

function pervert_dialog6:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog7()
	local spwn = pervert_dialog7(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog7" (CUIScriptWnd)

function pervert_dialog7:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog7:__finalize() end

function pervert_dialog7:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog7.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog7:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog7:btn1()
	self:quit()
	izlom_pervert_dialog8()
end

function pervert_dialog7:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog8()
	local spwn = pervert_dialog8(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog8" (CUIScriptWnd)

function pervert_dialog8:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog8:__finalize() end

function pervert_dialog8:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog8.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog8:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog8:btn1()
	self:quit()
	izlom_pervert_dialog9()
end

function pervert_dialog8:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog9()
	local spwn = pervert_dialog9(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog9" (CUIScriptWnd)

function pervert_dialog9:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog9:__finalize() end

function pervert_dialog9:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog9.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog9:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog9:btn1()
	self:quit()
	izlom_pervert_dialog10()
end

function pervert_dialog9:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog10()
	local spwn = pervert_dialog10(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog10" (CUIScriptWnd)

function pervert_dialog10:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog10:__finalize() end

function pervert_dialog10:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog10.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog10:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog10:btn1()
	self:quit()
	izlom_pervert_dialog11()
end

function pervert_dialog10:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog11()
	local spwn = pervert_dialog11(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog11" (CUIScriptWnd)

function pervert_dialog11:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog11:__finalize() end

function pervert_dialog11:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog11.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog11:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog11:btn1()
	self:quit()
	db.actor:give_info_portion ("dar_izlom_drugs_task")
end

function pervert_dialog11:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog12()
	local spwn = pervert_dialog12(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog12" (CUIScriptWnd)

function pervert_dialog12:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog12:__finalize() end

function pervert_dialog12:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog12.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog12:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog12:btn1()
	self:quit()
	izlom_pervert_dialog13()
end

function pervert_dialog12:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog13()
	local spwn = pervert_dialog13(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog13" (CUIScriptWnd)

function pervert_dialog13:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog13:__finalize() end

function pervert_dialog13:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog13.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog13:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog13:btn1()
	self:quit()
	izlom_pervert_dialog14()
end

function pervert_dialog13:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog14()
	local spwn = pervert_dialog14(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog14" (CUIScriptWnd)

function pervert_dialog14:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog14:__finalize() end

function pervert_dialog14:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog14.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog14:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog14:btn1()
	self:quit()
	db.actor:give_info_portion ("izlom_anomaly_info")
	-- amk.remove_item_from_inventory(db.actor:object("izlom_drugs"),actor)
	addon.remove_items("izlom_drugs", 1)
end

function pervert_dialog14:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog15()
	local spwn = pervert_dialog15(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog15" (CUIScriptWnd)

function pervert_dialog15:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog15:__finalize() end

function pervert_dialog15:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog15.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function pervert_dialog15:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
end

function pervert_dialog15:btn1()
	self:quit()
	izlom_pervert_dialog16()
end

function pervert_dialog15:btn2()
	self:quit()
	izlom_pervert_dialog17()
end

function pervert_dialog15:btn3()
	self:quit()
end

function pervert_dialog15:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog16()
	local spwn = pervert_dialog16(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog16" (CUIScriptWnd)

function pervert_dialog16:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog16:__finalize() end

function pervert_dialog16:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog16.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)

	-- определяем доступность кнопки
	if (addon_utils.get_object_number(db.actor, "mutant_dog_tail") >= 5) then
		self.btn_1:Enable(true)
	end
	if (addon_utils.get_object_number(db.actor, "mutant_rat_corp") >= 10) then
		self.btn_2:Enable(true)
	end
	if (addon_utils.get_object_number(db.actor, "mutant_boar_leg") >= 3) then
		self.btn_3:Enable(true)
	end
	if (addon_utils.get_object_number(db.actor, "mutant_flesh_eye") >= 4) then
		self.btn_4:Enable(true)
	end
	self.btn_5:Enable(true)
end

function pervert_dialog16:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
end

function pervert_dialog16:btn1()
	self:quit()
	addon.remove_items("mutant_dog_tail", 5)
	addon_dialogs.izlom_art_random1()
	izlom_pervert_dialog15()
end

function pervert_dialog16:btn2()
	self:quit()
	addon.remove_items("mutant_rat_corp", 10)
	addon_dialogs.izlom_art_random2()
	izlom_pervert_dialog15()
end

function pervert_dialog16:btn3()
	self:quit()
	addon.remove_items("mutant_boar_leg", 3)
	addon_dialogs.izlom_art_random3()
	izlom_pervert_dialog15()
end

function pervert_dialog16:btn4()
	self:quit()
	addon.remove_items("mutant_flesh_eye", 4)
	addon_dialogs.izlom_art_random4()
	izlom_pervert_dialog15()
end

function pervert_dialog16:btn5()
	self:quit()
	izlom_pervert_dialog15()
end

function pervert_dialog16:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function izlom_pervert_dialog17()
	local spwn = pervert_dialog17(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pervert_dialog17" (CUIScriptWnd)

function pervert_dialog17:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pervert_dialog17:__finalize() end

function pervert_dialog17:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("izlom\\pervert_dialog17.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pervert_dialog17:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pervert_dialog17:btn1()
	self:quit()
	izlom_pervert_dialog15()
end

function pervert_dialog17:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------




-- Монитор у грибницы, Х-18 -----------------------------------------------------------------------------------------------------------------------
function mashroom_ekran_interface()
	local spwn = mashroom_ekran1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mashroom_ekran1" (CUIScriptWnd)

function mashroom_ekran1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mashroom_ekran1:__finalize() end

function mashroom_ekran1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\mashroom_ekran1.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function mashroom_ekran1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mashroom_ekran1:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	mashroom_ekran_temperature()
end

function mashroom_ekran1:btn2()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	mashroom_ekran_pressure()
end

function mashroom_ekran1:btn3()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	mashroom_ekran_radiation()
end

function mashroom_ekran1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function mashroom_ekran_temperature()
	local spwn = mashroom_ekran2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mashroom_ekran2" (CUIScriptWnd)

function mashroom_ekran2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mashroom_ekran2:__finalize() end

function mashroom_ekran2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\mashroom_ekran2.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function mashroom_ekran2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mashroom_ekran2:btn1()
	if db.actor:dont_has_info("x18_temperature_acess") then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_fail()
	elseif ( has_alife_info("x18_temperature_acess") and db.actor:dont_has_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		if db.actor:dont_has_info("x18_temperature_on") then
			db.actor:give_info_portion ("x18_temperature_on")
		end
	elseif ( has_alife_info("x18_temperature_acess") and has_alife_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_wait()
	end
end

function mashroom_ekran2:btn2()
	if db.actor:dont_has_info("x18_temperature_acess") then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_fail()
	elseif ( has_alife_info("x18_temperature_acess") and db.actor:dont_has_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		db.actor:disable_info_portion("x18_temperature_on")
	elseif ( has_alife_info("x18_temperature_acess") and has_alife_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_wait()
	end
end

function mashroom_ekran2:btn3()
	self:on_quit()
	-- addon.actor_disable_inventory()
	soundtrack.beep1()
	mashroom_ekran_interface()
end

function mashroom_ekran2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function mashroom_ekran_pressure()
	local spwn = mashroom_ekran3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mashroom_ekran3" (CUIScriptWnd)

function mashroom_ekran3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mashroom_ekran3:__finalize() end

function mashroom_ekran3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\mashroom_ekran3.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function mashroom_ekran3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mashroom_ekran3:btn1()
	if db.actor:dont_has_info("x18_pressure_acess") then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_fail()
	elseif ( has_alife_info("x18_pressure_acess") and db.actor:dont_has_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		if db.actor:dont_has_info("x18_pressure_on") then
			db.actor:give_info_portion ("x18_pressure_on")
		end
	elseif ( has_alife_info("x18_pressure_acess") and has_alife_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_wait()
	end
end

function mashroom_ekran3:btn2()
	if db.actor:dont_has_info("x18_pressure_acess") then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_fail()
	elseif ( has_alife_info("x18_pressure_acess") and db.actor:dont_has_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		db.actor:disable_info_portion("x18_pressure_on")
	elseif ( has_alife_info("x18_pressure_acess") and has_alife_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_wait()
	end
end

function mashroom_ekran3:btn3()
	self:on_quit()
	soundtrack.beep1()
	mashroom_ekran_interface()
end

function mashroom_ekran3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function mashroom_ekran_radiation()
	local spwn = mashroom_ekran4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mashroom_ekran4" (CUIScriptWnd)

function mashroom_ekran4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mashroom_ekran4:__finalize() end

function mashroom_ekran4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\mashroom_ekran4.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function mashroom_ekran4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mashroom_ekran4:btn1()
	if db.actor:dont_has_info("x18_radiation_acess") then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_fail()
	elseif ( has_alife_info("x18_radiation_acess") and db.actor:dont_has_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		if db.actor:dont_has_info("x18_radiation_on") then
			db.actor:give_info_portion ("x18_radiation_on")
		end
	elseif ( has_alife_info("x18_radiation_acess") and has_alife_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_wait()
	end
end

function mashroom_ekran4:btn2()
	if db.actor:dont_has_info("x18_radiation_acess") then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_fail()
	elseif ( has_alife_info("x18_radiation_acess") and db.actor:dont_has_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		db.actor:disable_info_portion("x18_radiation_on")
	elseif ( has_alife_info("x18_radiation_acess") and has_alife_info("x18_mashroom_sucess") ) then
		self:on_quit()
		soundtrack.beep1()
		mashroom_ekran_wait()
	end
end

function mashroom_ekran4:btn3()
	self:on_quit()
	soundtrack.beep1()
	mashroom_ekran_interface()
end

function mashroom_ekran4:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function mashroom_ekran_fail()
	local spwn = mashroom_fail(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mashroom_fail" (CUIScriptWnd)

function mashroom_fail:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mashroom_fail:__finalize() end

function mashroom_fail:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\mashroom_fail.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function mashroom_fail:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mashroom_fail:btn1()
	self:on_quit()
	soundtrack.beep1()
	mashroom_ekran_interface()
end

function mashroom_fail:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function mashroom_ekran_wait()
	local spwn = mashroom_wait(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mashroom_wait" (CUIScriptWnd)

function mashroom_wait:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mashroom_wait:__finalize() end

function mashroom_wait:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\mashroom_wait.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function mashroom_wait:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mashroom_wait:btn1()
	self:on_quit()
	soundtrack.beep1()
	mashroom_ekran_interface()
end

function mashroom_wait:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------


-- Биборан --------------------------------------------------------------------------------------------------------------------------------
function biboran_use1()
	local spwn = biboran_list1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "biboran_list1" (CUIScriptWnd)

function biboran_list1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function biboran_list1:__finalize() end

function biboran_list1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("books\\biboran_list1.xml")

	-- текстура
	xml:InitStatic("book_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function biboran_list1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function biboran_list1:btn1()
	self:on_quit()
	soundtrack.shelest()
	
end

function biboran_list1:btn2()
	self:on_quit()
	soundtrack.shelest()
	biboran_use2()
end

function biboran_list1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function biboran_use2()
	local spwn = biboran_list2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "biboran_list2" (CUIScriptWnd)

function biboran_list2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function biboran_list2:__finalize() end

function biboran_list2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("books\\biboran_list2.xml")

	-- текстура
	xml:InitStatic("book_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function biboran_list2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function biboran_list2:btn1()
	self:on_quit()
	soundtrack.shelest()
	biboran_use1()
end

function biboran_list2:btn2()
	self:on_quit()
	soundtrack.shelest()
	biboran_use3()
end

function biboran_list2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function biboran_use3()
	local spwn = biboran_list3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "biboran_list3" (CUIScriptWnd)

function biboran_list3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function biboran_list3:__finalize() end

function biboran_list3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("books\\biboran_list3.xml")

	-- текстура
	xml:InitStatic("book_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function biboran_list3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function biboran_list3:btn1()
	self:on_quit()
	soundtrack.shelest()
	biboran_use2()
end

function biboran_list3:btn2()
	self:on_quit()
	soundtrack.shelest()
	biboran_use4()
end

function biboran_list3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function biboran_use4()
	local spwn = biboran_list4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "biboran_list4" (CUIScriptWnd)

function biboran_list4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function biboran_list4:__finalize() end

function biboran_list4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("books\\biboran_list4.xml")

	-- текстура
	xml:InitStatic("book_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function biboran_list4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function biboran_list4:btn1()
	self:on_quit()
	soundtrack.shelest()
	biboran_use3()
end

function biboran_list4:btn2()
	self:on_quit()
	soundtrack.shelest()
	biboran_use5()
end

function biboran_list4:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function biboran_use5()
	local spwn = biboran_list5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "biboran_list5" (CUIScriptWnd)

function biboran_list5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function biboran_list5:__finalize() end

function biboran_list5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("books\\biboran_list5.xml")

	-- текстура
	xml:InitStatic("book_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function biboran_list5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function biboran_list5:btn1()
	self:on_quit()
	soundtrack.shelest()
	biboran_use4()
end

function biboran_list5:btn2()
	self:on_quit()
	soundtrack.shelest()
	biboran_use6()
end

function biboran_list5:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function biboran_use6()
	local spwn = biboran_list6(get_hud())
	level.start_stop_menu(spwn,true)
end

class "biboran_list6" (CUIScriptWnd)

function biboran_list6:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function biboran_list6:__finalize() end

function biboran_list6:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("books\\biboran_list6.xml")

	-- текстура
	xml:InitStatic("book_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function biboran_list6:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function biboran_list6:btn1()
	self:on_quit()
	soundtrack.shelest()
	biboran_use5()
end

function biboran_list6:btn2()
	self:on_quit()
	soundtrack.shelest()
	
end

function biboran_list6:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

-- Архивный журнал Х-18 -----------------------------------------------------------------------------------------------
function x18archive_journal_interface()
	local spwn = x18archive_journal(get_hud())
	level.start_stop_menu(spwn,true)
end

class "x18archive_journal" (CUIScriptWnd)

function x18archive_journal:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function x18archive_journal:__finalize() end

function x18archive_journal:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("books\\x18archive_journal.xml")

	-- текстура
	xml:InitStatic("book_text", self)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
end

function x18archive_journal:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function x18archive_journal:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
		if db.actor:dont_has_info("x18archive_journal_info") then
		db.actor:give_info_portion ("x18archive_journal_info")
		end	
end
-----------------------------------------------------------------------------------------------

function x18oficer_lock_interface()
	local spwn = x18oficer_lock(get_hud())
	level.start_stop_menu(spwn,true)
end

class "x18oficer_lock" (CUIScriptWnd)

function x18oficer_lock:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function x18oficer_lock:__finalize() end

function x18oficer_lock:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\x18oficer_lock.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("text", self)
	xml:InitStatic("text2", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
	self.btn_5:Enable(true)
end

function x18oficer_lock:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function x18oficer_lock:btn1()
	-- self:on_quit()
	if has_alife_info("x18oficer_lock1_on") then
		soundtrack.beep1()
	-- elseif db.actor:dont_has_info("x18oficer_lock1_on") then
	--	soundtrack.beep2()
	end
end

function x18oficer_lock:btn2()
	-- self:on_quit()
	if has_alife_info("x18oficer_lock2_on") then
		soundtrack.beep1()
	-- elseif db.actor:dont_has_info("x18oficer_lock2_on") then
	--	soundtrack.beep2()
	end
end

function x18oficer_lock:btn3()
	-- self:on_quit()
	if has_alife_info("x18oficer_lock3_on") then
		soundtrack.beep1()
	-- elseif db.actor:dont_has_info("x18oficer_lock3_on") then
	--	soundtrack.beep2()
	end
end

function x18oficer_lock:btn4()
	-- self:on_quit()
	if has_alife_info("x18oficer_lock4_on") then
		soundtrack.beep1()
	-- elseif db.actor:dont_has_info("x18oficer_lock4_on") then
	--	soundtrack.beep2()
	end
end

function x18oficer_lock:btn5()
	if ( has_alife_info("x18oficer_lock1_on") and has_alife_info("x18oficer_lock2_on") and has_alife_info("x18oficer_lock3_on") and has_alife_info("x18oficer_lock4_on") ) then
		self:on_quit()
		soundtrack.switch()
		db.actor:give_info_portion ("x18_oficer_door_open")
	elseif ( db.actor:dont_has_info("x18oficer_lock1_on") and db.actor:dont_has_info("x18oficer_lock2_on") and db.actor:dont_has_info("x18oficer_lock3_on") and db.actor:dont_has_info("x18oficer_lock4_on") and not inventory.belt["dielectric_glove"] ) then
		self:on_quit()
		xr_effects.actor_hard_electroshock()
		db.actor:disable_info_portion("x18oficer_lock1_on")
		db.actor:disable_info_portion("x18oficer_lock2_on")
		db.actor:disable_info_portion("x18oficer_lock3_on")
		db.actor:disable_info_portion("x18oficer_lock4_on")
	elseif ( db.actor:dont_has_info("x18oficer_lock1_on") and db.actor:dont_has_info("x18oficer_lock2_on") and db.actor:dont_has_info("x18oficer_lock3_on") and db.actor:dont_has_info("x18oficer_lock4_on") and inventory.belt["dielectric_glove"] ) then
		self:on_quit()
		xr_effects.actor_light_electroshock()
		db.actor:disable_info_portion("x18oficer_lock1_on")
		db.actor:disable_info_portion("x18oficer_lock2_on")
		db.actor:disable_info_portion("x18oficer_lock3_on")
		db.actor:disable_info_portion("x18oficer_lock4_on")
	end
end

function x18oficer_lock:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------


-- Монитор у насосов, Х-18 -----------------------------------------------------------------------------------------------------------------------
function pumps_ekran_interface()
	local spwn = pumps_ekran1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pumps_ekran1" (CUIScriptWnd)

function pumps_ekran1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pumps_ekran1:__finalize() end

function pumps_ekran1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\pumps_ekran1.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
end

function pumps_ekran1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function pumps_ekran1:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	if has_alife_info("x18_electric_acess") then
	pumps_ekran_electric1()
	elseif db.actor:dont_has_info("x18_electric_acess") then
	pumps_ekran_error1()
	end
end

function pumps_ekran1:btn2()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	if has_alife_info("x18_gidro_acess") then
	pumps_ekran_gidro()
	elseif db.actor:dont_has_info("x18_gidro_acess") then
	pumps_ekran_error2()
	end
end

function pumps_ekran1:btn3()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	if has_alife_info("x18_others_acess") then
	pumps_ekran_others()
	elseif db.actor:dont_has_info("x18_others_acess") then
	pumps_ekran_error3()
	end
end

function pumps_ekran1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function pumps_ekran_error1()
	local spwn = pumps_error1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pumps_error1" (CUIScriptWnd)

function pumps_error1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pumps_error1:__finalize() end

function pumps_error1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\pumps_error1.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pumps_error1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function pumps_error1:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	pumps_ekran_interface()
end

function pumps_error1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function pumps_ekran_error2()
	local spwn = pumps_error2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pumps_error2" (CUIScriptWnd)

function pumps_error2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pumps_error2:__finalize() end

function pumps_error2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\pumps_error2.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pumps_error2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function pumps_error2:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	pumps_ekran_interface()
end

function pumps_error2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function pumps_ekran_error3()
	local spwn = pumps_error3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pumps_error3" (CUIScriptWnd)

function pumps_error3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pumps_error3:__finalize() end

function pumps_error3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\pumps_error3.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pumps_error3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function pumps_error3:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	pumps_ekran_interface()
end

function pumps_error3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------


function pumps_ekran_electric1()
	local spwn = x18_ekran_electric1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "x18_ekran_electric1" (CUIScriptWnd)

function x18_ekran_electric1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function x18_ekran_electric1:__finalize() end

function x18_ekran_electric1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\x18_ekran_electric1.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function x18_ekran_electric1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function x18_ekran_electric1:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	pumps_ekran_electric2()
end

function x18_ekran_electric1:btn2()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	pumps_ekran_interface()
end

function x18_ekran_electric1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function pumps_ekran_electric2()
	local spwn = x18_ekran_electric2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "x18_ekran_electric2" (CUIScriptWnd)

function x18_ekran_electric2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function x18_ekran_electric2:__finalize() end

function x18_ekran_electric2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\x18_ekran_electric2.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function x18_ekran_electric2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function x18_ekran_electric2:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	if db.actor:dont_has_info("x18_electro_scheme") then
		db.actor:give_info_portion ("x18_electro_scheme")
		news_manager.send_tip(db.actor, "x18_electro_scheme_tip", nil, "anomal", 5000, nil)
	end
end

function x18_ekran_electric2:btn2()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	pumps_ekran_interface()
end

function x18_ekran_electric2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function pumps_ekran_gidro()
	local spwn = x18_ekran_gidro(get_hud())
	level.start_stop_menu(spwn,true)
end

class "x18_ekran_gidro" (CUIScriptWnd)

function x18_ekran_gidro:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function x18_ekran_gidro:__finalize() end

function x18_ekran_gidro:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\x18_ekran_gidro.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
	self.btn_3:Enable(true)
	self.btn_4:Enable(true)
end

function x18_ekran_gidro:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function x18_ekran_gidro:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	if db.actor:dont_has_info("x18_tubezone1work") then
		db.actor:give_info_portion ("x18_tubezone1work")
	end
end

function x18_ekran_gidro:btn2()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	if db.actor:dont_has_info("x18_tubezone2work") then
		db.actor:give_info_portion ("x18_tubezone2work")
	end
end

function x18_ekran_gidro:btn3()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	if db.actor:dont_has_info("x18_tubezone3work") then
		db.actor:give_info_portion ("x18_tubezone3work")
	end
end

function x18_ekran_gidro:btn4()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	pumps_ekran_interface()
end

function x18_ekran_gidro:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function pumps_ekran_others()
	local spwn = x18_ekran_others(get_hud())
	level.start_stop_menu(spwn,true)
end

class "x18_ekran_others" (CUIScriptWnd)

function x18_ekran_others:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function x18_ekran_others:__finalize() end

function x18_ekran_others:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\x18_ekran_others.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function x18_ekran_others:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function x18_ekran_others:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	
end

function x18_ekran_others:btn4()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	pumps_ekran_interface()
end

function x18_ekran_others:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

-- Магнитофон ---------------------------------------------------------------------------------------

function magnitofon_interface()
	local spwn = script_magnitofon(get_hud())
	level.start_stop_menu(spwn,true)
end

class "script_magnitofon" (CUIScriptWnd)

function script_magnitofon:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function script_magnitofon:__finalize() end

function script_magnitofon:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("script_magnitofon.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:object("casette_1") ~= nil then
		self.btn_1:Enable(true)
	end
	if db.actor:object("casette_2") ~= nil then
		self.btn_2:Enable(true)
	end
	if db.actor:object("casette_3") ~= nil then
		self.btn_3:Enable(true)
	end
	if db.actor:object("casette_4") ~= nil then
		self.btn_4:Enable(true)
	end
	if db.actor:object("casette_5") ~= nil then
		self.btn_5:Enable(true)
	end
	if db.actor:object("casette_6") ~= nil then
		self.btn_6:Enable(true)
	end
	if db.actor:object("casette_7") ~= nil then
		self.btn_7:Enable(true)
	end
	if db.actor:object("casette_8") ~= nil then
		self.btn_8:Enable(true)
	end
	if db.actor:object("casette_9") ~= nil then
		self.btn_9:Enable(true)
	end
	if db.actor:object("casette_10") ~= nil then
		self.btn_10:Enable(true)
	end
end

function script_magnitofon:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function script_magnitofon:btn1()
	self:on_quit()
	alife():create('script_magnitofon', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	alife():create('script_magnitofon_point1', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	addon.remove_items("magnitofon_portable", 1)
	addon.actor_disable_inventory()
end

function script_magnitofon:btn2()
	self:on_quit()
	alife():create('script_magnitofon', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	alife():create('script_magnitofon_point2', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	addon.remove_items("magnitofon_portable", 1)
	addon.actor_disable_inventory()
end

function script_magnitofon:btn3()
	self:on_quit()
	alife():create('script_magnitofon', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	alife():create('script_magnitofon_point3', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	addon.remove_items("magnitofon_portable", 1)
	addon.actor_disable_inventory()
end

function script_magnitofon:btn4()
	self:on_quit()
	alife():create('script_magnitofon', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	alife():create('script_magnitofon_point4', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	addon.remove_items("magnitofon_portable", 1)
	addon.actor_disable_inventory()
end

function script_magnitofon:btn5()
	self:on_quit()
	alife():create('script_magnitofon', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	alife():create('script_magnitofon_point5', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	addon.remove_items("magnitofon_portable", 1)
	addon.actor_disable_inventory()
end

function script_magnitofon:btn6()
	self:on_quit()
	alife():create('script_magnitofon', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	alife():create('script_magnitofon_point6', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	addon.remove_items("magnitofon_portable", 1)
	addon.actor_disable_inventory()
end

function script_magnitofon:btn7()
	self:on_quit()
	alife():create('script_magnitofon', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	alife():create('script_magnitofon_point7', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	addon.remove_items("magnitofon_portable", 1)
	addon.actor_disable_inventory()
end

function script_magnitofon:btn8()
	self:on_quit()
	alife():create('script_magnitofon', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	alife():create('script_magnitofon_point8', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	addon.remove_items("magnitofon_portable", 1)
	addon.actor_disable_inventory()
end

function script_magnitofon:btn9()
	self:on_quit()
	alife():create('script_magnitofon', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	alife():create('script_magnitofon_point9', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	addon.remove_items("magnitofon_portable", 1)
	addon.actor_disable_inventory()
end

function script_magnitofon:btn10()
	self:on_quit()
	alife():create('script_magnitofon', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	alife():create('script_magnitofon_point10', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
	addon.remove_items("magnitofon_portable", 1)
	addon.actor_disable_inventory()
end

function script_magnitofon:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------



-- Рация в Баре: ---------------------------------------------------------------------------------------

function bar_raciya_start()
	local spwn = bar_raciya1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "bar_raciya1" (CUIScriptWnd)

function bar_raciya1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function bar_raciya1:__finalize() end

function bar_raciya1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("bar_raciya\\bar_raciya1.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function bar_raciya1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function bar_raciya1:btn1()
	self:on_quit()
	bar_raciya_p2()
	soundtrack.raciya_sound()
end

function bar_raciya1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function bar_raciya_p2()
	local spwn = bar_raciya2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "bar_raciya2" (CUIScriptWnd)

function bar_raciya2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function bar_raciya2:__finalize() end

function bar_raciya2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("bar_raciya\\bar_raciya2.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function bar_raciya2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function bar_raciya2:btn1()
	self:on_quit()
	bar_raciya_p3()
	soundtrack.raciya_sound()
end

function bar_raciya2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function bar_raciya_p3()
	local spwn = bar_raciya3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "bar_raciya3" (CUIScriptWnd)

function bar_raciya3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function bar_raciya3:__finalize() end

function bar_raciya3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("bar_raciya\\bar_raciya3.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function bar_raciya3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function bar_raciya3:btn1()
	self:on_quit()
	bar_raciya_p4()
	soundtrack.raciya_sound()
end

function bar_raciya3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function bar_raciya_p4()
	local spwn = bar_raciya4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "bar_raciya4" (CUIScriptWnd)

function bar_raciya4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function bar_raciya4:__finalize() end

function bar_raciya4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("bar_raciya\\bar_raciya4.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function bar_raciya4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function bar_raciya4:btn1()
	self:on_quit()
	bar_raciya_p5()
	soundtrack.raciya_sound()
end

function bar_raciya4:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function bar_raciya_p5()
	local spwn = bar_raciya5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "bar_raciya5" (CUIScriptWnd)

function bar_raciya5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function bar_raciya5:__finalize() end

function bar_raciya5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("bar_raciya\\bar_raciya5.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function bar_raciya5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function bar_raciya5:btn1()
	self:on_quit()
	soundtrack.raciya_sound()
	db.actor:give_info_portion ("bar_infection_info")
	addon_dialogs.bar_raciya_connect_off()
	addon.actor_disable_inventory()
	addon.actor_disable_inventory()
end

function bar_raciya5:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------


-- Карлик -----------------------------------------------------------------------------------------------------------------------------------------
function bar_karlik_dialog1()
	local spwn = karlik_dialog1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "karlik_dialog1" (CUIScriptWnd)

function karlik_dialog1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function karlik_dialog1:__finalize() end

function karlik_dialog1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("karlik\\karlik_dialog1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("karlik_name", self)
	xml:InitStatic("karlik_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function karlik_dialog1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function karlik_dialog1:btn1()
	self:quit()
	
end

function karlik_dialog1:btn2()
	self:quit()
	
end

function karlik_dialog1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

-- Барокамера в Х-18 ---------------------------------------------------------------------------------------

function x18doctors_barocamera_use()
	local spwn = x18barocamera(get_hud())
	level.start_stop_menu(spwn,true)
end

class "x18barocamera" (CUIScriptWnd)

function x18barocamera:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function x18barocamera:__finalize() end

function x18barocamera:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("x18barocamera.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:object("kapsula_1") ~= nil then
		self.btn_1:Enable(true)
	end
	if db.actor:object("kapsula_2") ~= nil then
		self.btn_2:Enable(true)
	end
	if db.actor:object("kapsula_3") ~= nil then
		self.btn_3:Enable(true)
	end
	if ( has_alife_info("x18_barocam_phase1") and has_alife_info("x18_barocam_phase2") and has_alife_info("x18_barocam_phase3") ) then
		self.btn_4:Enable(true)
	end

end

function x18barocamera:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function x18barocamera:btn1()
	-- self:on_quit()
	amk.remove_item(db.actor:object("kapsula_1"))
	db.actor:give_info_portion ("x18_barocam_phase1")
	soundtrack.beep1()
end

function x18barocamera:btn2()
	-- self:on_quit()
	amk.remove_item(db.actor:object("kapsula_2"))
	db.actor:give_info_portion ("x18_barocam_phase2")
	soundtrack.beep1()
end

function x18barocamera:btn3()
	-- self:on_quit()
	amk.remove_item(db.actor:object("kapsula_3"))
	db.actor:give_info_portion ("x18_barocam_phase3")
	soundtrack.beep1()
end

function x18barocamera:btn4()
	self:on_quit()
	db.actor:give_info_portion ("x18_doctors_barocamera_off")
	
end

function x18barocamera:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------



-- Бюст Ленина на Ростке ---------------------------------------------------------------------------------------

function ros_lenin_bust_use_interface()
	local spwn = lenin_bust_interface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "lenin_bust_interface" (CUIScriptWnd)

function lenin_bust_interface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function lenin_bust_interface:__finalize() end

function lenin_bust_interface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("lenin_bust_interface.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
		self.btn_1:Enable(true)
		self.btn_2:Enable(true)

end

function lenin_bust_interface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function lenin_bust_interface:btn1()
	self:on_quit()
	db.actor:give_info_portion ("spawn_ros_master")
	db.actor:give_info_portion ("lenin_bust_gathered")
	alife():create('lenin_bust', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function lenin_bust_interface:btn2()
	self:on_quit()
	db.actor:give_info_portion ("spawn_ros_master")
	db.actor:give_info_portion ("lenin_bust_destroyed")
	alife():create("af_lamp", vector():set (-214.54,3.39,101.84), 27454, 1368)
end

function lenin_bust_interface:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

-- Листок с Интернационалом -----------------------------------------------------------------------------------------------
function ros_international_interface()
	local spwn = international(get_hud())
	level.start_stop_menu(spwn,true)
end

class "international" (CUIScriptWnd)

function international:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function international:__finalize() end

function international:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("books\\international.xml")

	-- текстура
	xml:InitStatic("book_text", self)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
end

function international:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function international:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

-- Замок на воротах на Ростке ---------------------------------------------------------------------------------------

function ros_gate_zamok_interface()
	local spwn = ros_zamok_interface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "ros_zamok_interface" (CUIScriptWnd)

function ros_zamok_interface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function ros_zamok_interface:__finalize() end

function ros_zamok_interface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("ros_zamok_interface.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:object("ros_gate_key") ~= nil then
		self.btn_1:Enable(true)
	end
	if db.actor:object("ros_acid_bottle") ~= nil then
		self.btn_2:Enable(true)
	end

end

function ros_zamok_interface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function ros_zamok_interface:btn1()
	self:on_quit()
	addon.remove_items("ros_gate_key", 1)
	soundtrack.open_box()
	db.actor:give_info_portion("ros_tunnel_acess")
end

function ros_zamok_interface:btn2()
	self:on_quit()
	addon.remove_items("ros_acid_bottle", 1)
	soundtrack.acid_atack()
	db.actor:give_info_portion("ros_tunnel_acess")
end

function ros_zamok_interface:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

-- Реанимируем чуваков без сознания: ---------------------------------------------------------------------------------------

function faint_npc_use_interface_start()
	local spwn = faint_npc_interface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "faint_npc_interface" (CUIScriptWnd)

function faint_npc_interface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function faint_npc_interface:__finalize() end

function faint_npc_interface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("faint_npc_interface.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("reanimation_picture", self)
	xml:InitStatic("name", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	--self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:object("vint") ~= nil then
		self.btn_1:Enable(true)
	end
	self.btn_2:Enable(true)
	
end

function faint_npc_interface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function faint_npc_interface:btn1()
	self:on_quit()
	addon.remove_items("vint", 1)
	addon_dialogs.faint_npcs_reanimation()
	soundtrack.faint_npc_reanimation_snd()
end

function faint_npc_interface:btn2()
	self:on_quit()
	addon_dialogs.faint_npcs_finish()
	soundtrack.faint_npc_finish_snd()
end

function faint_npc_interface:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

-- Рация на Янтаре: ---------------------------------------------------------------------------------------

function yan_sold_raciya_start()
	local spwn = yan_sold_raciya1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "yan_sold_raciya1" (CUIScriptWnd)

function yan_sold_raciya1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function yan_sold_raciya1:__finalize() end

function yan_sold_raciya1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("yan_sold_raciya\\yan_sold_raciya1.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function yan_sold_raciya1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function yan_sold_raciya1:btn1()
	self:on_quit()
	yan_sold_raciya_p2()
	soundtrack.raciya_sound()
end

function yan_sold_raciya1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------

function yan_sold_raciya_p2()
	local spwn = yan_sold_raciya2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "yan_sold_raciya2" (CUIScriptWnd)

function yan_sold_raciya2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function yan_sold_raciya2:__finalize() end

function yan_sold_raciya2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("yan_sold_raciya\\yan_sold_raciya2.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function yan_sold_raciya2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function yan_sold_raciya2:btn1()
	self:on_quit()
	yan_sold_raciya_p3()
	soundtrack.raciya_sound()
end

function yan_sold_raciya2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------

function yan_sold_raciya_p3()
	local spwn = yan_sold_raciya3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "yan_sold_raciya3" (CUIScriptWnd)

function yan_sold_raciya3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function yan_sold_raciya3:__finalize() end

function yan_sold_raciya3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("yan_sold_raciya\\yan_sold_raciya3.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function yan_sold_raciya3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function yan_sold_raciya3:btn1()
	self:on_quit()
	yan_sold_raciya_p4()
	soundtrack.raciya_sound()
end

function yan_sold_raciya3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------

function yan_sold_raciya_p4()
	local spwn = yan_sold_raciya4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "yan_sold_raciya4" (CUIScriptWnd)

function yan_sold_raciya4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function yan_sold_raciya4:__finalize() end

function yan_sold_raciya4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("yan_sold_raciya\\yan_sold_raciya4.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function yan_sold_raciya4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function yan_sold_raciya4:btn1()
	self:on_quit()
	db.actor:give_info_portion ("yan_sold_raciya_info")
	addon.actor_disable_inventory()
	soundtrack.raciya_sound()
end

function yan_sold_raciya4:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end




-- Бюреры: -----------------------------------------------------------------------------------------------------------------------------------------
function burer_king_dialog1()
	local spwn = king_dialog1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog1" (CUIScriptWnd)

function king_dialog1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog1:__finalize() end

function king_dialog1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function king_dialog1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function king_dialog1:btn1()
	self:quit()
	burer_king_dialog2()
	soundtrack.burers_talking()
end

function king_dialog1:btn2()
	self:quit()
	soundtrack.burer_king_punish()
	
	addon.actor_disable_inventory()
	
	level.disable_input()
	level.add_pp_effector("agr_u_fade.ppe", 2107, false)
	start_real_timer(6, "timer_actions.yan_burers_actor_punish_action")
end

function king_dialog1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_king_dialog2()
	local spwn = king_dialog2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog2" (CUIScriptWnd)

function king_dialog2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog2:__finalize() end

function king_dialog2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog2.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog2:btn1()
	self:quit()
	burer_king_dialog3()
	soundtrack.burers_talking()
end

function king_dialog2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_king_dialog3()
	local spwn = king_dialog3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog3" (CUIScriptWnd)

function king_dialog3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog3:__finalize() end

function king_dialog3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog3.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog3:btn1()
	self:quit()
	burer_king_dialog4()
	soundtrack.burers_talking()
end

function king_dialog3:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_king_dialog4()
	local spwn = king_dialog4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog4" (CUIScriptWnd)

function king_dialog4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog4:__finalize() end

function king_dialog4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog4.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog4:btn1()
	self:quit()
	burer_king_dialog5()
	soundtrack.burers_talking()
end

function king_dialog4:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_king_dialog5()
	local spwn = king_dialog5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog5" (CUIScriptWnd)

function king_dialog5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog5:__finalize() end

function king_dialog5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog5.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog5:btn1()
	self:quit()
	burer_king_dialog6()
	soundtrack.burers_talking()
end

function king_dialog5:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_king_dialog6()
	local spwn = king_dialog6(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog6" (CUIScriptWnd)

function king_dialog6:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog6:__finalize() end

function king_dialog6:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog6.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog6:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog6:btn1()
	self:quit()
	burer_king_dialog7()
	soundtrack.burers_talking()
end

function king_dialog6:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_king_dialog7()
	local spwn = king_dialog7(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog7" (CUIScriptWnd)

function king_dialog7:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog7:__finalize() end

function king_dialog7:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog7.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog7:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog7:btn1()
	self:quit()
	burer_king_dialog8()
	soundtrack.burers_talking()
end

function king_dialog7:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_king_dialog8()
	local spwn = king_dialog8(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog8" (CUIScriptWnd)

function king_dialog8:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog8:__finalize() end

function king_dialog8:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog8.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog8:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog8:btn1()
	self:quit()
	burer_king_dialog9()
	soundtrack.burers_talking()
end

function king_dialog8:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_king_dialog9()
	local spwn = king_dialog9(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog9" (CUIScriptWnd)

function king_dialog9:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog9:__finalize() end

function king_dialog9:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog9.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog9:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog9:btn1()
	self:quit()
	burer_king_dialog10()
	soundtrack.burers_talking()
end

function king_dialog9:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_king_dialog10()
	local spwn = king_dialog10(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog10" (CUIScriptWnd)

function king_dialog10:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog10:__finalize() end

function king_dialog10:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog10.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog10:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog10:btn1()
	self:quit()
	db.actor:give_info_portion("yan_goto_lab")
	addon.actor_disable_inventory()
	addon_dialogs.spawn_yan_to_x16lchanger()
	soundtrack.burers_talking()
end

function king_dialog10:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------



function burer_king_dialog11()
	local spwn = king_dialog11(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog11" (CUIScriptWnd)

function king_dialog11:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog11:__finalize() end

function king_dialog11:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog11.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog11:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog11:btn1()
	self:quit()
	burer_king_dialog12()
	soundtrack.burers_talking()
end

function king_dialog11:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------
function burer_king_dialog12()
	local spwn = king_dialog12(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog12" (CUIScriptWnd)

function king_dialog12:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog12:__finalize() end

function king_dialog12:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog12.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog12:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog12:btn1()
	self:quit()
	burer_king_dialog13()
	soundtrack.burers_talking()
end

function king_dialog12:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_king_dialog13()
	local spwn = king_dialog13(get_hud())
	level.start_stop_menu(spwn,true)
end

class "king_dialog13" (CUIScriptWnd)

function king_dialog13:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function king_dialog13:__finalize() end

function king_dialog13:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\king_dialog13.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function king_dialog13:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function king_dialog13:btn1()
	self:quit()
	db.actor:give_info_portion ("x16_burers_atack")
	soundtrack.burers_talking()
end

function king_dialog13:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------



-- Бюрер-советник ------------------------------------------------------------------------------

function burer_adviser_dialog1()
	local spwn = adviser_dialog1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "adviser_dialog1" (CUIScriptWnd)

function adviser_dialog1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function adviser_dialog1:__finalize() end

function adviser_dialog1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\adviser_dialog1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function adviser_dialog1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function adviser_dialog1:btn1()
	self:quit()
	addon.actor_disable_inventory()
	db.actor:give_info_portion ("x16_adviser_walk1")
end

function adviser_dialog1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function burer_adviser_dialog2()
	local spwn = adviser_dialog2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "adviser_dialog2" (CUIScriptWnd)

function adviser_dialog2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function adviser_dialog2:__finalize() end

function adviser_dialog2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("burers\\adviser_dialog2.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("izlom_name", self)
	xml:InitStatic("izlom_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function adviser_dialog2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function adviser_dialog2:btn1()
	self:quit()
	addon.actor_disable_inventory()
	db.actor:give_info_portion ("x16_adviser_walk2")
end

function adviser_dialog2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


-- Записка Навуходоносора -----------------------------------------------------------------------------------------------
function mil_kazarma2zapiska_interface()
	local spwn = kazarma2zapiska(get_hud())
	level.start_stop_menu(spwn,true)
end

class "kazarma2zapiska" (CUIScriptWnd)

function kazarma2zapiska:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function kazarma2zapiska:__finalize() end

function kazarma2zapiska:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("books\\kazarma2zapiska.xml")

	-- текстура
	xml:InitStatic("book_text", self)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
end

function kazarma2zapiska:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function kazarma2zapiska:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


-- Рация на Милитари: ---------------------------------------------------------------------------------------

function mil_raciya_start()
	local spwn = mil_raciya1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mil_raciya1" (CUIScriptWnd)

function mil_raciya1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mil_raciya1:__finalize() end

function mil_raciya1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("mil_raciya\\mil_raciya1.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function mil_raciya1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mil_raciya1:btn1()
	self:on_quit()
	mil_raciya_a1()
	soundtrack.raciya_sound()
end

function mil_raciya1:btn2()
	self:on_quit()
	mil_raciya_b1()
	soundtrack.raciya_sound()
end

function mil_raciya1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------

function mil_raciya_a1()
	local spwn = mil_raciyaa1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mil_raciyaa1" (CUIScriptWnd)

function mil_raciyaa1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mil_raciyaa1:__finalize() end

function mil_raciyaa1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("mil_raciya\\mil_raciyaa1.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function mil_raciyaa1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mil_raciyaa1:btn1()
	self:on_quit()
	mil_raciya_a2()
	soundtrack.raciya_sound()
end

function mil_raciyaa1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------

function mil_raciya_a2()
	local spwn = mil_raciyaa2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mil_raciyaa2" (CUIScriptWnd)

function mil_raciyaa2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mil_raciyaa2:__finalize() end

function mil_raciyaa2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("mil_raciya\\mil_raciyaa2.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function mil_raciyaa2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mil_raciyaa2:btn1()
	self:on_quit()
	mil_raciya_a3()
	soundtrack.raciya_sound()
end

function mil_raciyaa2:btn2()
	self:on_quit()
	mil_raciya_start()
	soundtrack.raciya_sound()
end

function mil_raciyaa2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------

function mil_raciya_a3()
	local spwn = mil_raciyaa3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mil_raciyaa3" (CUIScriptWnd)

function mil_raciyaa3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mil_raciyaa3:__finalize() end

function mil_raciyaa3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("mil_raciya\\mil_raciyaa3.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function mil_raciyaa3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mil_raciyaa3:btn1()
	self:on_quit()
	db.actor:give_info_portion ("mil_separ_acess")
	soundtrack.raciya_sound()
end

function mil_raciyaa3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------



function mil_raciya_b1()
	local spwn = mil_raciyab1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mil_raciyab1" (CUIScriptWnd)

function mil_raciyab1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mil_raciyab1:__finalize() end

function mil_raciyab1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("mil_raciya\\mil_raciyab1.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function mil_raciyab1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mil_raciyab1:btn1()
	self:on_quit()
	mil_raciya_b2()
	soundtrack.raciya_sound()
end

function mil_raciyab1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------

function mil_raciya_b2()
	local spwn = mil_raciyab2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mil_raciyab2" (CUIScriptWnd)

function mil_raciyab2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mil_raciyab2:__finalize() end

function mil_raciyab2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("mil_raciya\\mil_raciyab2.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function mil_raciyab2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mil_raciyab2:btn1()
	self:on_quit()
	mil_raciya_b3()
	soundtrack.raciya_sound()
end

function mil_raciyab2:btn2()
	self:on_quit()
	mil_raciya_start()
	soundtrack.raciya_sound()
end

function mil_raciyab2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------

function mil_raciya_b3()
	local spwn = mil_raciyab3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mil_raciyab3" (CUIScriptWnd)

function mil_raciyab3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mil_raciyab3:__finalize() end

function mil_raciyab3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("mil_raciya\\mil_raciyab3.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function mil_raciyab3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mil_raciyab3:btn1()
	self:on_quit()
	mil_raciya_b4()
	soundtrack.raciya_sound()
end

function mil_raciyab3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------

function mil_raciya_b4()
	local spwn = mil_raciyab4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "mil_raciyab4" (CUIScriptWnd)

function mil_raciyab4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function mil_raciyab4:__finalize() end

function mil_raciyab4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("mil_raciya\\mil_raciyab4.xml")

	-- текстура
	xml:InitStatic("radio_face", self)
	xml:InitStatic("radio_name", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("radio_talk_text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	-- self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function mil_raciyab4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function mil_raciyab4:btn1()
	self:on_quit()
	db.actor:give_info_portion ("mil_vsu_acess")
	soundtrack.raciya_sound()
end

function mil_raciyab4:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------


-- Разлагаем артефакты: ----------------------------------------------------------

function artefact_activation_start()
	local spwn = artefact_start(get_hud())
	level.start_stop_menu(spwn,true)
end

class "artefact_start" (CUIScriptWnd)

function artefact_start:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function artefact_start:__finalize() end

function artefact_start:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("artefact_activation\\artefact_start.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("image", self)
	xml:InitStatic("mini_image1", self)
	xml:InitStatic("mini_image2", self)
	xml:InitStatic("mini_image3", self)
	xml:InitStatic("mini_image4", self)
	xml:InitStatic("mini_image5", self)
	xml:InitStatic("mini_image6", self)
	xml:InitStatic("text1", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	--if ( db.actor:object("af_coal") ~= nil or db.actor:object("af_scale") ~= nil or	db.actor:object("af_bitum") ~= nil ) then
		self.btn_1:Enable(true)
	--end
	--if ( db.actor:object("af_ballast") ~= nil or db.actor:object("af_roll") ~= nil or db.actor:object("af_chicken_god") ~= nil ) then
		self.btn_2:Enable(true)
	--end
	--if ( db.actor:object("af_steel_nut") ~= nil or db.actor:object("af_bearing") ~= nil or db.actor:object("af_crown") ~= nil ) then
		self.btn_3:Enable(true)
	--end
	--if ( db.actor:object("af_frog") ~= nil or db.actor:object("af_chestnut") ~= nil or db.actor:object("af_sagebrush") ~= nil or db.actor:object("af_mushroom") ~= nil ) then
		self.btn_4:Enable(true)
	--end
	--if ( db.actor:object("af_glass") ~= nil or db.actor:object("af_teardrop") ~= nil or db.actor:object("af_lens") ~= nil ) then
		self.btn_5:Enable(true)
	--end
	--if ( db.actor:object("af_spiral") ~= nil or	db.actor:object("af_cristallic") ~= nil or db.actor:object("af_snail") ~= nil or db.actor:object("af_hole") ~= nil or db.actor:object("af_egg") ~= nil ) then
		self.btn_6:Enable(true)
	--end
end

function artefact_start:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function artefact_start:btn1()
	self:on_quit()
	artefacts_fire()
	soundtrack.artefacts_fire_sound()
end

function artefact_start:btn2()
	self:on_quit()
	artefacts_stone()
	soundtrack.artefacts_stone_sound()
end

function artefact_start:btn3()
	self:on_quit()
	artefacts_steel()
	soundtrack.artefacts_steel_sound()
end

function artefact_start:btn4()
	self:on_quit()
	artefacts_veget()
	soundtrack.artefacts_veget_sound()
end

function artefact_start:btn5()
	self:on_quit()
	artefacts_glass()
	soundtrack.artefacts_glass_sound()
end

function artefact_start:btn6()
	self:on_quit()
	artefacts_neutral()
	soundtrack.artefacts_neutral_sound()
end

function artefact_start:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------


function artefacts_fire()
	local spwn = artefact_fire(get_hud())
	level.start_stop_menu(spwn,true)
end

class "artefact_fire" (CUIScriptWnd)

function artefact_fire:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function artefact_fire:__finalize() end

function artefact_fire:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("artefact_activation\\artefact_fire.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("image", self)
	xml:InitStatic("text_general", self)
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:object("af_coal") ~= nil then
		self.btn_1:Enable(true)
	end
	if db.actor:object("af_scale") ~= nil then
		self.btn_2:Enable(true)
	end
	if db.actor:object("af_bitum") ~= nil then
		self.btn_3:Enable(true)
	end
	self.btn_4:Enable(true)
end

function artefact_fire:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function artefact_fire:btn1()
	self:on_quit()
	addon.remove_items("af_coal", 1)
	db.actor:give_info_portion ("arts_powerup_fire")
	start_real_timer(60, "timer_actions.arts_powerup_fire_action")
	start_real_timer(1, "timer_actions.fire_hit_action1")
	addon.actor_disable_inventory()
	db.actor:hide_weapon()
end

function artefact_fire:btn2()
	self:on_quit()
	addon.remove_items("af_scale", 1)
	db.actor:give_info_portion ("arts_powerup_fire")
	start_real_timer(120, "timer_actions.arts_powerup_fire_action")
	start_real_timer(1, "timer_actions.fire_hit_action1")
	addon.actor_disable_inventory()
	db.actor:hide_weapon()
end

function artefact_fire:btn3()
	self:on_quit()
	addon.remove_items("af_bitum", 1)
	db.actor:give_info_portion ("arts_powerup_fire")
	start_real_timer(180, "timer_actions.arts_powerup_fire_action")
	start_real_timer(1, "timer_actions.fire_hit_action1")
	addon.actor_disable_inventory()
	db.actor:hide_weapon()
end

function artefact_fire:btn4()
	self:on_quit()
	artefact_activation_start()
end

function artefact_fire:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------


function artefacts_stone()
	local spwn = artefact_stone(get_hud())
	level.start_stop_menu(spwn,true)
end

class "artefact_stone" (CUIScriptWnd)

function artefact_stone:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function artefact_stone:__finalize() end

function artefact_stone:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("artefact_activation\\artefact_stone.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("image", self)
	xml:InitStatic("text_general", self)
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:object("af_ballast") ~= nil then
		self.btn_1:Enable(true)
	end
	if db.actor:object("af_roll") ~= nil then
		self.btn_2:Enable(true)
	end
	if db.actor:object("af_chicken_god") ~= nil then
		self.btn_3:Enable(true)
	end
	self.btn_4:Enable(true)
end

function artefact_stone:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function artefact_stone:btn1()
	self:on_quit()
	addon.remove_items("af_ballast", 1)
	db.actor:give_info_portion ("arts_powerup_stone")
	start_real_timer(60, "timer_actions.arts_powerup_stone_action")
	addon.actor_disable_inventory()
end

function artefact_stone:btn2()
	self:on_quit()
	addon.remove_items("af_roll", 1)
	db.actor:give_info_portion ("arts_powerup_stone")
	start_real_timer(120, "timer_actions.arts_powerup_stone_action")
	addon.actor_disable_inventory()
end

function artefact_stone:btn3()
	self:on_quit()
	addon.remove_items("af_chicken_god", 1)
	db.actor:give_info_portion ("arts_powerup_stone")
	start_real_timer(180, "timer_actions.arts_powerup_stone_action")
	addon.actor_disable_inventory()
end

function artefact_stone:btn4()
	self:on_quit()
	artefact_activation_start()
end

function artefact_stone:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------


function artefacts_steel()
	local spwn = artefact_steel(get_hud())
	level.start_stop_menu(spwn,true)
end

class "artefact_steel" (CUIScriptWnd)

function artefact_steel:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function artefact_steel:__finalize() end

function artefact_steel:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("artefact_activation\\artefact_steel.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("image", self)
	xml:InitStatic("text_general", self)
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:object("af_steel_nut") ~= nil then
		self.btn_1:Enable(true)
	end
	if db.actor:object("af_bearing") ~= nil then
		self.btn_2:Enable(true)
	end
	if db.actor:object("af_crown") ~= nil then
		self.btn_3:Enable(true)
	end
	self.btn_4:Enable(true)
end

function artefact_steel:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function artefact_steel:btn1()
	self:on_quit()
	addon.remove_items("af_steel_nut", 1)
	db.actor:give_info_portion ("arts_powerup_steel")
	start_real_timer(60, "timer_actions.arts_powerup_steel_action")
	addon.actor_disable_inventory()
end

function artefact_steel:btn2()
	self:on_quit()
	addon.remove_items("af_bearing", 1)
	db.actor:give_info_portion ("arts_powerup_steel")
	start_real_timer(120, "timer_actions.arts_powerup_steel_action")
	addon.actor_disable_inventory()
end

function artefact_steel:btn3()
	self:on_quit()
	addon.remove_items("af_crown", 1)
	db.actor:give_info_portion ("arts_powerup_steel")
	start_real_timer(180, "timer_actions.arts_powerup_steel_action")
	addon.actor_disable_inventory()
end

function artefact_steel:btn4()
	self:on_quit()
	artefact_activation_start()
end

function artefact_steel:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------


function artefacts_veget()
	local spwn = artefact_veget(get_hud())
	level.start_stop_menu(spwn,true)
end

class "artefact_veget" (CUIScriptWnd)

function artefact_veget:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function artefact_veget:__finalize() end

function artefact_veget:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("artefact_activation\\artefact_veget.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("image", self)
	xml:InitStatic("text_general", self)
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)
	xml:InitStatic("text4", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:object("af_frog") ~= nil then
		self.btn_1:Enable(true)
	end
	if db.actor:object("af_chestnut") ~= nil then
		self.btn_2:Enable(true)
	end
	if db.actor:object("af_sagebrush") ~= nil then
		self.btn_3:Enable(true)
	end
	if db.actor:object("af_mushroom") ~= nil then
		self.btn_4:Enable(true)
	end
	self.btn_5:Enable(true)
end

function artefact_veget:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function artefact_veget:btn1()
	self:on_quit()
	addon.remove_items("af_frog", 1)
	db.actor:give_info_portion ("arts_powerup_veget")
	start_real_timer(60, "timer_actions.arts_powerup_veget_action")
	addon.actor_disable_inventory()
	addon.veget_arts_effect()
end

function artefact_veget:btn2()
	self:on_quit()
	addon.remove_items("af_chestnut", 1)
	db.actor:give_info_portion ("arts_powerup_veget")
	start_real_timer(120, "timer_actions.arts_powerup_veget_action")
	addon.actor_disable_inventory()
	addon.veget_arts_effect()
end

function artefact_veget:btn3()
	self:on_quit()
	addon.remove_items("af_sagebrush", 1)
	db.actor:give_info_portion ("arts_powerup_veget")
	start_real_timer(180, "timer_actions.arts_powerup_veget_action")
	addon.actor_disable_inventory()
	addon.veget_arts_effect()
end

function artefact_veget:btn4()
	self:on_quit()
	addon.remove_items("af_mushroom", 1)
	db.actor:give_info_portion ("arts_powerup_veget")
	start_real_timer(240, "timer_actions.arts_powerup_veget_action")
	addon.actor_disable_inventory()
	addon.veget_arts_effect()
end

function artefact_veget:btn5()
	self:on_quit()
	artefact_activation_start()
end

function artefact_veget:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------


function artefacts_glass()
	local spwn = artefact_glass(get_hud())
	level.start_stop_menu(spwn,true)
end

class "artefact_glass" (CUIScriptWnd)

function artefact_glass:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function artefact_glass:__finalize() end

function artefact_glass:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("artefact_activation\\artefact_glass.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("image", self)
	xml:InitStatic("text_general", self)
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:object("af_glass") ~= nil then
		self.btn_1:Enable(true)
	end
	if db.actor:object("af_teardrop") ~= nil then
		self.btn_2:Enable(true)
	end
	if db.actor:object("af_lens") ~= nil then
		self.btn_3:Enable(true)
	end
	self.btn_4:Enable(true)
end

function artefact_glass:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function artefact_glass:btn1()
	self:on_quit()
	addon.remove_items("af_glass", 1)
	db.actor:give_info_portion ("arts_powerup_glass")
	start_real_timer(60, "timer_actions.arts_powerup_glass_action", "arts_powerup_glass_timer")
	addon.actor_disable_inventory()
end

function artefact_glass:btn2()
	self:on_quit()
	addon.remove_items("af_teardrop", 1)
	db.actor:give_info_portion ("arts_powerup_glass")
	start_real_timer(120, "timer_actions.arts_powerup_glass_action", "arts_powerup_glass_timer")
	addon.actor_disable_inventory()
end

function artefact_glass:btn3()
	self:on_quit()
	addon.remove_items("af_lens", 1)
	db.actor:give_info_portion ("arts_powerup_glass")
	start_real_timer(180, "timer_actions.arts_powerup_glass_action", "arts_powerup_glass_timer")
	addon.actor_disable_inventory()
end

function artefact_glass:btn4()
	self:on_quit()
	artefact_activation_start()
end

function artefact_glass:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------


function artefacts_neutral()
	local spwn = artefact_neutral(get_hud())
	level.start_stop_menu(spwn,true)
end

class "artefact_neutral" (CUIScriptWnd)

function artefact_neutral:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function artefact_neutral:__finalize() end

function artefact_neutral:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("artefact_activation\\artefact_neutral.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("image", self)
	xml:InitStatic("text_general", self)
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)
	xml:InitStatic("text4", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:object("af_spiral") ~= nil then
		self.btn_1:Enable(true)
	end
	if db.actor:object("af_cristallic") ~= nil then
		self.btn_2:Enable(true)
	end
	if db.actor:object("af_snail") ~= nil then
		self.btn_3:Enable(true)
	end
	if db.actor:object("af_hole") ~= nil then
		self.btn_4:Enable(true)
	end
	self.btn_5:Enable(true)
end

function artefact_neutral:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function artefact_neutral:btn1()
	self:on_quit()
	addon.remove_items("af_spiral", 1)
	db.actor:give_info_portion ("arts_powerup_neutral")
	start_real_timer(60, "timer_actions.arts_powerup_neutral_action", "arts_powerup_neutral_timer")
	addon.actor_disable_inventory()
end

function artefact_neutral:btn2()
	self:on_quit()
	addon.remove_items("af_cristallic", 1)
	db.actor:give_info_portion ("arts_powerup_neutral")
	start_real_timer(120, "timer_actions.arts_powerup_neutral_action", "arts_powerup_neutral_timer")
	addon.actor_disable_inventory()
end

function artefact_neutral:btn3()
	self:on_quit()
	addon.remove_items("af_snail", 1)
	db.actor:give_info_portion ("arts_powerup_neutral")
	start_real_timer(180, "timer_actions.arts_powerup_neutral_action", "arts_powerup_neutral_timer")
	addon.actor_disable_inventory()
end

function artefact_neutral:btn4()
	self:on_quit()
	addon.remove_items("af_hole", 1)
	db.actor:give_info_portion ("arts_powerup_neutral")
	start_real_timer(240, "timer_actions.arts_powerup_neutral_action", "arts_powerup_neutral_timer")
	addon.actor_disable_inventory()
end

function artefact_neutral:btn5()
	self:on_quit()
	artefact_activation_start()
end

function artefact_neutral:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------


-- Центральный компьютер Главного Учёного: -----------------------------------------------------------------------------------------------------------------------
function mon_general_komp_interface()
	local spwn = general_komp_ekran1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "general_komp_ekran1" (CUIScriptWnd)

function general_komp_ekran1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function general_komp_ekran1:__finalize() end

function general_komp_ekran1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\general_komp_ekran1.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)
	xml:InitStatic("ekran_text2", self)
	xml:InitStatic("ekran_text3", self)
	xml:InitStatic("ekran_text4", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function general_komp_ekran1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function general_komp_ekran1:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	mon_general_komp_interface2()
end

function general_komp_ekran1:btn2()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	mon_general_komp_interface3()
end

function general_komp_ekran1:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

function mon_general_komp_interface2()
	local spwn = general_komp_ekran2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "general_komp_ekran2" (CUIScriptWnd)

function general_komp_ekran2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function general_komp_ekran2:__finalize() end

function general_komp_ekran2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\general_komp_ekran2.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)
	xml:InitStatic("ekran_text2", self)
	xml:InitStatic("ekran_text3", self)
	xml:InitStatic("ekran_text4", self)
	xml:InitStatic("ekran_text5", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function general_komp_ekran2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function general_komp_ekran2:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	mon_general_komp_interface()
end

function general_komp_ekran2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------


function mon_general_komp_interface3()
	local spwn = general_komp_ekran3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "general_komp_ekran3" (CUIScriptWnd)

function general_komp_ekran3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function general_komp_ekran3:__finalize() end

function general_komp_ekran3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\general_komp_ekran3.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)
	xml:InitStatic("ekran_text2", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function general_komp_ekran3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function general_komp_ekran3:btn1()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	db.actor:give_info_portion ("goldsphere_guard_off")
end

function general_komp_ekran3:btn2()
	-- self:on_quit()
	addon.actor_disable_inventory()
	soundtrack.beep1()
	mon_general_komp_interface()
end

function general_komp_ekran3:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------


function medkomplekt_use()
	local spwn = medkomplekt(get_hud())
	level.start_stop_menu(spwn,true)
end

class "medkomplekt" (CUIScriptWnd)

function medkomplekt:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function medkomplekt:__finalize() end

function medkomplekt:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("medkomplekt.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("image", self)
	xml:InitStatic("text_general", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if has_alife_info("actor_damaged_head") then
		self.btn_1:Enable(true)
	end
	if has_alife_info("actor_damaged_torso") then
		self.btn_2:Enable(true)
	end
	if has_alife_info("actor_damaged_arm") then
		self.btn_3:Enable(true)
	end
	if has_alife_info("actor_damaged_leg") then
		self.btn_4:Enable(true)
	end
	if has_alife_info("actor_damaged_pelvis") then
		self.btn_5:Enable(true)
	end
	if db.actor:get_bleeding() > 0.1 then
		self.btn_6:Enable(true)
	end
end

function medkomplekt:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function medkomplekt:btn1()
	self:on_quit()
	addon.remove_items("medkomplekt", 1)
	db.actor:disable_info_portion("actor_damaged_head")
	get_hud():RemoveCustomStatic("act_hit_head_indicator",true)
	addon.actor_disable_inventory()
	soundtrack.medkomplekt_use()
end

function medkomplekt:btn2()
	self:on_quit()
	addon.remove_items("medkomplekt", 1)
	db.actor:disable_info_portion("actor_damaged_torso")
	get_hud():RemoveCustomStatic("act_hit_torso_indicator",true)
	addon.actor_disable_inventory()
	soundtrack.medkomplekt_use()
end

function medkomplekt:btn3()
	self:on_quit()
	addon.remove_items("medkomplekt", 1)
	db.actor:disable_info_portion("actor_damaged_arm")
	get_hud():RemoveCustomStatic("act_hit_rarm_indicator",true)
	get_hud():RemoveCustomStatic("act_hit_larm_indicator",true)
	addon.actor_disable_inventory()
	soundtrack.medkomplekt_use()
end

function medkomplekt:btn4()
	self:on_quit()
	addon.remove_items("medkomplekt", 1)
	db.actor:disable_info_portion("actor_damaged_leg")
	get_hud():RemoveCustomStatic("act_hit_rleg_indicator",true)
	get_hud():RemoveCustomStatic("act_hit_lleg_indicator",true)
	addon.actor_disable_inventory()
	soundtrack.medkomplekt_use()
end

function medkomplekt:btn5()
	self:on_quit()
	addon.remove_items("medkomplekt", 1)
	db.actor:disable_info_portion("actor_damaged_pelvis")
	get_hud():RemoveCustomStatic("act_hit_pelvis_indicator",true)
	addon.actor_disable_inventory()
	soundtrack.medkomplekt_use()
end

function medkomplekt:btn6()
	self:on_quit()
	addon.remove_items("medkomplekt", 1)
		if db.actor:get_bleeding() > 0.1 then
			db.actor:heal_wounds(1.5) 
		end
	addon.actor_disable_inventory()
	soundtrack.medkomplekt_use()
end

function medkomplekt:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------


-- Терминал системы безопасности базы на окраине: -----------------------------------------------------------------------------------------------------------------------
function predb_base_comp_interface()
	local spwn = base_comp_interface(get_hud())
	level.start_stop_menu(spwn,true)
end

class "base_comp_interface" (CUIScriptWnd)

function base_comp_interface:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function base_comp_interface:__finalize() end

function base_comp_interface:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("old_komps\\base_comp_interface.xml")

	-- текстура
	xml:InitStatic("ekran_fon", self)
	xml:InitStatic("ekran_ramka", self)
	xml:InitStatic("ekran_name", self)
	xml:InitStatic("ekran_text1", self)
	xml:InitStatic("ekran_text2", self)
	xml:InitStatic("ekran_text3", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

	-- определяем доступность кнопки
	if db.actor:dont_has_info("predb_base_turret") then
		self.btn_1:Enable(true)
	end
	if db.actor:dont_has_info("predb_base_kazarm_open") then
		self.btn_2:Enable(true)
	end
end

function base_comp_interface:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function base_comp_interface:btn1()
	-- self:on_quit()
	soundtrack.beep1()
	db.actor:give_info_portion ("predb_base_turret")
	turret_spawn.predb_base_guard_turret_spawn3()
end

function base_comp_interface:btn2()
	-- self:on_quit()
	soundtrack.beep1()
	db.actor:give_info_portion ("predb_base_kazarm_open")
end

function base_comp_interface:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------------------------------

-- Альбом значков -----------------------------------------------------------------------------------------------
function signs_album_start()
	local spwn = signs_album(get_hud())
	level.start_stop_menu(spwn,true)
end

class "signs_album" (CUIScriptWnd)

function signs_album:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function signs_album:__finalize() end

function signs_album:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("signs_album.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	
	if has_alife_info("sssr_sgn1") then
		xml:InitStatic("image1", self)
	end
	if has_alife_info("sssr_sgn2") then
		xml:InitStatic("image2", self)
	end
	if has_alife_info("sssr_sgn3") then
		xml:InitStatic("image3", self)
	end
	if has_alife_info("sssr_sgn4") then
		xml:InitStatic("image4", self)
	end
	if has_alife_info("sssr_sgn5") then
		xml:InitStatic("image5", self)
	end
	if has_alife_info("sssr_sgn6") then
		xml:InitStatic("image6", self)
	end
	if has_alife_info("sssr_sgn7") then
		xml:InitStatic("image7", self)
	end
	if has_alife_info("sssr_sgn8") then
		xml:InitStatic("image8", self)
	end
	if has_alife_info("sssr_sgn9") then
		xml:InitStatic("image9", self)
	end
	if has_alife_info("sssr_sgn10") then
		xml:InitStatic("image10", self)
	end

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

end

function signs_album:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function signs_album:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------

function signs_album_start2()
	local spwn = signs_album2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "signs_album2" (CUIScriptWnd)

function signs_album2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function signs_album2:__finalize() end

function signs_album2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("signs_album2.xml")

	-- текстура
	xml:InitStatic("ramka", self)
	xml:InitStatic("name", self)
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)
	xml:InitStatic("text4", self)
	xml:InitStatic("text5", self)
	xml:InitStatic("text6", self)
	xml:InitStatic("text7", self)
	xml:InitStatic("text8", self)
	xml:InitStatic("text9", self)
	xml:InitStatic("text10", self)
	xml:InitStatic("text11", self)
	xml:InitStatic("text12", self)
	
	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)
	self.btn_3 = xml:Init3tButton("btn_3", self)
	self:Register(self.btn_3, "btn_3")
	self.btn_3:Enable(false)
	self.btn_4 = xml:Init3tButton("btn_4", self)
	self:Register(self.btn_4, "btn_4")
	self.btn_4:Enable(false)
	self.btn_5 = xml:Init3tButton("btn_5", self)
	self:Register(self.btn_5, "btn_5")
	self.btn_5:Enable(false)
	self.btn_6 = xml:Init3tButton("btn_6", self)
	self:Register(self.btn_6, "btn_6")
	self.btn_6:Enable(false)
	self.btn_7 = xml:Init3tButton("btn_7", self)
	self:Register(self.btn_7, "btn_7")
	self.btn_7:Enable(false)
	self.btn_8 = xml:Init3tButton("btn_8", self)
	self:Register(self.btn_8, "btn_8")
	self.btn_8:Enable(false)
	self.btn_9 = xml:Init3tButton("btn_9", self)
	self:Register(self.btn_9, "btn_9")
	self.btn_9:Enable(false)
	self.btn_10 = xml:Init3tButton("btn_10", self)
	self:Register(self.btn_10, "btn_10")
	self.btn_10:Enable(false)
	self.btn_11 = xml:Init3tButton("btn_11", self)
	self:Register(self.btn_11, "btn_11")
	self.btn_11:Enable(false)
	self.btn_12 = xml:Init3tButton("btn_12", self)
	self:Register(self.btn_12, "btn_12")
	self.btn_12:Enable(false)
	
	-- определяем доступность кнопки
	if (addon_utils.get_object_number(db.actor, "af_coal") >= 2) then
		self.btn_1:Enable(true)
	end
	if ( db.actor:object("af_coal") ~= nil and db.actor:object("af_scale") ~= nil ) then
		self.btn_2:Enable(true)
	end
	
	if (addon_utils.get_object_number(db.actor, "af_ballast") >= 2) then
		self.btn_3:Enable(true)
	end
	if ( db.actor:object("af_ballast") ~= nil and db.actor:object("af_roll") ~= nil ) then
		self.btn_4:Enable(true)
	end
	
	if (addon_utils.get_object_number(db.actor, "af_steel_nut") >= 2) then
		self.btn_5:Enable(true)
	end
	if ( db.actor:object("af_steel_nut") ~= nil and db.actor:object("af_bearing") ~= nil ) then
		self.btn_6:Enable(true)
	end
	
	if (addon_utils.get_object_number(db.actor, "af_frog") >= 2) then
		self.btn_7:Enable(true)
	end
	if ( db.actor:object("af_frog") ~= nil and db.actor:object("af_sagebrush") ~= nil ) then
		self.btn_8:Enable(true)
	end
	
	if (addon_utils.get_object_number(db.actor, "af_glass") >= 2) then
		self.btn_9:Enable(true)
	end
	if ( db.actor:object("af_glass") ~= nil and db.actor:object("af_teardrop") ~= nil ) then
		self.btn_10:Enable(true)
	end
	
	if ( db.actor:object("af_spiral") ~= nil and db.actor:object("af_cristallic") ~= nil ) then
		self.btn_11:Enable(true)
	end
	if ( db.actor:object("af_cristallic") ~= nil and db.actor:object("af_snail") ~= nil ) then
		self.btn_12:Enable(true)
	end

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

end

function signs_album2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
	self:AddCallback("btn_3", ui_events.BUTTON_CLICKED,  self.btn3, self)
	self:AddCallback("btn_4", ui_events.BUTTON_CLICKED,  self.btn4, self)
	self:AddCallback("btn_5", ui_events.BUTTON_CLICKED,  self.btn5, self)
	self:AddCallback("btn_6", ui_events.BUTTON_CLICKED,  self.btn6, self)
	self:AddCallback("btn_7", ui_events.BUTTON_CLICKED,  self.btn7, self)
	self:AddCallback("btn_8", ui_events.BUTTON_CLICKED,  self.btn8, self)
	self:AddCallback("btn_9", ui_events.BUTTON_CLICKED,  self.btn9, self)
	self:AddCallback("btn_10", ui_events.BUTTON_CLICKED,  self.btn10, self)
	self:AddCallback("btn_11", ui_events.BUTTON_CLICKED,  self.btn11, self)
	self:AddCallback("btn_12", ui_events.BUTTON_CLICKED,  self.btn12, self)
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function signs_album2:btn1()
	self:on_quit()
	addon.remove_items("af_coal", 2)
	alife():create('af_scale', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn2()
	self:on_quit()
	addon.remove_items("af_coal", 1)
	addon.remove_items("af_scale", 1)
	alife():create('af_bitum', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn3()
	self:on_quit()
	addon.remove_items("af_ballast", 2)
	alife():create('af_roll', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn4()
	self:on_quit()
	addon.remove_items("af_ballast", 1)
	addon.remove_items("af_roll", 1)
	alife():create('af_chicken_god', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn5()
	self:on_quit()
	addon.remove_items("af_steel_nut", 2)
	alife():create('af_bearing', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn6()
	self:on_quit()
	addon.remove_items("af_steel_nut", 1)
	addon.remove_items("af_bearing", 1)
	alife():create('af_crown', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn7()
	self:on_quit()
	addon.remove_items("af_frog", 2)
	alife():create('af_chestnut', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn8()
	self:on_quit()
	addon.remove_items("af_frog", 1)
	addon.remove_items("af_sagebrush", 1)
	alife():create('af_mushroom', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn9()
	self:on_quit()
	addon.remove_items("af_glass", 2)
	alife():create('af_teardrop', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn10()
	self:on_quit()
	addon.remove_items("af_glass", 1)
	addon.remove_items("af_teardrop", 1)
	alife():create('af_lens', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn11()
	self:on_quit()
	addon.remove_items("af_spiral", 1)
	addon.remove_items("af_cristallic", 1)
	alife():create('af_snail', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end

function signs_album2:btn12()
	self:on_quit()
	addon.remove_items("af_cristallic", 1)
	addon.remove_items("af_snail", 1)
	alife():create('af_hole', db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
end


function signs_album2:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
---------------------------------------------------------------------------------



-- Максим Камеррер: -----------------------------------------------------------------------------------------------------------------------------------------
function yan_camerer_dialog_start()
	local spwn = yan_camerer_dialog(get_hud())
	level.start_stop_menu(spwn,true)
end

class "yan_camerer_dialog" (CUIScriptWnd)

function yan_camerer_dialog:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function yan_camerer_dialog:__finalize() end

function yan_camerer_dialog:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog0.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function yan_camerer_dialog:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function yan_camerer_dialog:btn1()
	self:quit()
	yan_camerer_dialog1()
end

function yan_camerer_dialog:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog1()
	local spwn = camerer_dialog1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog1" (CUIScriptWnd)

function camerer_dialog1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog1:__finalize() end

function camerer_dialog1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog1.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog1:btn1()
	self:quit()
	yan_camerer_dialog2()
end

function camerer_dialog1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog2()
	local spwn = camerer_dialog2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog2" (CUIScriptWnd)

function camerer_dialog2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog2:__finalize() end

function camerer_dialog2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog2.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog2:btn1()
	self:quit()
	yan_camerer_dialog3()
end

function camerer_dialog2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog3()
	local spwn = camerer_dialog3(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog3" (CUIScriptWnd)

function camerer_dialog3:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog3:__finalize() end

function camerer_dialog3:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog3.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog3:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog3:btn1()
	self:quit()
	yan_camerer_dialog4()
end

function camerer_dialog3:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog4()
	local spwn = camerer_dialog4(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog4" (CUIScriptWnd)

function camerer_dialog4:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog4:__finalize() end

function camerer_dialog4:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog4.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog4:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog4:btn1()
	self:quit()
	yan_camerer_dialog5()
end

function camerer_dialog4:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog5()
	local spwn = camerer_dialog5(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog5" (CUIScriptWnd)

function camerer_dialog5:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog5:__finalize() end

function camerer_dialog5:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog5.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog5:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog5:btn1()
	self:quit()
	yan_camerer_dialog6()
end

function camerer_dialog5:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog6()
	local spwn = camerer_dialog6(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog6" (CUIScriptWnd)

function camerer_dialog6:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog6:__finalize() end

function camerer_dialog6:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog6.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog6:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog6:btn1()
	self:quit()
	yan_camerer_dialog7()
end

function camerer_dialog6:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog7()
	local spwn = camerer_dialog7(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog7" (CUIScriptWnd)

function camerer_dialog7:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog7:__finalize() end

function camerer_dialog7:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog7.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog7:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog7:btn1()
	self:quit()
	yan_camerer_dialog8()
end

function camerer_dialog7:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog8()
	local spwn = camerer_dialog8(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog8" (CUIScriptWnd)

function camerer_dialog8:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog8:__finalize() end

function camerer_dialog8:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog8.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog8:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog8:btn1()
	self:quit()
	yan_camerer_dialog9()
end

function camerer_dialog8:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog9()
	local spwn = camerer_dialog9(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog9" (CUIScriptWnd)

function camerer_dialog9:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog9:__finalize() end

function camerer_dialog9:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog9.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog9:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog9:btn1()
	self:quit()
	yan_camerer_dialog10()
end

function camerer_dialog9:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog10()
	local spwn = camerer_dialog10(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog10" (CUIScriptWnd)

function camerer_dialog10:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog10:__finalize() end

function camerer_dialog10:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog10.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function camerer_dialog10:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function camerer_dialog10:btn1()
	self:quit()
	yan_camerer_dialog11()
end

function camerer_dialog10:btn2()
	self:quit()
	yan_camerer_dialog12()
end

function camerer_dialog10:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog11()
	local spwn = camerer_dialog11(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog11" (CUIScriptWnd)

function camerer_dialog11:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog11:__finalize() end

function camerer_dialog11:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog11.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog11:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog11:btn1()
	self:quit()
	db.actor:give_info_portion ("yan_camerer_yes")
	start_real_timer(2, "timer_actions.yan_camerer_doll_action")
end

function camerer_dialog11:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog12()
	local spwn = camerer_dialog12(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog12" (CUIScriptWnd)

function camerer_dialog12:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog12:__finalize() end

function camerer_dialog12:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog12.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function camerer_dialog12:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function camerer_dialog12:btn1()
	self:quit()
	yan_camerer_dialog11()
end

function camerer_dialog12:btn2()
	self:quit()
	db.actor:give_info_portion ("yan_camerer_no")
end

function camerer_dialog12:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog13()
	local spwn = camerer_dialog13(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog13" (CUIScriptWnd)

function camerer_dialog13:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog13:__finalize() end

function camerer_dialog13:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog13.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog13:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog13:btn1()
	self:quit()
	yan_camerer_dialog14()
end

function camerer_dialog13:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog14()
	local spwn = camerer_dialog14(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog14" (CUIScriptWnd)

function camerer_dialog14:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog14:__finalize() end

function camerer_dialog14:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog14.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog14:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog14:btn1()
	self:quit()
	xr_effects.karma_down()
	db.actor:give_info_portion ("yan_camerer_reward")
	db.actor:give_money(200000)
	news_manager.send_tip(db.actor, "yan_camerer_reward_tip", nil, "stalker", 8000, nil)
end

function camerer_dialog14:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


function yan_camerer_dialog15()
	local spwn = camerer_dialog15(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog15" (CUIScriptWnd)

function camerer_dialog15:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog15:__finalize() end

function camerer_dialog15:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog15.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog15:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog15:btn1()
	self:quit()
	yan_camerer_dialog16()
end

function camerer_dialog15:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function yan_camerer_dialog16()
	local spwn = camerer_dialog16(get_hud())
	level.start_stop_menu(spwn,true)
end

class "camerer_dialog16" (CUIScriptWnd)

function camerer_dialog16:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function camerer_dialog16:__finalize() end

function camerer_dialog16:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("camerer\\camerer_dialog16.xml")

	-- текстура
	xml:InitStatic("face", self)
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("camerer_name", self)
	xml:InitStatic("camerer_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function camerer_dialog16:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function camerer_dialog16:btn1()
	self:quit()

end

function camerer_dialog16:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------



-- Телефон в Припяти: --------------------------------------------------------------------------

function pri_anomal_phone_use()
	local spwn = pri_anomal_phone1(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pri_anomal_phone1" (CUIScriptWnd)

function pri_anomal_phone1:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pri_anomal_phone1:__finalize() end

function pri_anomal_phone1:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("pri_anomal_phone\\pri_anomal_phone1.xml")

	-- текстура
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("pri_anomal_phone_name", self)
	xml:InitStatic("pri_anomal_phone_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
end

function pri_anomal_phone1:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
end

function pri_anomal_phone1:btn1()
	self:quit()
	pri_anomal_phone_use2()
end

function pri_anomal_phone1:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------

function pri_anomal_phone_use2()
	local spwn = pri_anomal_phone2(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pri_anomal_phone2" (CUIScriptWnd)

function pri_anomal_phone2:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pri_anomal_phone2:__finalize() end

function pri_anomal_phone2:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,0,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("pri_anomal_phone\\pri_anomal_phone2.xml")

	-- текстура
	xml:InitStatic("dialog_table", self)
	xml:InitStatic("pri_anomal_phone_name", self)
	xml:InitStatic("pri_anomal_phone_talk_text", self)

	-- кнопки
	self.btn_1 = xml:Init3tButton("btn_1", self)
	self:Register(self.btn_1, "btn_1")
	self.btn_1:Enable(false)
	self.btn_2 = xml:Init3tButton("btn_2", self)
	self:Register(self.btn_2, "btn_2")
	self.btn_2:Enable(false)

	-- определяем доступность кнопки
	self.btn_1:Enable(true)
	self.btn_2:Enable(true)
end

function pri_anomal_phone2:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_1", ui_events.BUTTON_CLICKED,  self.btn1, self)
	self:AddCallback("btn_2", ui_events.BUTTON_CLICKED,  self.btn2, self)
end

function pri_anomal_phone2:btn1()
	self:quit()
	db.actor:give_info_portion ("pri_phone_off")
end

function pri_anomal_phone2:btn2()
	self:quit()
	db.actor:give_info_portion ("pri_phone_task")
end

function pri_anomal_phone2:quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end
-----------------------------------------------------------------------------------------------


function pri_sold_monument_table()
	local spwn = pri_sold_monument(get_hud())
	level.start_stop_menu(spwn,true)
end

class "pri_sold_monument" (CUIScriptWnd)

function pri_sold_monument:__init(owner) super()
	self.dlg = self
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pri_sold_monument:__finalize() end

function pri_sold_monument:InitControls()
	-- здесь определяем координаты левого верхнего угла и ширину-высоту
	self:Init(0,-70,1024,768)

	-- файл-описатель наших элементов
	local xml = CScriptXmlInit()
	xml:ParseFile("pri_anomal_phone\\pri_sold_monument.xml")

	-- рамка
	xml:InitStatic("ramka", self)

	-- заголовок
	xml:InitStatic("name", self)

	-- Надписи:
	xml:InitStatic("text1", self)
	xml:InitStatic("text2", self)
	xml:InitStatic("text3", self)

	-- кнопка офф
	self:Register(xml:Init3tButton("btn_quit", self),"btn_quit")

end

function pri_sold_monument:InitCallBacks()
	-- тут интерактивные элементы, при определенном действии выполняется заданная ф-ия
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
end

function pri_sold_monument:on_quit()
	self:GetHolder():start_stop_menu (self,true)
	self.dlg = nil
	collectgarbage("collect")
end









